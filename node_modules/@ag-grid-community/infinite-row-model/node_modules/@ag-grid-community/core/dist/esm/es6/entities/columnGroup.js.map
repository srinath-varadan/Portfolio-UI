{"version":3,"sources":["../../../src/ts/entities/columnGroup.ts"],"names":[],"mappings":"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","file":"columnGroup.js","sourcesContent":["import { IHeaderColumn } from \"./iHeaderColumn\";\nimport { ColGroupDef } from \"./colDef\";\nimport { Column } from \"./column\";\nimport { AbstractColDef } from \"./colDef\";\nimport { ProvidedColumnGroup } from \"./providedColumnGroup\";\nimport { EventService } from \"../eventService\";\nimport { Autowired } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { AgEvent } from \"../events\";\nimport { last } from \"../utils/array\";\n\nexport class ColumnGroup implements IHeaderColumn {\n\n    public static HEADER_GROUP_SHOW_OPEN = 'open';\n    public static HEADER_GROUP_SHOW_CLOSED = 'closed';\n\n    public static EVENT_LEFT_CHANGED = 'leftChanged';\n    public static EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';\n\n    // this is static, a it is used outside of this class\n    public static createUniqueId(groupId: string, instanceId: number): string {\n        return groupId + '_' + instanceId;\n    }\n\n    @Autowired('gridOptionsWrapper') gridOptionsWrapper: GridOptionsWrapper;\n\n    // all the children of this group, regardless of whether they are opened or closed\n    private children: IHeaderColumn[] | null;\n    // depends on the open/closed state of the group, only displaying columns are stored here\n    private displayedChildren: IHeaderColumn[] | null = [];\n\n    private readonly groupId: string;\n    private readonly instanceId: number;\n    private readonly providedColumnGroup: ProvidedColumnGroup;\n    private readonly pinned: 'left' | 'right' | null;\n\n    // private moving = false\n    private left: number | null;\n    private oldLeft: number | null;\n    private localEventService: EventService = new EventService();\n\n    private parent: ColumnGroup | null;\n\n    constructor(providedColumnGroup: ProvidedColumnGroup, groupId: string, instanceId: number, pinned: 'left' | 'right' | null) {\n        this.groupId = groupId;\n        this.instanceId = instanceId;\n        this.providedColumnGroup = providedColumnGroup;\n        this.pinned = pinned;\n    }\n\n    // as the user is adding and removing columns, the groups are recalculated.\n    // this reset clears out all children, ready for children to be added again\n    public reset(): void {\n        this.parent = null;\n        this.children = null;\n        this.displayedChildren = null;\n    }\n\n    public getParent(): ColumnGroup {\n        return this.parent!;\n    }\n\n    public setParent(parent: ColumnGroup): void {\n        this.parent = parent;\n    }\n\n    public getUniqueId(): string {\n        return ColumnGroup.createUniqueId(this.groupId, this.instanceId);\n    }\n\n    public isEmptyGroup(): boolean {\n        return this.displayedChildren!.length === 0;\n    }\n\n    public isMoving(): boolean {\n        const allLeafColumns = this.getProvidedColumnGroup().getLeafColumns();\n        if (!allLeafColumns || allLeafColumns.length === 0) { return false; }\n\n        return allLeafColumns.every(col => col.isMoving());\n    }\n\n    public checkLeft(): void {\n        // first get all children to setLeft, as it impacts our decision below\n        this.displayedChildren!.forEach((child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                child.checkLeft();\n            }\n        });\n\n        // set our left based on first displayed column\n        if (this.displayedChildren!.length > 0) {\n            if (this.gridOptionsWrapper.isEnableRtl()) {\n                const lastChild = last(this.displayedChildren!);\n                const lastChildLeft = lastChild.getLeft();\n                this.setLeft(lastChildLeft);\n            } else {\n                const firstChildLeft = this.displayedChildren![0].getLeft();\n                this.setLeft(firstChildLeft);\n            }\n        } else {\n            // this should never happen, as if we have no displayed columns, then\n            // this groups should not even exist.\n            this.setLeft(null);\n        }\n    }\n\n    public getLeft(): number | null {\n        return this.left;\n    }\n\n    public getOldLeft(): number | null {\n        return this.oldLeft;\n    }\n\n    public setLeft(left: number | null) {\n        this.oldLeft = left;\n        if (this.left !== left) {\n            this.left = left;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));\n        }\n    }\n\n    public getPinned(): 'left' | 'right' | null {\n        return this.pinned;\n    }\n\n    private createAgEvent(type: string): AgEvent {\n        return { type };\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n\n    public getGroupId(): string {\n        return this.groupId;\n    }\n\n    public getInstanceId(): number {\n        return this.instanceId;\n    }\n\n    public isChildInThisGroupDeepSearch(wantedChild: IHeaderColumn): boolean {\n        let result = false;\n\n        this.children!.forEach((foundChild: IHeaderColumn) => {\n            if (wantedChild === foundChild) {\n                result = true;\n            }\n            if (foundChild instanceof ColumnGroup) {\n                if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {\n                    result = true;\n                }\n            }\n        });\n\n        return result;\n    }\n\n    public getActualWidth(): number {\n        let groupActualWidth = 0;\n        if (this.displayedChildren) {\n            this.displayedChildren.forEach((child: IHeaderColumn) => {\n                groupActualWidth += child.getActualWidth();\n            });\n        }\n        return groupActualWidth;\n    }\n\n    public isResizable(): boolean {\n        if (!this.displayedChildren) { return false; }\n\n        // if at least one child is resizable, then the group is resizable\n        let result = false;\n        this.displayedChildren.forEach((child: IHeaderColumn) => {\n            if (child.isResizable()) {\n                result = true;\n            }\n        });\n\n        return result;\n    }\n\n    public getMinWidth(): number {\n        let result = 0;\n        this.displayedChildren!.forEach((groupChild: IHeaderColumn) => {\n            result += groupChild.getMinWidth() || 0;\n        });\n        return result;\n    }\n\n    public addChild(child: IHeaderColumn): void {\n        if (!this.children) {\n            this.children = [];\n        }\n        this.children.push(child);\n    }\n\n    public getDisplayedChildren(): IHeaderColumn[] | null {\n        return this.displayedChildren;\n    }\n\n    public getLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n\n    public getDisplayedLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addDisplayedLeafColumns(result);\n        return result;\n    }\n\n    // why two methods here doing the same thing?\n    public getDefinition(): AbstractColDef | null {\n        return this.providedColumnGroup.getColGroupDef();\n    }\n\n    public getColGroupDef(): ColGroupDef | null {\n        return this.providedColumnGroup.getColGroupDef();\n    }\n\n    public isPadding(): boolean {\n        return this.providedColumnGroup.isPadding();\n    }\n\n    public isExpandable(): boolean {\n        return this.providedColumnGroup.isExpandable();\n    }\n\n    public isExpanded(): boolean {\n        return this.providedColumnGroup.isExpanded();\n    }\n\n    public setExpanded(expanded: boolean): void {\n        this.providedColumnGroup.setExpanded(expanded);\n    }\n\n    private addDisplayedLeafColumns(leafColumns: Column[]): void {\n        this.displayedChildren!.forEach((child: IHeaderColumn) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            } else if (child instanceof ColumnGroup) {\n                child.addDisplayedLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    private addLeafColumns(leafColumns: Column[]): void {\n        this.children!.forEach((child: IHeaderColumn) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            } else if (child instanceof ColumnGroup) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    public getChildren(): IHeaderColumn[] | null {\n        return this.children;\n    }\n\n    public getColumnGroupShow(): string | undefined {\n        return this.providedColumnGroup.getColumnGroupShow();\n    }\n\n    public getProvidedColumnGroup(): ProvidedColumnGroup {\n        return this.providedColumnGroup;\n    }\n\n    /** @deprecated getOriginalColumnGroup is deprecated, use getOriginalColumnGroup. */\n    public getOriginalColumnGroup(): ProvidedColumnGroup {\n        console.warn('AG Grid: columnGroup.getOriginalColumnGroup() is deprecated due to a method rename, use columnGroup.getProvidedColumnGroup() instead');\n        return this.getProvidedColumnGroup();\n    }\n\n    public getPaddingLevel(): number {\n        const parent = this.getParent();\n\n        if (!this.isPadding() || !parent || !parent.isPadding()) {\n            return 0;\n        }\n\n        return 1 + parent.getPaddingLevel();\n    }\n\n    public calculateDisplayedColumns() {\n        // clear out last time we calculated\n        this.displayedChildren = [];\n\n        // find the column group that is controlling expandable. this is relevant when we have padding (empty)\n        // groups, where the expandable is actually the first parent that is not a padding group.\n        let parentWithExpansion: ColumnGroup = this;\n        while (parentWithExpansion != null && parentWithExpansion.isPadding()) {\n            parentWithExpansion = parentWithExpansion.getParent();\n        }\n\n        const isExpandable = parentWithExpansion ? parentWithExpansion.providedColumnGroup.isExpandable() : false;\n        // it not expandable, everything is visible\n        if (!isExpandable) {\n            this.displayedChildren = this.children;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n            return;\n        }\n\n        // Add cols based on columnGroupShow\n        // Note - the below also adds padding groups, these are always added because they never have\n        // colDef.columnGroupShow set.\n        this.children!.forEach(child => {\n            // never add empty groups\n            const emptyGroup = child instanceof ColumnGroup && (!child.displayedChildren || !child.displayedChildren.length);\n            if (emptyGroup) { return; }\n\n            const headerGroupShow = child.getColumnGroupShow();\n            switch (headerGroupShow) {\n                case ColumnGroup.HEADER_GROUP_SHOW_OPEN:\n                    // when set to open, only show col if group is open\n                    if (parentWithExpansion.providedColumnGroup.isExpanded()) {\n                        this.displayedChildren!.push(child);\n                    }\n                    break;\n                case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:\n                    // when set to open, only show col if group is open\n                    if (!parentWithExpansion.providedColumnGroup.isExpanded()) {\n                        this.displayedChildren!.push(child);\n                    }\n                    break;\n                default:\n                    this.displayedChildren!.push(child);\n                    break;\n            }\n        });\n\n        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n    }\n}\n"]}