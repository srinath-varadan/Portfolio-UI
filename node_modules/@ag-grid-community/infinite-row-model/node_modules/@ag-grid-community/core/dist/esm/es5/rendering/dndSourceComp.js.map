{"version":3,"sources":["../../../src/ts/rendering/dndSourceComp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAInD,OAAO,EAAE,gBAAgB,EAAE,MAAM,eAAe,CAAC;AAGjD;IAAmC,iCAAS;IAQxC,uBAAY,OAAgB,EAAE,MAAc,EAAE,KAAY,EAAE,KAAkB;QAA9E,YACI,kBAAM,qEAAiE,CAAC,SAK3E;QAJG,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;IACvB,CAAC;IAGO,qCAAa,GAArB;QACI,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,IAAI,CAAE,CAAC,CAAC;QACpF,gGAAgG;QAChG,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,UAAC,CAAa;YAChD,CAAC,CAAC,eAAe,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEO,qCAAa,GAArB;QACI,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvE,CAAC;IAEO,mCAAW,GAAnB,UAAoB,SAAoB;QAAxC,iBA8BC;QA5BG,IAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC;QAErE,SAAS,CAAC,YAAa,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvD,2EAA2E;QAC3E,IAAM,gBAAgB,GAAG;YACrB,IAAI;gBACA,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAEnD,SAAS,CAAC,YAAa,CAAC,OAAO,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;gBAC9D,SAAS,CAAC,YAAa,CAAC,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;aAE3D;YAAC,OAAO,CAAC,EAAE;gBACR,qEAAqE;aACxE;QACL,CAAC,CAAC;QAEF,IAAI,iBAAiB,EAAE;YACnB,IAAM,MAAM,GAA6B;gBACrC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS;gBAC3C,GAAG,EAAE,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAG;gBACtC,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAG;gBAClD,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE;aAChD,CAAA;YACD,iBAAiB,CAAC,MAAM,CAAC,CAAC;SAC7B;aAAM;YACH,gBAAgB,EAAE,CAAC;SACtB;IACL,CAAC;IAEO,uCAAe,GAAvB;QACI,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAlDD;QADC,aAAa;sDAUb;IA0CL,oBAAC;CApED,AAoEC,CApEkC,SAAS,GAoE3C;SApEY,aAAa","file":"dndSourceComp.js","sourcesContent":["import { Component } from \"../widgets/component\";\nimport { PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Beans } from \"./beans\";\nimport { Column } from \"../entities/column\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { DndSourceOnRowDragParams } from \"../entities/colDef\";\n\nexport class DndSourceComp extends Component {\n\n    private readonly beans: Beans;\n\n    private readonly rowNode: RowNode;\n    private readonly column: Column;\n    private readonly eCell: HTMLElement;\n\n    constructor(rowNode: RowNode, column: Column, beans: Beans, eCell: HTMLElement) {\n        super(`<div class=\"ag-drag-handle ag-row-drag\" draggable=\"true\"></div>`);\n        this.rowNode = rowNode;\n        this.column = column;\n        this.beans = beans;\n        this.eCell = eCell;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const eGui = this.getGui();\n        eGui.appendChild(createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null)!);\n        // we need to stop the event propagation here to avoid starting a range selection while dragging\n        this.addGuiEventListener('mousedown', (e: MouseEvent) => {\n            e.stopPropagation();\n        });\n        this.addDragSource();\n        this.checkVisibility();\n    }\n\n    private addDragSource(): void {\n        this.addGuiEventListener('dragstart', this.onDragStart.bind(this));\n    }\n\n    private onDragStart(dragEvent: DragEvent): void {\n\n        const providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;\n\n        dragEvent.dataTransfer!.setDragImage(this.eCell, 0, 0);\n\n        // default behaviour is to convert data to json and set into drag component\n        const defaultOnRowDrag = () => {\n            try {\n                const jsonData = JSON.stringify(this.rowNode.data);\n\n                dragEvent.dataTransfer!.setData('application/json', jsonData);\n                dragEvent.dataTransfer!.setData('text/plain', jsonData);\n\n            } catch (e) {\n                // if we cannot convert the data to json, then we do not set the type\n            }\n        };\n\n        if (providedOnRowDrag) {\n            const params: DndSourceOnRowDragParams = {\n                rowNode: this.rowNode, dragEvent: dragEvent,\n                api: this.gridOptionsWrapper.getApi()!,\n                columnApi: this.gridOptionsWrapper.getColumnApi()!,\n                context: this.gridOptionsWrapper.getContext()\n            }\n            providedOnRowDrag(params);\n        } else {\n            defaultOnRowDrag();\n        }\n    }\n\n    private checkVisibility(): void {\n        const visible = this.column.isDndSource(this.rowNode);\n        this.setDisplayed(visible);\n    }\n}\n"]}