{"version":3,"sources":["../../../src/ts/headerRendering/row/headerRowComp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,mDAAkE;AAClE,2CAAmD;AACnD,yCAAmD;AACnD,+CAAyE;AACzE,uDAAoD;AAGpD,mEAAgE;AAEhE,kFAA+E;AAE/E,uFAAoF;AAIpF,IAAY,aAIX;AAJD,WAAY,aAAa;IACrB,uCAAsB,CAAA;IACtB,kCAAiB,CAAA;IACjB,2CAA0B,CAAA;AAC9B,CAAC,EAJW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAIxB;AAED,MAAa,aAAc,SAAQ,qBAAS;IAMxC,YAAY,IAAmB;QAC3B,KAAK,EAAE,CAAC;QAHJ,gBAAW,GAAuE,EAAE,CAAC;QAKzF,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC;YAC5E,IAAI,CAAC,OAAO,EAAE,IAAI,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC,sBAAsB,CAAC;QAE7H,IAAI,CAAC,WAAW,CAAC,UAAU,CAAA,6BAA6B,UAAU,qBAAqB,CAAC,CAAC;QAEzF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,mCAAmC;IAE3B,IAAI;QAER,MAAM,SAAS,GAAmB;YAC9B,YAAY,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,SAAS,GAAG,SAAS;YACpE,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM;YACxD,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG;YAC5C,cAAc,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YACnD,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK;YACpD,eAAe,EAAE,QAAQ,CAAC,EAAE,CAAC,sBAAe,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,QAAQ,CAAC;SACxE,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAGO,kBAAkB;QACtB,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC;IAEO,cAAc,CAAC,KAA+B;QAClD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;YAAE,OAAO;SAAE;QAEhC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QAEtB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACjB,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YAChC,IAAI,IAAI,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;YACxB,OAAO,QAAQ,CAAC,EAAE,CAAC,CAAC;YAEpB,IAAI,IAAI,IAAI,IAAI,EAAE;gBACd,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACnC,IAAI,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;aAC5C;YAED,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,sBAAa,CAAC,QAAQ,EAAE,CAAC,EAAU,EAAE,IAAoD,EAAE,EAAE;YACzF,IAAI,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;YACzC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,MAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC;QAClE,IAAI,cAAc,EAAE;YAChB,MAAM,KAAK,GAAG,6BAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACrD,2FAA2F;YAC3F,KAAK,CAAC,IAAI,CAAC,CAAC,CAAiD,EAAE,CAAiD,EAAE,EAAE;gBAChH,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,mBAAmB,EAAE,CAAC,OAAO,EAAG,CAAC;gBAC3D,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,mBAAmB,EAAE,CAAC,OAAO,EAAG,CAAC;gBAC3D,OAAO,KAAK,GAAG,KAAK,CAAC;YACzB,CAAC,CAAC,CAAC;YACH,MAAM,eAAe,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;YACnD,sBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,eAAe,CAAC,CAAC;SACpD;IACL,CAAC;IAEO,gBAAgB,CAAC,UAAkC;QAEvD,IAAI,MAAsD,CAAC;QAE3D,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;YACzB,KAAK,aAAa,CAAC,YAAY;gBAC3B,MAAM,GAAG,IAAI,yCAAmB,CAAC,UAAiC,CAAC,CAAC;gBACpE,MAAM;YACV,KAAK,aAAa,CAAC,eAAe;gBAC9B,MAAM,GAAG,IAAI,2CAAoB,CAAC,UAAkC,CAAC,CAAC;gBACtE,MAAM;YACV;gBACI,MAAM,GAAG,IAAI,+BAAc,CAAC,UAA4B,CAAC,CAAC;gBAC1D,MAAM;SACb;QAED,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACxB,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAEhC,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AA9EG;IADC,uBAAa;yCAab;AAGD;IADC,oBAAU;uDAGV;AApCL,sCAiGC","file":"headerRowComp.js","sourcesContent":["import { PostConstruct, PreDestroy } from '../../context/context';\nimport { setAriaRowIndex } from '../../utils/aria';\nimport { setDomChildOrder } from '../../utils/dom';\nimport { getAllValuesInObject, iterateObject } from '../../utils/object';\nimport { Component } from '../../widgets/component';\nimport { AbstractHeaderCellComp } from '../cells/abstractCell/abstractHeaderCellComp';\nimport { AbstractHeaderCellCtrl } from '../cells/abstractCell/abstractHeaderCellCtrl';\nimport { HeaderCellComp } from '../cells/column/headerCellComp';\nimport { HeaderCellCtrl } from '../cells/column/headerCellCtrl';\nimport { HeaderGroupCellComp } from '../cells/columnGroup/headerGroupCellComp';\nimport { HeaderGroupCellCtrl } from '../cells/columnGroup/headerGroupCellCtrl';\nimport { HeaderFilterCellComp } from '../cells/floatingFilter/headerFilterCellComp';\nimport { HeaderFilterCellCtrl } from '../cells/floatingFilter/headerFilterCellCtrl';\nimport { HeaderRowCtrl, IHeaderRowComp } from './headerRowCtrl';\n\nexport enum HeaderRowType {\n    COLUMN_GROUP = 'group',\n    COLUMN = 'column',\n    FLOATING_FILTER = 'filter'\n}\n\nexport class HeaderRowComp extends Component {\n\n    private ctrl: HeaderRowCtrl;\n\n    private headerComps: { [key: string]: AbstractHeaderCellComp<AbstractHeaderCellCtrl>; } = {};\n\n    constructor(ctrl: HeaderRowCtrl) {\n        super();\n\n        const extraClass = ctrl.getType() == HeaderRowType.COLUMN_GROUP ? `ag-header-row-column-group` :\n                            ctrl.getType() == HeaderRowType.FLOATING_FILTER ? `ag-header-row-column-filter` : `ag-header-row-column`;\n\n        this.setTemplate(/* html */`<div class=\"ag-header-row ${extraClass}\" role=\"row\"></div>`);\n\n        this.ctrl = ctrl;\n    }\n\n    //noinspection JSUnusedLocalSymbols\n    @PostConstruct\n    private init(): void {\n\n        const compProxy: IHeaderRowComp = {\n            setTransform: transform => this.getGui().style.transform = transform,\n            setHeight: height => this.getGui().style.height = height,\n            setTop: top => this.getGui().style.top = top,\n            setHeaderCtrls: ctrls => this.setHeaderCtrls(ctrls),\n            setWidth: width => this.getGui().style.width = width,\n            setAriaRowIndex: rowIndex => setAriaRowIndex(this.getGui(), rowIndex)\n        };\n\n        this.ctrl.setComp(compProxy);\n    }\n\n    @PreDestroy\n    private destroyHeaderCtrls(): void {\n        this.setHeaderCtrls([]);\n    }\n\n    private setHeaderCtrls(ctrls: AbstractHeaderCellCtrl[]): void {\n        if (!this.isAlive()) { return; }\n\n        const oldComps = this.headerComps;\n        this.headerComps = {};\n\n        ctrls.forEach(ctrl => {\n            const id = ctrl.getInstanceId();\n            let comp = oldComps[id];\n            delete oldComps[id];\n\n            if (comp == null) {\n                comp = this.createHeaderComp(ctrl);\n                this.getGui().appendChild(comp.getGui());\n            }\n\n            this.headerComps[id] = comp;\n        });\n\n        iterateObject(oldComps, (id: string, comp: AbstractHeaderCellComp<AbstractHeaderCellCtrl>) => {\n            this.getGui().removeChild(comp.getGui());\n            this.destroyBean(comp);\n        });\n\n        const ensureDomOrder = this.gridOptionsWrapper.isEnsureDomOrder();\n        if (ensureDomOrder) {\n            const comps = getAllValuesInObject(this.headerComps);\n            // ordering the columns by left position orders them in the order they appear on the screen\n            comps.sort((a: AbstractHeaderCellComp<AbstractHeaderCellCtrl>, b: AbstractHeaderCellComp<AbstractHeaderCellCtrl>) => {\n                const leftA = a.getCtrl().getColumnGroupChild().getLeft()!;\n                const leftB = b.getCtrl().getColumnGroupChild().getLeft()!;\n                return leftA - leftB;\n            });\n            const elementsInOrder = comps.map(c => c.getGui());\n            setDomChildOrder(this.getGui(), elementsInOrder);\n        }\n    }\n\n    private createHeaderComp(headerCtrl: AbstractHeaderCellCtrl): AbstractHeaderCellComp<AbstractHeaderCellCtrl> {\n\n        let result: AbstractHeaderCellComp<AbstractHeaderCellCtrl>;\n\n        switch (this.ctrl.getType()) {\n            case HeaderRowType.COLUMN_GROUP:\n                result = new HeaderGroupCellComp(headerCtrl as HeaderGroupCellCtrl);\n                break;\n            case HeaderRowType.FLOATING_FILTER:\n                result = new HeaderFilterCellComp(headerCtrl as HeaderFilterCellCtrl);\n                break;\n            default:\n                result = new HeaderCellComp(headerCtrl as HeaderCellCtrl);\n                break;\n        }\n\n        this.createBean(result);\n        result.setParentComponent(this);\n\n        return result;\n    }\n}\n"]}