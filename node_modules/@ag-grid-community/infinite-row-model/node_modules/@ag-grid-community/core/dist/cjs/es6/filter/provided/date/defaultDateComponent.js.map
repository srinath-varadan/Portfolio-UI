{"version":3,"sources":["../../../src/ts/filter/provided/date/defaultDateComponent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,0DAAuD;AAEvD,gFAAoE;AACpE,8CAA6E;AAC7E,oDAA2E;AAG3E,MAAa,oBAAqB,SAAQ,qBAAS;IAG/C;QACI,KAAK,CAAC,UAAU,CAAA;;;mBAGL,CACV,CAAC;IACN,CAAC;IAED,4FAA4F;IAC5F,mEAAmE;IAC5D,OAAO;QACV,KAAK,CAAC,OAAO,EAAE,CAAC;IACpB,CAAC;IAEM,IAAI,CAAC,MAAmB;QAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;QACxD,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;QAEvD,IAAI,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,EAAE;YACzC,YAAY,CAAC,IAAI,GAAG,MAAM,CAAC;SAC9B;QAED,4EAA4E;QAC5E,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,WAAW,EAAE,GAAG,EAAE;YACpD,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,EAAE;gBAAE,OAAO;aAAE;YAC7C,YAAY,CAAC,KAAK,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE;YAC/C,IAAI,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,aAAa,EAAE;gBAAE,OAAO;aAAE;YACrD,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,EAAE;gBAAE,OAAO;aAAE;YAE7C,MAAM,CAAC,aAAa,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC,YAAY,IAAI,EAAE,CAAC;QACjE,IAAI,YAAY,EAAE;YACd,YAAY,CAAC,GAAG,GAAG,GAAG,YAAY,QAAQ,CAAC;SAC9C;QACD,IAAI,YAAY,EAAE;YACd,YAAY,CAAC,GAAG,GAAG,GAAG,YAAY,QAAQ,CAAC;SAC9C;IACL,CAAC;IAEM,OAAO;QACV,OAAO,8BAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC/D,CAAC;IAEM,OAAO,CAAC,IAAU;QACrB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,oBAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,mBAAmB,CAAC,WAAmB;QAC1C,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAEM,WAAW,CAAC,QAAiB;QAChC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAEM,gBAAgB,CAAC,MAAgC;QACpD,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;YAClC,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,CAAC;SAC7C;IACL,CAAC;IAEO,0BAA0B,CAAC,MAAmB;QAClD,IAAI,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,YAAY,CAAC,iBAAiB,IAAI,IAAI,EAAE;YACtE,OAAO,MAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC;SAChD;QAED,OAAO,yBAAe,EAAE,IAAI,0BAAgB,EAAE,CAAC;IACnD,CAAC;CACJ;AA3E8B;IAA1B,kCAAW,CAAC,YAAY,CAAC;wDAA+C;AAD7E,oDA4EC","file":"defaultDateComponent.js","sourcesContent":["import { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { Component } from '../../../widgets/component';\nimport { IDateComp, IDateParams } from '../../../rendering/dateComponent';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { serialiseDate, parseDateTimeFromString } from '../../../utils/date';\nimport { isBrowserChrome, isBrowserFirefox } from '../../../utils/browser';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\n\nexport class DefaultDateComponent extends Component implements IDateComp {\n    @RefSelector('eDateInput') private readonly eDateInput: AgInputTextField;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-filter-filter\">\n                <ag-input-text-field class=\"ag-date-filter\" ref=\"eDateInput\"></ag-input-text-field>\n            </div>`\n        );\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IDateParams): void {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const inputElement = this.eDateInput.getInputElement();\n\n        if (this.shouldUseBrowserDatePicker(params)) {\n            inputElement.type = 'date';\n        }\n\n        // ensures that the input element is focussed when a clear button is clicked\n        this.addManagedListener(inputElement, 'mousedown', () => {\n            if (this.eDateInput.isDisabled()) { return; }\n            inputElement.focus();\n        });\n\n        this.addManagedListener(inputElement, 'input', e => {\n            if (e.target !== eDocument.activeElement) { return; }\n            if (this.eDateInput.isDisabled()) { return; }\n\n            params.onDateChanged();\n        });\n\n        const { minValidYear, maxValidYear } = params.filterParams || {};\n        if (minValidYear) {\n            inputElement.min = `${minValidYear}-01-01`;\n        }\n        if (maxValidYear) {\n            inputElement.max = `${maxValidYear}-12-31`;\n        }\n    }\n\n    public getDate(): Date | null {\n        return parseDateTimeFromString(this.eDateInput.getValue());\n    }\n\n    public setDate(date: Date): void {\n        this.eDateInput.setValue(serialiseDate(date, false));\n    }\n\n    public setInputPlaceholder(placeholder: string): void {\n        this.eDateInput.setInputPlaceholder(placeholder);\n    }\n\n    public setDisabled(disabled: boolean): void {\n        this.eDateInput.setDisabled(disabled);\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (!params || !params.suppressFocus) {\n            this.eDateInput.getInputElement().focus();\n        }\n    }\n\n    private shouldUseBrowserDatePicker(params: IDateParams): boolean {\n        if (params.filterParams && params.filterParams.browserDatePicker != null) {\n            return params.filterParams.browserDatePicker;\n        }\n\n        return isBrowserChrome() || isBrowserFirefox();\n    }\n}\n"]}