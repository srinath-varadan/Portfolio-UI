{"version":3,"sources":["../../../src/ts/gridBodyComp/rowDragFeature.ts"],"names":[],"mappings":"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","file":"rowDragFeature.js","sourcesContent":["import {\n    DragAndDropService,\n    DraggingEvent,\n    DragSourceType,\n    DropTarget,\n    VerticalDirection\n} from \"../dragAndDrop/dragAndDropService\";\nimport { Autowired, Optional, PostConstruct } from \"../context/context\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { FocusService } from \"../focusService\";\nimport { IRangeService } from \"../interfaces/IRangeService\";\nimport { RowDragEndEvent, RowDragEnterEvent, RowDragEvent, RowDragLeaveEvent, RowDragMoveEvent } from \"../events\";\nimport { Events } from \"../eventKeys\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { RowHighlightPosition, RowNode } from \"../entities/rowNode\";\nimport { SelectionService } from \"../selectionService\";\nimport { MouseEventService } from \"./mouseEventService\";\nimport { last } from '../utils/array';\nimport { SortController } from \"../sortController\";\nimport { FilterManager } from \"../filter/filterManager\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { missingOrEmpty } from \"../utils/generic\";\nimport { doOnce } from \"../utils/function\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { AutoScrollService } from \"../autoScrollService\";\n\nimport { GridApi } from \"../gridApi\";\nimport { ColumnApi } from \"../columns/columnApi\";\n\nexport interface RowDropZoneEvents {\n    /** Callback function that will be executed when the rowDrag enters the target. */\n    onDragEnter?: (params: RowDragEnterEvent) => void;\n    /** Callback function that will be executed when the rowDrag leaves the target */\n    onDragLeave?: (params: RowDragLeaveEvent) => void;\n    /**\n     * Callback function that will be executed when the rowDrag is dragged inside the target.\n     * Note: this gets called multiple times.\n     */\n    onDragging?: (params: RowDragMoveEvent) => void;\n    /** Callback function that will be executed when the rowDrag drops rows within the target. */\n    onDragStop?: (params: RowDragEndEvent) => void;\n}\n\nexport interface RowDropZoneParams extends RowDropZoneEvents {\n    /** A callback method that returns the DropZone HTMLElement. */\n    getContainer: () => HTMLElement;\n}\n\nexport class RowDragFeature extends BeanStub implements DropTarget {\n\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    // this feature is only created when row model is ClientSide, so we can type it as ClientSide\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('selectionService') private selectionService: SelectionService;\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private clientSideRowModel: IClientSideRowModel;\n    private eContainer: HTMLElement;\n    private isMultiRowDrag: boolean = false;\n    private isGridSorted: boolean = false;\n    private isGridFiltered: boolean = false;\n    private isRowGroupActive: boolean = false;\n    private lastDraggingEvent: DraggingEvent;\n    private autoScrollService: AutoScrollService;\n\n    constructor(eContainer: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n\n        const refreshStatus = () => {\n            this.onSortChanged();\n            this.onFilterChanged();\n            this.onRowGroupChanged();\n        };\n\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, () => {\n            refreshStatus();\n        });\n\n        refreshStatus();\n\n        this.ctrlsService.whenReady(() => {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            this.autoScrollService = new AutoScrollService({\n                scrollContainer: gridBodyCon.getBodyViewportElement(),\n                scrollAxis: 'y',\n                getVerticalPosition: () => gridBodyCon.getScrollFeature().getVScrollPosition().top,\n                setVerticalPosition: (position) => gridBodyCon.getScrollFeature().setVerticalScrollPosition(position),\n                onScrollCallback: () => { this.onDragging(this.lastDraggingEvent); }\n            });\n        });\n    }\n\n    private onSortChanged(): void {\n        this.isGridSorted = this.sortController.isSortActive();\n    }\n\n    private onFilterChanged(): void {\n        this.isGridFiltered = this.filterManager.isAnyFilterPresent();\n    }\n\n    private onRowGroupChanged(): void {\n        const rowGroups = this.columnModel.getRowGroupColumns();\n        this.isRowGroupActive = !missingOrEmpty(rowGroups);\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.RowDrag;\n    }\n\n    public getIconName(): string {\n        const managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return DragAndDropService.ICON_NOT_ALLOWED;\n        }\n\n        return DragAndDropService.ICON_MOVE;\n    }\n\n    public shouldPreventRowMove(): boolean {\n        return this.isGridSorted || this.isGridFiltered || this.isRowGroupActive;\n    }\n\n    private getRowNodes(draggingEvent: DraggingEvent): RowNode[] {\n        if (!this.isFromThisGrid(draggingEvent)) {\n            return draggingEvent.dragItem.rowNodes || [];\n        }\n\n        const isRowDragMultiRow = this.gridOptionsWrapper.isRowDragMultiRow();\n        const selectedNodes = [...this.selectionService.getSelectedNodes()].sort(\n            (a, b) => this.getRowIndexNumber(a) - this.getRowIndexNumber(b)\n        );\n\n        const currentNode = draggingEvent.dragItem.rowNode!;\n\n        if (isRowDragMultiRow && selectedNodes.indexOf(currentNode) !== -1) {\n            this.isMultiRowDrag = true;\n            return selectedNodes;\n        }\n\n        this.isMultiRowDrag = false;\n\n        return [currentNode];\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // builds a lits of all rows being dragged before firing events\n        draggingEvent.dragItem.rowNodes = this.getRowNodes(draggingEvent);\n\n        // when entering, we fire the enter event, then in onEnterOrDragging,\n        // we also fire the move event. so we get both events when entering.\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);\n\n        this.getRowNodes(draggingEvent).forEach(rowNode => {\n            rowNode.setDragging(true);\n        });\n\n        this.onEnterOrDragging(draggingEvent);\n    }\n\n    public onDragging(draggingEvent: DraggingEvent): void {\n        this.onEnterOrDragging(draggingEvent);\n    }\n\n    private isFromThisGrid(draggingEvent: DraggingEvent) {\n        const { dragSourceDomDataKey } = draggingEvent.dragSource;\n\n        return dragSourceDomDataKey === this.gridOptionsWrapper.getDomDataKey();\n    }\n\n    private isDropZoneWithinThisGrid(draggingEvent: DraggingEvent): boolean {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const gridGui = gridBodyCon.getGui();\n        const { dropZoneTarget } = draggingEvent;\n\n        return !gridGui.contains(dropZoneTarget);\n    }\n\n    private onEnterOrDragging(draggingEvent: DraggingEvent): void {\n        // this event is fired for enter and move\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);\n\n        this.lastDraggingEvent = draggingEvent;\n\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n\n        if (managedDrag) {\n            this.doManagedDrag(draggingEvent, pixel);\n        }\n\n        this.autoScrollService.check(draggingEvent.event);\n    }\n\n    private doManagedDrag(draggingEvent: DraggingEvent, pixel: number): void {\n        const isFromThisGrid = this.isFromThisGrid(draggingEvent);\n        const managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n        const rowNodes = draggingEvent.dragItem.rowNodes!;\n\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return;\n        }\n\n        if (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !isFromThisGrid) {\n            if (!this.isDropZoneWithinThisGrid(draggingEvent)) {\n                this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);\n            }\n        } else {\n            this.moveRows(rowNodes, pixel);\n        }\n    }\n\n    private getRowIndexNumber(rowNode: RowNode): number {\n        return parseInt(last(rowNode.getRowIndexString().split('-')), 10);\n    }\n\n    private moveRowAndClearHighlight(draggingEvent: DraggingEvent): void {\n        const lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();\n        const isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === RowHighlightPosition.Below;\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const rowNodes = draggingEvent.dragItem.rowNodes;\n\n        let increment = isBelow ? 1 : 0;\n\n        if (this.isFromThisGrid(draggingEvent)) {\n            rowNodes!.forEach(rowNode => {\n                if (rowNode.rowTop! < pixel) {\n                    increment -= 1;\n                }\n            });\n            this.moveRows(rowNodes!, pixel, increment);\n        } else {\n            const getRowIdFunc = this.gridOptionsWrapper.getRowIdFunc();\n\n            let addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;\n\n            if (this.clientSideRowModel.getHighlightPosition(pixel) === RowHighlightPosition.Above) {\n                addIndex--;\n            }\n\n            this.clientSideRowModel.updateRowData({\n                add: rowNodes!\n                    .map(node => node.data)\n                    .filter(data => !this.clientSideRowModel.getRowNode(\n                        getRowIdFunc ? getRowIdFunc({ data, level: 0 }) : data.id)\n                    ),\n                addIndex\n            });\n        }\n\n        this.clearRowHighlight();\n    }\n\n    private clearRowHighlight(): void {\n        this.clientSideRowModel.highlightRowAtPixel(null);\n    }\n\n    private moveRows(rowNodes: RowNode[], pixel: number, increment: number = 0): void {\n        const rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);\n\n        if (rowWasMoved) {\n            this.focusService.clearFocusedCell();\n            if (this.rangeService) {\n                this.rangeService.removeAllCellRanges();\n            }\n        }\n    }\n\n    public addRowDropZone(params: RowDropZoneParams): void {\n        if (!params.getContainer()) {\n            doOnce(() => console.warn('AG Grid: addRowDropZone - A container target needs to be provided'), 'add-drop-zone-empty-target');\n            return;\n        }\n\n        if (this.dragAndDropService.findExternalZone(params)) {\n            console.warn('AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.');\n            return;\n        }\n\n        let processedParams: RowDropZoneParams = {\n            getContainer: params.getContainer\n        };\n\n        if ((params as any).fromGrid) {\n            (params as any).fromGrid = undefined;\n            processedParams = params;\n        } else {\n            if (params.onDragEnter) {\n                processedParams.onDragEnter = (e) => {\n                    params.onDragEnter!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e as any));\n                };\n            }\n            if (params.onDragLeave) {\n                processedParams.onDragLeave = (e) => {\n                    params.onDragLeave!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e as any));\n                };\n            }\n            if (params.onDragging) {\n                processedParams.onDragging = (e) => {\n                    params.onDragging!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e as any));\n                };\n            }\n            if (params.onDragStop) {\n                processedParams.onDragStop = (e) => {\n                    params.onDragStop!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e as any));\n                };\n            }\n        }\n\n        this.dragAndDropService.addDropTarget({\n            isInterestedIn: (type: DragSourceType) => type === DragSourceType.RowDrag,\n            getIconName: () => DragAndDropService.ICON_MOVE,\n            external: true,\n            ...processedParams as any\n        });\n    }\n\n    public getRowDropZone(events?: RowDropZoneEvents): RowDropZoneParams {\n        const getContainer = this.getContainer.bind(this);\n        const onDragEnter = this.onDragEnter.bind(this);\n        const onDragLeave = this.onDragLeave.bind(this);\n        const onDragging = this.onDragging.bind(this);\n        const onDragStop = this.onDragStop.bind(this);\n\n        if (!events) {\n            return { getContainer, onDragEnter, onDragLeave, onDragging, onDragStop, /* @private */ fromGrid: true } as RowDropZoneParams;\n        }\n\n        return {\n            getContainer,\n            onDragEnter: events.onDragEnter\n                ? ((e) => {\n                    onDragEnter(e);\n                    events.onDragEnter!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e as any));\n                })\n                : onDragEnter,\n            onDragLeave: events.onDragLeave\n                ? ((e) => {\n                    onDragLeave(e);\n                    events.onDragLeave!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e as any));\n                })\n                : onDragLeave,\n            onDragging: events.onDragging\n                ? ((e) => {\n                    onDragging(e);\n                    events.onDragging!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e as any));\n                })\n                : onDragging,\n            onDragStop: events.onDragStop\n                ? ((e) => {\n                    onDragStop(e);\n                    events.onDragStop!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e as any));\n                })\n                : onDragStop,\n            fromGrid: true /* @private */\n        } as RowDropZoneParams;\n    }\n\n    private draggingToRowDragEvent(type: string, draggingEvent: DraggingEvent): RowDragEvent {\n        const yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const mouseIsPastLastRow = yNormalised > this.paginationProxy.getCurrentPageHeight();\n\n        let overIndex = -1;\n        let overNode: RowNode | undefined;\n\n        if (!mouseIsPastLastRow) {\n            overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);\n            overNode = this.rowModel.getRow(overIndex);\n        }\n\n        let vDirectionString: string | null;\n\n        switch (draggingEvent.vDirection) {\n            case VerticalDirection.Down:\n                vDirectionString = 'down';\n                break;\n            case VerticalDirection.Up:\n                vDirectionString = 'up';\n                break;\n            default:\n                vDirectionString = null;\n                break;\n        }\n\n        const event: RowDragEvent = {\n            type: type,\n            api: this.gridOptionsWrapper.getApi()!,\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            event: draggingEvent.event,\n            node: draggingEvent.dragItem.rowNode!,\n            nodes: draggingEvent.dragItem.rowNodes!,\n            overIndex: overIndex,\n            overNode: overNode,\n            y: yNormalised,\n            vDirection: vDirectionString!\n        };\n\n        return event;\n    }\n\n    private dispatchGridEvent(type: string, draggingEvent: DraggingEvent): void {\n        const event = this.draggingToRowDragEvent(type, draggingEvent);\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);\n        this.stopDragging(draggingEvent);\n\n        if (this.gridOptionsWrapper.isRowDragManaged()) {\n            this.clearRowHighlight();\n        }\n\n        if (this.isFromThisGrid(draggingEvent)) {\n            this.isMultiRowDrag = false;\n        }\n    }\n\n    public onDragStop(draggingEvent: DraggingEvent): void {\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);\n        this.stopDragging(draggingEvent);\n\n        if (\n            this.gridOptionsWrapper.isRowDragManaged() &&\n            (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !this.isFromThisGrid(draggingEvent)) &&\n            !this.isDropZoneWithinThisGrid(draggingEvent)\n        ) {\n            this.moveRowAndClearHighlight(draggingEvent);\n        }\n    }\n\n    private stopDragging(draggingEvent: DraggingEvent): void {\n        this.autoScrollService.ensureCleared();\n\n        this.getRowNodes(draggingEvent).forEach(rowNode => {\n            rowNode.setDragging(false);\n        });\n    }\n}\n"]}