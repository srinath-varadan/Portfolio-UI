{"version":3,"sources":["../../../src/ts/headerRendering/cells/columnGroup/groupWidthFeature.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,wDAAqD;AACrD,sDAAyD;AACzD,qDAAkD;AAClD,+DAA4D;AAG5D,MAAa,iBAAkB,SAAQ,mBAAQ;IAQ3C,YAAY,IAA0B,EAAE,WAAwB;QAC5D,KAAK,EAAE,CAAC;QAJZ,+FAA+F;QACvF,8BAAyB,GAAmB,EAAE,CAAC;QAInD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAGO,aAAa;QACjB,0EAA0E;QAC1E,IAAI,CAAC,6BAA6B,EAAE,CAAC;QAErC,yGAAyG;QACzG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,yBAAW,CAAC,gCAAgC,EAAE,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAEpI,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,wGAAwG;QACxG,sGAAsG;QACtG,sDAAsD;QACtD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1E,CAAC;IAEO,6BAA6B;QACjC,kCAAkC;QAClC,IAAI,CAAC,gCAAgC,EAAE,CAAC;QAExC,mDAAmD;QACnD,MAAM,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5D,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC/C,MAAM,CAAC,gBAAgB,CAAC,eAAM,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;YAC1E,MAAM,CAAC,gBAAgB,CAAC,eAAM,CAAC,qBAAqB,EAAE,oBAAoB,CAAC,CAAC;YAC5E,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,EAAE;gBACrC,MAAM,CAAC,mBAAmB,CAAC,eAAM,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;gBAC7E,MAAM,CAAC,mBAAmB,CAAC,eAAM,CAAC,qBAAqB,EAAE,oBAAoB,CAAC,CAAC;YACnF,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,gCAAgC;QACpC,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,yBAAyB,GAAG,EAAE,CAAC;IACxC,CAAC;IAEO,0BAA0B;QAC9B,IAAI,CAAC,6BAA6B,EAAE,CAAC;QACrC,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAEO,cAAc;QAClB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,GAAG,IAAI,CAAC,CAAC;IACjE,CAAC;CAEJ;AA7CG;IADC,uBAAa;sDAcb;AA5BL,8CA4DC","file":"groupWidthFeature.js","sourcesContent":["import { BeanStub } from \"../../../context/beanStub\";\nimport { PostConstruct } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { IHeaderGroupCellComp } from \"./headerGroupCellCtrl\";\n\nexport class GroupWidthFeature extends BeanStub {\n\n    private columnGroup: ColumnGroup;\n    private comp: IHeaderGroupCellComp;\n\n    // the children can change, we keep destroy functions related to listening to the children here\n    private removeChildListenersFuncs: (() => void)[] = [];\n\n    constructor(comp: IHeaderGroupCellComp, columnGroup: ColumnGroup) {\n        super();\n        this.columnGroup = columnGroup;\n        this.comp = comp;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        // we need to listen to changes in child columns, as they impact our width\n        this.addListenersToChildrenColumns();\n\n        // the children belonging to this group can change, so we need to add and remove listeners as they change\n        this.addManagedListener(this.columnGroup, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));\n\n        this.onWidthChanged();\n\n        // the child listeners are not tied to this components life-cycle, as children can get added and removed\n        // to the group - hence they are on a different life-cycle. so we must make sure the existing children\n        // listeners are removed when we finally get destroyed\n        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));\n    }\n\n    private addListenersToChildrenColumns(): void {\n        // first destroy any old listeners\n        this.removeListenersOnChildrenColumns();\n\n        // now add new listeners to the new set of children\n        const widthChangedListener = this.onWidthChanged.bind(this);\n        this.columnGroup.getLeafColumns().forEach(column => {\n            column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n            column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n            this.removeChildListenersFuncs.push(() => {\n                column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n                column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n            });\n        });\n    }\n\n    private removeListenersOnChildrenColumns(): void {\n        this.removeChildListenersFuncs.forEach(func => func());\n        this.removeChildListenersFuncs = [];\n    }\n\n    private onDisplayedChildrenChanged(): void {\n        this.addListenersToChildrenColumns();\n        this.onWidthChanged();\n    }\n\n    private onWidthChanged(): void {\n        this.comp.setWidth(this.columnGroup.getActualWidth() + 'px');\n    }\n\n}\n"]}