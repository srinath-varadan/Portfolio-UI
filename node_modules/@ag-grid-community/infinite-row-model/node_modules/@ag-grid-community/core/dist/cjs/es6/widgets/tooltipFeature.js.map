{"version":3,"sources":["../../../src/ts/widgets/tooltipFeature.ts"],"names":[],"mappings":"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","file":"tooltipFeature.js","sourcesContent":["import { BeanStub } from \"../context/beanStub\";\nimport { Column } from \"../entities/column\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Beans } from \"../rendering/beans\";\nimport { CustomTooltipFeature, TooltipParentComp } from \"./customTooltipFeature\";\nimport { ITooltipParams } from \"../rendering/tooltipComponent\";\nimport { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\nexport interface ITooltipFeatureCtrl {\n    getTooltipValue(): any;\n    getGui(): HTMLElement;\n    getLocation(): string;\n\n    getColumn?(): Column | ColumnGroup;\n    getColDef?(): ColDef | ColGroupDef;\n    getRowIndex?(): number;\n    getRowNode?(): RowNode;\n\n    // this makes no sense, why is the cell formatted value passed to the tooltip???\n    getValueFormatted?(): string;\n}\n\nexport interface ITooltipFeatureComp {\n    setTitle(title: string | undefined): void;\n}\n\nexport class TooltipFeature extends BeanStub {\n\n    private readonly ctrl: ITooltipFeatureCtrl;\n    private readonly beans: Beans;\n\n    private comp: ITooltipFeatureComp;\n\n    private tooltip: any;\n\n    private genericTooltipFeature: CustomTooltipFeature;\n    private browserTooltips: boolean;\n\n    constructor(ctrl: ITooltipFeatureCtrl, beans: Beans) {\n        super();\n\n        this.ctrl = ctrl;\n        this.beans = beans;\n    }\n\n    public setComp(comp: ITooltipFeatureComp): void {\n        this.comp = comp;\n        this.setupTooltip();\n    }\n\n    private setupTooltip(): void {\n        this.browserTooltips = this.beans.gridOptionsWrapper.isEnableBrowserTooltips();\n        this.updateTooltipText();\n\n        if (this.browserTooltips) {\n            this.comp.setTitle(this.tooltip != null ? this.tooltip : undefined);\n        } else {\n            this.createTooltipFeatureIfNeeded();\n        }\n    }\n\n    private updateTooltipText(): void {\n        this.tooltip = this.ctrl.getTooltipValue();\n    }\n\n    private createTooltipFeatureIfNeeded(): void {\n        if (this.genericTooltipFeature != null) { return; }\n\n        const parent: TooltipParentComp = {\n            getTooltipParams: () => this.getTooltipParams(),\n            getGui: () => this.ctrl.getGui()\n        };\n\n        this.genericTooltipFeature = this.createManagedBean(new CustomTooltipFeature(parent), this.beans.context);\n    }\n\n    public refreshToolTip() {\n        this.updateTooltipText();\n\n        if (this.browserTooltips) {\n            this.comp.setTitle(this.tooltip != null ? this.tooltip : undefined);\n        }\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const ctrl = this.ctrl;\n        const column = ctrl.getColumn ? ctrl.getColumn() : undefined;\n        const colDef = ctrl.getColDef ? ctrl.getColDef() : undefined;\n        const rowNode = ctrl.getRowNode ? ctrl.getRowNode() : undefined;\n\n        return {\n            location: ctrl.getLocation(), //'cell',\n            colDef: colDef,\n            column: column,\n            rowIndex: ctrl.getRowIndex ? ctrl.getRowIndex() : undefined,\n            node: rowNode,\n            data: rowNode ? rowNode.data : undefined,\n            value: this.getTooltipText(),\n            valueFormatted: ctrl.getValueFormatted ? ctrl.getValueFormatted() : undefined,\n        };\n\n    }\n\n    private getTooltipText() {\n        return this.tooltip;\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public destroy() {\n        super.destroy();\n    }\n}"]}