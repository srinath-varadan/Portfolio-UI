{"version":3,"sources":["../../../src/ts/rendering/dateComponent.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"dateComponent.js","sourcesContent":["import { IComponent } from \"../interfaces/iComponent\";\nimport { IDateFilterParams } from \"../filter/provided/date/dateFilter\";\nimport { IAfterGuiAttachedParams } from \"../interfaces/iAfterGuiAttachedParams\";\nimport { AgGridCommon } from \"../interfaces/iCommon\";\n\nexport interface IDate {\n    /** Returns the current date represented by this component */\n    getDate(): Date | null;\n\n    /** Sets the date represented by this component */\n    setDate(date: Date | null): void;\n\n    /** Optional: Sets the disabled state of this component */\n    setDisabled?(disabled: boolean): void;\n\n    /** Optional: Sets the current input placeholder */\n    setInputPlaceholder?(placeholder: string): void;\n\n    /** Optional: Sets the current input aria label */\n    setInputAriaLabel?(placeholder: string): void;\n\n    /**\n     * Optional: A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */\n    afterGuiAttached?(params?: IAfterGuiAttachedParams): void;\n}\n\nexport interface IDateParams extends AgGridCommon {\n    /** Method for component to tell AG Grid that the date has changed. */\n    onDateChanged: () => void;\n    filterParams: IDateFilterParams;\n}\n\nexport interface IDateComp extends IComponent<IDateParams>, IDate { }"]}