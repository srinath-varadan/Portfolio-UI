{"version":3,"sources":["../../../src/ts/rendering/cellEditors/selectCellEditor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,mDAAkD;AAGlD,iEAA8D;AAC9D,6EAAiE;AAEjE,iDAA8C;AAC9C,qDAAkD;AAMlD,MAAa,gBAAiB,SAAQ,+BAAc;IAShD;QACI,KAAK,CAAC,sGAAsG,CAAC,CAAC;QAH1G,mBAAc,GAAY,KAAK,CAAC;IAIxC,CAAC;IAEM,IAAI,CAAC,MAA+B;QACvC,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,eAAe,CAAC;QAEjD,IAAI,iBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YACxB,OAAO,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;YAC/D,OAAO;SACV;QAED,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,iBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;QAE1F,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;YACjC,MAAM,MAAM,GAAe,EAAE,KAAK,EAAE,CAAC;YACrC,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAChG,MAAM,mBAAmB,GAAG,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,SAAS,CAAC;YACpF,MAAM,CAAC,IAAI,GAAG,mBAAmB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC;YAE3D,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC/B,QAAQ,GAAG,QAAQ,IAAI,MAAM,CAAC,KAAK,KAAK,KAAK,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,QAAQ,EAAE;YACV,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAC7C;aAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;YAC7B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;SACjD;QAED,mFAAmF;QACnF,oBAAoB;QACpB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,EAAE;YAC1C,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;SAC1D;IACL,CAAC;IAEM,gBAAgB;QACnB,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC,KAAK,EAAE,CAAC;SAC9C;QAED,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;SAC7B;IACL,CAAC;IAEM,OAAO;QACV,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC,KAAK,EAAE,CAAC;IAC/C,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACnC,CAAC;IAEM,OAAO;QACV,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAhEuC;IAAnC,mBAAS,CAAC,uBAAuB,CAAC;+DAAsD;AACjE;IAAvB,kCAAW,CAAC,SAAS,CAAC;iDAA2B;AALtD,4CAoEC","file":"selectCellEditor.js","sourcesContent":["import { AgSelect } from \"../../widgets/agSelect\";\nimport { Autowired } from \"../../context/context\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { ValueFormatterService } from \"../valueFormatterService\";\nimport { PopupComponent } from \"../../widgets/popupComponent\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { ListOption } from \"../../widgets/agList\";\nimport { missing } from \"../../utils/generic\";\nimport { KeyCode } from '../../constants/keyCode';\n\nexport interface ISelectCellEditorParams extends ICellEditorParams {\n    values: any[];\n}\n\nexport class SelectCellEditor extends PopupComponent implements ICellEditorComp {\n\n    private focusAfterAttached: boolean;\n\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @RefSelector('eSelect') private eSelect: AgSelect;\n\n    private startedByEnter: boolean = false;\n\n    constructor() {\n        super('<div class=\"ag-cell-edit-wrapper\"><ag-select class=\"ag-cell-editor\" ref=\"eSelect\"></ag-select></div>');\n    }\n\n    public init(params: ISelectCellEditorParams): void {\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        if (missing(params.values)) {\n            console.warn('AG Grid: no values found for select cellEditor');\n            return;\n        }\n\n        this.startedByEnter = params.eventKey != null ? params.eventKey === KeyCode.ENTER : false;\n\n        let hasValue = false;\n        params.values.forEach((value: any) => {\n            const option: ListOption = { value };\n            const valueFormatted = this.valueFormatterService.formatValue(params.column, null, null, value);\n            const valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;\n            option.text = valueFormattedExits ? valueFormatted : value;\n\n            this.eSelect.addOption(option);\n            hasValue = hasValue || params.value === value;\n        });\n\n        if (hasValue) {\n            this.eSelect.setValue(params.value, true);\n        } else if (params.values.length) {\n            this.eSelect.setValue(params.values[0], true);\n        }\n\n        // we don't want to add this if full row editing, otherwise selecting will stop the\n        // full row editing.\n        if (!this.gridOptionsWrapper.isFullRowEdit()) {\n            this.eSelect.onValueChange(() => params.stopEditing());\n        }\n    }\n\n    public afterGuiAttached() {\n        if (this.focusAfterAttached) {\n            this.eSelect.getFocusableElement().focus();\n        }\n\n        if (this.startedByEnter) {\n            this.eSelect.showPicker();\n        }\n    }\n\n    public focusIn(): void {\n        this.eSelect.getFocusableElement().focus();\n    }\n\n    public getValue(): any {\n        return this.eSelect.getValue();\n    }\n\n    public isPopup() {\n        return false;\n    }\n}"]}