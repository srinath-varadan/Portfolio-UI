{"version":3,"sources":["../../../src/ts/filter/provided/text/textFilter.ts"],"names":[],"mappings":"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","file":"textFilter.js","sourcesContent":["import { RefSelector } from '../../../widgets/componentAnnotations';\nimport {\n    SimpleFilter,\n    ConditionPosition,\n    ISimpleFilterParams,\n    ISimpleFilterModel,\n    ISimpleFilterModelType,\n    Tuple\n} from '../simpleFilter';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { makeNull } from '../../../utils/generic';\nimport { _ } from '../../../utils';\nimport { BaseColDefParams } from '../../../entities/colDef';\nimport { IDoesFilterPassParams } from '../../../interfaces/iFilter';\n\nexport interface TextFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'text'` */\n    filterType?: 'text';\n    /**\n     * The text value associated with the filter.\n     * It's optional as custom filters may not have a text value.\n     * */\n    filter?: string | null;\n    /**\n     * The 2nd text value associated with the filter, if supported.\n     * */\n     filterTo?: string | null;\n    }\n\nexport interface TextMatcherParams extends BaseColDefParams {\n    filterOption: string | null | undefined;\n    value: any;\n    filterText: string | null;\n    textFormatter?: TextFormatter;\n}\n\nexport interface TextMatcher {\n    (params: TextMatcherParams): boolean;\n}\n\nexport interface TextFormatter {\n    (from?: string | null): string | null;\n}\n\nexport interface ITextFilterParams extends ISimpleFilterParams {\n    /**\n     * Used to override how to filter based on the user input.\n     */\n    textMatcher?: TextMatcher;\n    /**\n     * By default, text filtering is case-insensitive. Set this to `true` to make text filtering case-sensitive.\n     * Default: `false`\n     */\n    caseSensitive?: boolean;\n    /**\n     * Formats the text before applying the filter compare logic.\n     * Useful if you want to substitute accented characters, for example.\n     */\n    textFormatter?: (from: string) => string;\n\n    /**\n     * If `true`, the input that the user enters will be trimmed when the filter is applied, so any leading or trailing whitespace will be removed.\n     * If only whitespace is entered, it will be left as-is.\n     * If you enable `trimInput`, it is best to also increase the `debounceMs` to give users more time to enter text.\n     * Default: `false`\n     */\n    trimInput?: boolean;\n}\n\nexport class TextFilter extends SimpleFilter<TextFilterModel, string> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        SimpleFilter.CONTAINS,\n        SimpleFilter.NOT_CONTAINS,\n        SimpleFilter.EQUALS,\n        SimpleFilter.NOT_EQUAL,\n        SimpleFilter.STARTS_WITH,\n        SimpleFilter.ENDS_WITH,\n        SimpleFilter.BLANK,\n        SimpleFilter.NOT_BLANK,\n    ];\n\n    static DEFAULT_FORMATTER: TextFormatter = (from: string) => from;\n\n    static DEFAULT_LOWERCASE_FORMATTER: TextFormatter = (from: string) => from == null ? null : from.toString().toLowerCase();\n\n    static DEFAULT_MATCHER: TextMatcher = ({filterOption, value, filterText}) => {\n        if (filterText == null) { return false; }\n\n        switch (filterOption) {\n            case TextFilter.CONTAINS:\n                return value.indexOf(filterText) >= 0;\n            case TextFilter.NOT_CONTAINS:\n                return value.indexOf(filterText) < 0;\n            case TextFilter.EQUALS:\n                return value === filterText;\n            case TextFilter.NOT_EQUAL:\n                return value != filterText;\n            case TextFilter.STARTS_WITH:\n                return value.indexOf(filterText) === 0;\n            case TextFilter.ENDS_WITH:\n                const index = value.lastIndexOf(filterText);\n                return index >= 0 && index === (value.length - filterText.length);\n            default:\n                return false;\n        }\n    }\n\n    @RefSelector('eValue-index0-1') private readonly eValueFrom1: AgInputTextField;\n    @RefSelector('eValue-index1-1') private readonly eValueTo1: AgInputTextField;\n\n    @RefSelector('eValue-index0-2') private readonly eValueFrom2: AgInputTextField;\n    @RefSelector('eValue-index1-2') private readonly eValueTo2: AgInputTextField;\n\n    private matcher: TextMatcher;\n    private formatter: TextFormatter;\n\n    private textFilterParams: ITextFilterParams;\n\n    constructor() {\n        super('textFilter');\n    }\n\n    public static trimInput(value?: string | null): string | null | undefined {\n        const trimmedInput = value && value.trim();\n\n        // trim the input, unless it is all whitespace (this is consistent with Excel behaviour)\n        return trimmedInput === '' ? value : trimmedInput;\n    }\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    protected setParams(params: ITextFilterParams): void {\n        super.setParams(params);\n\n        this.textFilterParams = params;\n        this.matcher = this.getTextMatcher();\n        this.formatter = this.textFilterParams.textFormatter ||\n            (this.textFilterParams.caseSensitive ? TextFilter.DEFAULT_FORMATTER : TextFilter.DEFAULT_LOWERCASE_FORMATTER);\n    }\n\n    private getTextMatcher(): TextMatcher {\n        const legacyComparator = (this.textFilterParams as any).textCustomComparator;\n        if (legacyComparator) {\n            _.doOnce(() => console.warn('AG Grid - textCustomComparator is deprecated, use textMatcher instead.'), 'textCustomComparator.deprecated');\n            return ({ filterOption, value, filterText }) => legacyComparator(filterOption, value, filterText);\n        }\n        return this.textFilterParams.textMatcher || TextFilter.DEFAULT_MATCHER\n    }\n\n    protected createCondition(position: ConditionPosition): TextFilterModel {\n        const type = this.getConditionTypes()[position];\n\n        const model: TextFilterModel = {\n            filterType: this.getFilterType(),\n            type,\n        };\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n\n        return model;\n    }\n\n    protected getFilterType(): 'text' {\n        return 'text';\n    }\n\n    protected areSimpleModelsEqual(aSimple: TextFilterModel, bSimple: TextFilterModel): boolean {\n        return aSimple.filter === bSimple.filter &&\n            aSimple.filterTo === bSimple.filterTo &&\n            aSimple.type === bSimple.type;\n    }\n\n    protected getInputs(): Tuple<AgInputTextField>[] {\n        return [\n            [this.eValueFrom1, this.eValueTo1],\n            [this.eValueFrom2, this.eValueTo2],\n        ];\n    }\n\n    protected getValues(position: ConditionPosition): Tuple<string> {\n        const result: Tuple<string> = [];\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (position === elPosition && index < numberOfInputs) {\n                const value = makeNull(element.getValue());\n                const cleanValue = (this.textFilterParams.trimInput ? TextFilter.trimInput(value) : value) || null;\n                result.push(cleanValue);\n                element.setValue(cleanValue, true); // ensure clean value is visible\n            }\n        });\n\n        return result;\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueTemplate(position: ConditionPosition): string {\n        const pos = position === ConditionPosition.One ? '1' : '2';\n\n        return /* html */`\n            <div class=\"ag-filter-body\" ref=\"eCondition${pos}Body\" role=\"presentation\">\n                <ag-input-text-field class=\".ag-filter-from ag-filter-filter\" ref=\"eValue-index0-${pos}\"></ag-input-text-field>\n                <ag-input-text-field class=\"ag-filter-to ag-filter-filter\" ref=\"eValue-index1-${pos}\"></ag-input-text-field>\n            </div>`;\n    }\n\n    protected mapValuesFromModel(filterModel: TextFilterModel | null): Tuple<string> {\n        const { filter, filterTo, type } = filterModel || {};\n        return [\n            filter || null,\n            filterTo || null,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected evaluateNullValue(filterType: ISimpleFilterModelType | null) {\n        const filterTypesAllowNulls = [\n            SimpleFilter.NOT_EQUAL, SimpleFilter.NOT_CONTAINS, SimpleFilter.BLANK,\n        ];\n\n        return filterType ? filterTypesAllowNulls.indexOf(filterType) >= 0 : false;\n    }\n\n    protected evaluateNonNullValue(values: Tuple<string>, cellValue: string, filterModel: TextFilterModel, params: IDoesFilterPassParams): boolean {\n        const formattedValues = values.map(v => this.formatter(v)) || [];\n        const cellValueFormatted = this.formatter(cellValue);\n        const {api, colDef, column, columnApi, context, textFormatter} = this.textFilterParams;\n\n        if (filterModel.type === SimpleFilter.BLANK) {\n            return this.isBlank(cellValue);\n        } else if (filterModel.type === SimpleFilter.NOT_BLANK) {\n            return !this.isBlank(cellValue);\n        }\n\n        const matcherParams = {\n            api,\n            colDef,\n            column,\n            columnApi,\n            context,\n            node: params.node,\n            data: params.data,\n            filterOption: filterModel.type,\n            value: cellValueFormatted,\n            textFormatter,\n        };\n\n        return formattedValues.some(v => this.matcher({ ...matcherParams, filterText: v }));\n    }\n}\n"]}