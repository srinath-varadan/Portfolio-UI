{"version":3,"sources":["../../../src/ts/context/beanStub.ts"],"names":[],"mappings":"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","file":"beanStub.js","sourcesContent":["import { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { EventService } from \"../eventService\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { AgEvent } from \"../events\";\nimport { Autowired, Context, PreDestroy } from \"./context\";\nimport { IFrameworkOverrides } from \"../interfaces/iFrameworkOverrides\";\nimport { Component } from \"../widgets/component\";\nimport { addSafePassiveEventListener } from \"../utils/event\";\n\nexport class BeanStub implements IEventEmitter {\n\n    public static EVENT_DESTROYED = 'destroyed';\n\n    protected localEventService: EventService;\n\n    private destroyFunctions: (() => void)[] = [];\n    private destroyed = false;\n\n    // for vue 3 - prevents Vue from trying to make this (and obviously any sub classes) from being reactive\n    // prevents vue from creating proxies for created objects and prevents identity related issues\n    public __v_skip = true;\n\n    @Autowired('frameworkOverrides') private readonly frameworkOverrides: IFrameworkOverrides;\n    @Autowired('context') protected readonly context: Context;\n    @Autowired('eventService') protected readonly eventService: EventService;\n    @Autowired('gridOptionsWrapper') protected readonly gridOptionsWrapper: GridOptionsWrapper;\n\n    // this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are\n    // not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed\n    // points to a bean or component that was not properly disposed of.\n    // constructor() {\n    //     setTimeout(()=> {\n    //         if (this.isAlive()) {\n    //             let prototype: any = Object.getPrototypeOf(this);\n    //             const constructor: any = prototype.constructor;\n    //             const constructorString = constructor.toString();\n    //             const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n    //             console.log('is alive ' + beanName);\n    //         }\n    //     }, 5000);\n    // }\n\n    // CellComp and GridComp and override this because they get the FrameworkOverrides from the Beans bean\n    protected getFrameworkOverrides(): IFrameworkOverrides {\n        return this.frameworkOverrides;\n    }\n\n    public getContext(): Context {\n        return this.context;\n    }\n\n    @PreDestroy\n    protected destroy(): void {\n\n        // let prototype: any = Object.getPrototypeOf(this);\n        // const constructor: any = prototype.constructor;\n        // const constructorString = constructor.toString();\n        // const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n\n        this.destroyFunctions.forEach(func => func());\n        this.destroyFunctions.length = 0;\n        this.destroyed = true;\n\n        this.dispatchEvent({ type: BeanStub.EVENT_DESTROYED });\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        if (!this.localEventService) {\n            this.localEventService = new EventService();\n        }\n\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        if (this.localEventService) {\n            this.localEventService.removeEventListener(eventType, listener);\n        }\n    }\n\n    public dispatchEventAsync(event: AgEvent): void {\n        window.setTimeout(() => this.dispatchEvent(event), 0);\n    }\n\n    public dispatchEvent<T extends AgEvent>(event: T): void {\n        if (this.localEventService) {\n            this.localEventService.dispatchEvent(event);\n        }\n    }\n\n    public addManagedListener(\n        object: Window | HTMLElement | GridOptionsWrapper | IEventEmitter,\n        event: string,\n        listener: (event?: any) => void\n    ): (() => null) | undefined {\n        if (this.destroyed) {\n            return;\n        }\n\n        if (object instanceof HTMLElement) {\n            addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);\n        } else {\n            object.addEventListener(event, listener);\n        }\n\n        const destroyFunc: () => null = () => {\n            object.removeEventListener(event, listener);\n\n            this.destroyFunctions = this.destroyFunctions.filter(fn => fn !== destroyFunc);\n\n            return null;\n        };\n\n        this.destroyFunctions.push(destroyFunc);\n\n        return destroyFunc;\n    }\n\n    public isAlive = (): boolean => !this.destroyed;\n\n    public addDestroyFunc(func: () => void): void {\n        // if we are already destroyed, we execute the func now\n        if (this.isAlive()) {\n            this.destroyFunctions.push(func);\n        } else {\n            func();\n        }\n    }\n\n    public createManagedBean<T>(bean: T, context?: Context): T {\n        const res = this.createBean(bean, context);\n        this.addDestroyFunc(this.destroyBean.bind(this, bean, context));\n        return res;\n    }\n\n    protected createBean<T>(bean: T, context?: Context | null, afterPreCreateCallback?: (comp: Component) => void): T {\n        return (context || this.getContext()).createBean(bean, afterPreCreateCallback);\n    }\n\n    protected destroyBean<T>(bean: T, context?: Context): T | undefined {\n        return (context || this.getContext()).destroyBean(bean);\n    }\n\n    protected destroyBeans<T>(beans: T[], context?: Context): T[] {\n        if (beans) {\n            beans.forEach(bean => this.destroyBean(bean, context));\n        }\n\n        return [];\n    }\n}\n"]}