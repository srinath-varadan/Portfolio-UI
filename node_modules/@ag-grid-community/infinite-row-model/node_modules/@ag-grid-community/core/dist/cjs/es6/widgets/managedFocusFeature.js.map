{"version":3,"sources":["../../../src/ts/widgets/managedFocusFeature.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,gDAA8D;AAE9D,kDAA+C;AAC/C,0CAAsF;AACtF,kDAA+C;AAU/C,MAAa,mBAAoB,SAAQ,mBAAQ;IAM7C,YACqB,iBAA8B,EACvC,YAAmC,EAAE;QAE7C,KAAK,EAAE,CAAC;QAHS,sBAAiB,GAAjB,iBAAiB,CAAa;QACvC,cAAS,GAAT,SAAS,CAA4B;QAG7C,IAAI,CAAC,SAAS,mBACV,0BAA0B,EAAE,GAAG,EAAE,CAAC,KAAK,EACvC,YAAY,EAAE,CAAC,CAAgB,EAAE,EAAE;gBAC/B,IAAI,CAAC,CAAC,gBAAgB,EAAE;oBAAE,OAAO;iBAAE;gBAEnC,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAEvG,IAAI,CAAC,QAAQ,EAAE;oBAAE,OAAO;iBAAE;gBAE1B,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,CAAC,CAAC,cAAc,EAAE,CAAC;YACvB,CAAC,IACE,SAAS,CACf,CAAC;IACN,CAAC;IAGS,aAAa;QACnB,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;QAE9E,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEjD,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;YAC1B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;SACxF;QAED,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE;YAC3B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;SAC1F;IACL,CAAC;IAEO,mBAAmB,CAAC,IAAiB;QACzC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC,CAAgB,EAAE,EAAE;YAC1D,IAAI,CAAC,CAAC,gBAAgB,IAAI,kCAA0B,CAAC,CAAC,CAAC,EAAE;gBAAE,OAAO;aAAE;YAEpE,IAAI,IAAI,CAAC,SAAS,CAAC,0BAA2B,CAAC,CAAC,CAAC,EAAE;gBAC/C,gCAAwB,CAAC,CAAC,CAAC,CAAC;gBAC5B,OAAO;aACV;YAED,IAAI,CAAC,CAAC,GAAG,KAAK,iBAAO,CAAC,GAAG,EAAE;gBACvB,IAAI,CAAC,SAAS,CAAC,YAAa,CAAC,CAAC,CAAC,CAAC;aACnC;iBAAM,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE;gBACrC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;aACnC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;;AAvDa,uCAAmB,GAAG,kBAAkB,CAAC;AAE5B;IAA1B,mBAAS,CAAC,cAAc,CAAC;yDAA6C;AAwBvE;IADC,uBAAa;wDAab;AAxCL,kDA0DC","file":"managedFocusFeature.js","sourcesContent":["import { PostConstruct, Autowired } from '../context/context';\nimport { FocusService } from '../focusService';\nimport { KeyCode } from '../constants/keyCode';\nimport { isStopPropagationForAgGrid, stopPropagationForAgGrid } from '../utils/event';\nimport { BeanStub } from '../context/beanStub';\n\nexport interface ManagedFocusCallbacks {\n    shouldStopEventPropagation?: (e: KeyboardEvent) => boolean;\n    onTabKeyDown?: (e: KeyboardEvent) => void;\n    handleKeyDown?: (e: KeyboardEvent) => void;\n    onFocusIn?: (e: FocusEvent) => void;\n    onFocusOut?: (e: FocusEvent) => void;\n}\n\nexport class ManagedFocusFeature extends BeanStub {\n\n    public static FOCUS_MANAGED_CLASS = 'ag-focus-managed';\n\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    constructor(\n        private readonly eFocusableElement: HTMLElement,\n        private callbacks: ManagedFocusCallbacks = {}\n    ) {\n        super();\n        this.callbacks = {\n            shouldStopEventPropagation: () => false,\n            onTabKeyDown: (e: KeyboardEvent) => {\n                if (e.defaultPrevented) { return; }\n\n                const nextRoot = this.focusService.findNextFocusableElement(this.eFocusableElement, false, e.shiftKey);\n\n                if (!nextRoot) { return; }\n\n                nextRoot.focus();\n                e.preventDefault();\n            },\n            ...callbacks\n        };\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.eFocusableElement.classList.add(ManagedFocusFeature.FOCUS_MANAGED_CLASS);\n\n        this.addKeyDownListeners(this.eFocusableElement);\n\n        if (this.callbacks.onFocusIn) {\n            this.addManagedListener(this.eFocusableElement, 'focusin', this.callbacks.onFocusIn);\n        }\n\n        if (this.callbacks.onFocusOut) {\n            this.addManagedListener(this.eFocusableElement, 'focusout', this.callbacks.onFocusOut);\n        }\n    }\n\n    private addKeyDownListeners(eGui: HTMLElement): void {\n        this.addManagedListener(eGui, 'keydown', (e: KeyboardEvent) => {\n            if (e.defaultPrevented || isStopPropagationForAgGrid(e)) { return; }\n\n            if (this.callbacks.shouldStopEventPropagation!(e)) {\n                stopPropagationForAgGrid(e);\n                return;\n            }\n\n            if (e.key === KeyCode.TAB) {\n                this.callbacks.onTabKeyDown!(e);\n            } else if (this.callbacks.handleKeyDown) {\n                this.callbacks.handleKeyDown(e);\n            }\n        });\n    }\n}\n"]}