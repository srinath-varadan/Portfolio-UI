{"version":3,"sources":["../../../src/ts/rendering/cellRenderers/animateShowChangeCellRenderer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,mDAAkD;AAElD,uDAAoD;AAEpD,iDAA6C;AAC7C,yCAA+C;AAE/C,MAAM,QAAQ,GAAG,QAAQ,CAAC;AAC1B,MAAM,UAAU,GAAG,QAAQ,CAAC;AAE5B,MAAa,6BAA8B,SAAQ,qBAAS;IAkBxD;QACI,KAAK,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC;QAL1C,iBAAY,GAAG,CAAC,CAAC;IAMzB,CAAC;IAEM,IAAI,CAAC,MAAW;QACnB,wBAAwB;QAExB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,CAAC;QACjE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,CAAC;QAEjE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACzB,CAAC;IAEO,SAAS,CAAC,MAAW,EAAE,KAAa;QAExC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACjC,MAAM,cAAc,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAEpD,MAAM,UAAU,GAAG,gBAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,QAAQ,CAAC;QAEtE,MAAM,OAAO,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;QAE7B,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,QAAQ,GAAG,UAAU,CAAC;SACjD;aAAM;YACH,2CAA2C;YAC3C,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,UAAU,GAAG,UAAU,CAAC;SACnD;QAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC;QAClE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,4BAA4B,EAAE,CAAC,OAAO,CAAC,CAAC;IACzE,CAAC;IAEO,qBAAqB;QACzB,oEAAoE;QACpE,mEAAmE;QACnE,qEAAqE;QACrE,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC;QAC3C,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;YACnB,IAAI,gBAAgB,KAAK,IAAI,CAAC,YAAY,EAAE;gBACxC,IAAI,CAAC,cAAc,EAAE,CAAC;aACzB;QACL,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC;IAEO,cAAc;QAClB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;QAChE,kBAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IAEM,OAAO,CAAC,MAAW;QACtB,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAE3B,IAAI,KAAK,KAAK,IAAI,CAAC,SAAS,EAAE;YAC1B,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,gBAAM,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;YAC/B,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC;SACjD;aAAM,IAAI,gBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC7B,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;SACjC;aAAM;YACH,kBAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC7B;QAED,4FAA4F;QAC5F,sCAAsC;QACtC,IAAI,IAAI,CAAC,aAAa,CAAC,uCAAuC,EAAE,EAAE;YAC9D,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;YACjE,MAAM,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;YACrC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACjC;QAED,sEAAsE;QACtE,sDAAsD;QACtD,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;SAChE;QAED,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE7B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,OAAO,IAAI,CAAC;IAChB,CAAC;;AAxGc,sCAAQ,GACnB,QAAQ;IACR,6CAA6C;IAC7C,6CAA6C;IAC7C,SAAS,CAAC;AAUc;IAA3B,mBAAS,CAAC,eAAe,CAAC;oEAAsC;AAhBrE,sEA2GC","file":"animateShowChangeCellRenderer.js","sourcesContent":["import { Autowired } from \"../../context/context\";\nimport { ICellRenderer } from \"./iCellRenderer\";\nimport { Component } from \"../../widgets/component\";\nimport { FilterManager } from \"../../filter/filterManager\";\nimport { exists } from \"../../utils/generic\";\nimport { clearElement } from \"../../utils/dom\";\n\nconst ARROW_UP = '\\u2191';\nconst ARROW_DOWN = '\\u2193';\n\nexport class AnimateShowChangeCellRenderer extends Component implements ICellRenderer {\n\n    private static TEMPLATE =\n        '<span>' +\n        '<span class=\"ag-value-change-delta\"></span>' +\n        '<span class=\"ag-value-change-value\"></span>' +\n        '</span>';\n\n    // private params: any;\n    private lastValue: number;\n\n    private eValue: HTMLElement;\n    private eDelta: HTMLElement;\n\n    private refreshCount = 0;\n\n    @Autowired('filterManager') private filterManager: FilterManager;\n\n    constructor() {\n        super(AnimateShowChangeCellRenderer.TEMPLATE);\n    }\n\n    public init(params: any): void {\n        // this.params = params;\n\n        this.eValue = this.queryForHtmlElement('.ag-value-change-value');\n        this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');\n\n        this.refresh(params);\n    }\n\n    private showDelta(params: any, delta: number): void {\n\n        const absDelta = Math.abs(delta);\n        const valueFormatted = params.formatValue(absDelta);\n\n        const valueToUse = exists(valueFormatted) ? valueFormatted : absDelta;\n\n        const deltaUp = (delta >= 0);\n\n        if (deltaUp) {\n            this.eDelta.innerHTML = ARROW_UP + valueToUse;\n        } else {\n            // because negative, use ABS to remove sign\n            this.eDelta.innerHTML = ARROW_DOWN + valueToUse;\n        }\n\n        this.eDelta.classList.toggle('ag-value-change-delta-up', deltaUp);\n        this.eDelta.classList.toggle('ag-value-change-delta-down', !deltaUp);\n    }\n\n    private setTimerToRemoveDelta(): void {\n        // the refreshCount makes sure that if the value updates again while\n        // the below timer is waiting, then the below timer will realise it\n        // is not the most recent and will not try to remove the delta value.\n        this.refreshCount++;\n        const refreshCountCopy = this.refreshCount;\n        window.setTimeout(() => {\n            if (refreshCountCopy === this.refreshCount) {\n                this.hideDeltaValue();\n            }\n        }, 2000);\n    }\n\n    private hideDeltaValue(): void {\n        this.eValue.classList.remove('ag-value-change-value-highlight');\n        clearElement(this.eDelta);\n    }\n\n    public refresh(params: any): boolean {\n        const value = params.value;\n\n        if (value === this.lastValue) {\n            return false;\n        }\n\n        if (exists(params.valueFormatted)) {\n            this.eValue.innerHTML = params.valueFormatted;\n        } else if (exists(params.value)) {\n            this.eValue.innerHTML = value;\n        } else {\n            clearElement(this.eValue);\n        }\n\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\n        // with regards processingFilterChange\n        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {\n            return false;\n        }\n\n        if (typeof value === 'number' && typeof this.lastValue === 'number') {\n            const delta = value - this.lastValue;\n            this.showDelta(params, delta);\n        }\n\n        // highlight the current value, but only if it's not new, otherwise it\n        // would get highlighted first time the value is shown\n        if (this.lastValue) {\n            this.eValue.classList.add('ag-value-change-value-highlight');\n        }\n\n        this.setTimerToRemoveDelta();\n\n        this.lastValue = value;\n\n        return true;\n    }\n}\n"]}