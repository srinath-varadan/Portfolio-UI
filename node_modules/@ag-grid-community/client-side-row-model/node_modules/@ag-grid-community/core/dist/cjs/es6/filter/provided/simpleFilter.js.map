{"version":3,"sources":["../../../src/ts/filter/provided/simpleFilter.ts"],"names":[],"mappings":"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","file":"simpleFilter.js","sourcesContent":["import { IDoesFilterPassParams, IFilterOptionDef, ProvidedFilterModel } from '../../interfaces/iFilter';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { OptionsFactory } from './optionsFactory';\nimport { IProvidedFilter, IProvidedFilterParams, ProvidedFilter } from './providedFilter';\nimport { AgPromise, _ } from '../../utils';\nimport { AgSelect } from '../../widgets/agSelect';\nimport { AgRadioButton } from '../../widgets/agRadioButton';\nimport { includes } from '../../utils/array';\nimport { setDisplayed, setDisabled } from '../../utils/dom';\nimport { IFilterLocaleText } from '../filterLocaleText';\nimport { AgInputTextField } from '../../widgets/agInputTextField';\nimport { Component } from '../../widgets/component';\nimport { AgAbstractInputField } from '../../widgets/agAbstractInputField';\nimport { IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\nimport { ListOption } from '../../widgets/agList';\nimport { IFloatingFilterParent } from '../floating/floatingFilter';\n\nexport type JoinOperator = 'AND' | 'OR';\n\n/** Interface contract for the public aspects of the SimpleFilter implementation(s). */\nexport interface ISimpleFilter extends IProvidedFilter, IFloatingFilterParent {\n}\n\nexport interface ISimpleFilterParams extends IProvidedFilterParams {\n    /**\n     * Array of filter options to present to the user.\n     */\n    filterOptions?: (IFilterOptionDef | ISimpleFilterModelType)[];\n    /** The default filter option to be selected. */\n    defaultOption?: string;\n    /**\n     * By default, the two conditions are combined using `AND`.\n     * You can change this default by setting this property.\n     * Options: `AND`, `OR`\n     */\n    defaultJoinOperator?: JoinOperator;\n    /**\n     * If `true`, the filter will only allow one condition.\n     * Default: `false`\n     */\n    suppressAndOrCondition?: boolean;\n    /**\n     * By default, only one condition is shown, and a second is made visible once a first condition has been entered.\n     * Set this to `true` to always show both conditions.\n     * In this case the second condition will be disabled until a first condition has been entered.\n     * Default: `false`\n     */\n    alwaysShowBothConditions?: boolean;\n}\n\nexport type ISimpleFilterModelType =\n    'empty'\n    | 'equals'\n    | 'notEqual'\n    | 'lessThan'\n    | 'lessThanOrEqual'\n    | 'greaterThan'\n    | 'greaterThanOrEqual'\n    | 'inRange'\n    | 'contains'\n    | 'notContains'\n    | 'startsWith'\n    | 'endsWith'\n    | 'blank'\n    | 'notBlank';\nexport interface ISimpleFilterModel extends ProvidedFilterModel {\n    /** One of the filter options, e.g. `'equals'` */\n    type?: ISimpleFilterModelType | null;\n}\n\nexport interface ICombinedSimpleModel<M extends ISimpleFilterModel> extends ProvidedFilterModel {\n    operator: JoinOperator;\n    condition1: M;\n    condition2: M;\n}\n\nexport enum ConditionPosition { One, Two }\n\nexport type Tuple<T> = (T | null)[];\n\n/**\n * Every filter with a dropdown where the user can specify a comparing type against the filter values.\n *\n * @param M type of filter-model managed by the concrete sub-class that extends this type\n * @param V type of value managed by the concrete sub-class that extends this type\n * @param E type of UI element used for collecting user-input\n */\nexport abstract class SimpleFilter<M extends ISimpleFilterModel, V, E = AgInputTextField> extends ProvidedFilter<M | ICombinedSimpleModel<M>, V> implements ISimpleFilter {\n\n    public static EMPTY: ISimpleFilterModelType = 'empty';\n    public static BLANK: ISimpleFilterModelType = 'blank';\n    public static NOT_BLANK: ISimpleFilterModelType = 'notBlank';\n    public static EQUALS: ISimpleFilterModelType = 'equals';\n    public static NOT_EQUAL: ISimpleFilterModelType = 'notEqual';\n    public static LESS_THAN: ISimpleFilterModelType = 'lessThan';\n    public static LESS_THAN_OR_EQUAL: ISimpleFilterModelType = 'lessThanOrEqual';\n    public static GREATER_THAN: ISimpleFilterModelType = 'greaterThan';\n    public static GREATER_THAN_OR_EQUAL: ISimpleFilterModelType = 'greaterThanOrEqual';\n    public static IN_RANGE: ISimpleFilterModelType = 'inRange';\n    public static CONTAINS: ISimpleFilterModelType = 'contains';\n    public static NOT_CONTAINS: ISimpleFilterModelType = 'notContains';\n    public static STARTS_WITH: ISimpleFilterModelType = 'startsWith';\n    public static ENDS_WITH: ISimpleFilterModelType = 'endsWith';\n\n    @RefSelector('eOptions1') protected readonly eType1: AgSelect;\n    @RefSelector('eOptions2') protected readonly eType2: AgSelect;\n    @RefSelector('eJoinOperatorPanel') protected readonly eJoinOperatorPanel: HTMLElement;\n    @RefSelector('eJoinOperatorAnd') protected readonly eJoinOperatorAnd: AgRadioButton;\n    @RefSelector('eJoinOperatorOr') protected readonly eJoinOperatorOr: AgRadioButton;\n    @RefSelector('eCondition1Body') protected readonly eCondition1Body: HTMLElement;\n    @RefSelector('eCondition2Body') protected readonly eCondition2Body: HTMLElement;\n\n    private allowTwoConditions: boolean;\n    private alwaysShowBothConditions: boolean;\n    private defaultJoinOperator: JoinOperator | undefined;\n\n    protected optionsFactory: OptionsFactory;\n    protected abstract getDefaultFilterOptions(): string[];\n\n    // gets called once during initialisation, to build up the html template\n    protected abstract createValueTemplate(position: ConditionPosition): string;\n\n    // filter uses this to know if new model is different from previous model, ie if filter has changed\n    protected abstract areSimpleModelsEqual(a: ISimpleFilterModel, b: ISimpleFilterModel): boolean;\n\n    // getModel() calls this to create the two conditions. if only one condition,\n    // the result is returned by getModel(), otherwise is called twice and both results\n    // returned in a CombinedFilter object.\n    protected abstract createCondition(position: ConditionPosition): M;\n\n    // because the sub-class filter models have different attribute names, we have to map\n    protected abstract mapValuesFromModel(filterModel: ISimpleFilterModel | null): Tuple<V>;\n\n    // allow value-type specific handling of null cell values.\n    protected abstract evaluateNullValue(filterType?: ISimpleFilterModelType | null): boolean;\n\n    // allow value-type specific handling of non-null cell values.\n    protected abstract evaluateNonNullValue(range: Tuple<V>, cellValue: V, filterModel: M, params: IDoesFilterPassParams): boolean;\n\n    // allow iteration of all condition inputs managed by sub-classes.\n    protected abstract getInputs(): Tuple<E>[];\n\n    // allow retrieval of all condition input values.\n    protected abstract getValues(position: ConditionPosition): Tuple<V>;\n\n    protected getNumberOfInputs(type?: ISimpleFilterModelType | null): number {\n        const customOpts = this.optionsFactory.getCustomOption(type);\n        if (customOpts) {\n            const { numberOfInputs } = customOpts;\n            return numberOfInputs != null ? numberOfInputs : 1;\n        }\n\n        const zeroInputTypes = [\n            SimpleFilter.EMPTY, SimpleFilter.NOT_BLANK, SimpleFilter.BLANK,\n        ];\n\n        if (type && zeroInputTypes.indexOf(type) >= 0) {\n            return 0;\n        } else if (type === SimpleFilter.IN_RANGE) {\n            return 2;\n        }\n\n        return 1;\n    }\n\n    // floating filter calls this when user applies filter from floating filter\n    public onFloatingFilterChanged(type: string | null | undefined, value: V | null): void {\n        this.setTypeFromFloatingFilter(type);\n        this.setValueFromFloatingFilter(value);\n        this.onUiChanged(true);\n    }\n\n    protected setTypeFromFloatingFilter(type?: string | null): void {\n        this.eType1.setValue(type);\n        this.eType2.setValue(this.optionsFactory.getDefaultOption());\n        (this.isDefaultOperator('AND') ? this.eJoinOperatorAnd : this.eJoinOperatorOr).setValue(true);\n    }\n\n    public getModelFromUi(): M | ICombinedSimpleModel<M> | null {\n        if (!this.isConditionUiComplete(ConditionPosition.One)) {\n            return null;\n        }\n\n        if (this.isAllowTwoConditions() && this.isConditionUiComplete(ConditionPosition.Two)) {\n            return {\n                filterType: this.getFilterType(),\n                operator: this.getJoinOperator(),\n                condition1: this.createCondition(ConditionPosition.One),\n                condition2: this.createCondition(ConditionPosition.Two)\n            };\n        }\n\n        return this.createCondition(ConditionPosition.One);\n    }\n\n    protected getConditionTypes(): Tuple<ISimpleFilterModelType> {\n        return [\n            this.eType1.getValue() as ISimpleFilterModelType,\n            this.eType2.getValue() as ISimpleFilterModelType,\n        ];\n    }\n\n    protected getJoinOperator(): JoinOperator {\n        return this.eJoinOperatorOr.getValue() === true ? 'OR' : 'AND';\n    }\n\n    protected areModelsEqual(a: M | ICombinedSimpleModel<M>, b: M | ICombinedSimpleModel<M>): boolean {\n        // both are missing\n        if (!a && !b) { return true; }\n\n        // one is missing, other present\n        if ((!a && b) || (a && !b)) { return false; }\n\n        // one is combined, the other is not\n        const aIsSimple = !(a as any).operator;\n        const bIsSimple = !(b as any).operator;\n        const oneSimpleOneCombined = (!aIsSimple && bIsSimple) || (aIsSimple && !bIsSimple);\n        if (oneSimpleOneCombined) { return false; }\n\n        let res: boolean;\n\n        // otherwise both present, so compare\n        if (aIsSimple) {\n            const aSimple = a as M;\n            const bSimple = b as M;\n\n            res = this.areSimpleModelsEqual(aSimple, bSimple);\n        } else {\n            const aCombined = a as ICombinedSimpleModel<M>;\n            const bCombined = b as ICombinedSimpleModel<M>;\n\n            res = aCombined.operator === bCombined.operator\n                && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1)\n                && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);\n        }\n\n        return res;\n    }\n\n    protected setModelIntoUi(model: ISimpleFilterModel | ICombinedSimpleModel<M>): AgPromise<void> {\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            const orChecked = combinedModel.operator === 'OR';\n            this.eJoinOperatorAnd.setValue(!orChecked);\n            this.eJoinOperatorOr.setValue(orChecked);\n\n            this.eType1.setValue(combinedModel.condition1.type);\n            this.eType2.setValue(combinedModel.condition2.type);\n\n            this.setConditionIntoUi(combinedModel.condition1, ConditionPosition.One);\n            this.setConditionIntoUi(combinedModel.condition2, ConditionPosition.Two);\n        } else {\n            const simpleModel = model as ISimpleFilterModel;\n\n            this.eJoinOperatorAnd.setValue(this.isDefaultOperator('AND'));\n            this.eJoinOperatorOr.setValue(this.isDefaultOperator('OR'));\n\n            this.eType1.setValue(simpleModel.type);\n            this.eType2.setValue(this.optionsFactory.getDefaultOption());\n\n            this.setConditionIntoUi(simpleModel as M, ConditionPosition.One);\n            this.setConditionIntoUi(null, ConditionPosition.Two);\n        }\n\n        return AgPromise.resolve();\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\n        const model = this.getModel();\n\n        if (model == null) { return true; }\n\n        const { operator } = model as ICombinedSimpleModel<M>;\n        const models: M[] = [];\n\n        if (operator) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            models.push(combinedModel.condition1, combinedModel.condition2);\n        } else {\n            models.push(model as M);\n        }\n\n        const combineFunction = operator && operator === 'OR' ? 'some' : 'every';\n\n        return models[combineFunction](m => this.individualConditionPasses(params, m));\n    }\n\n    protected setParams(params: ISimpleFilterParams): void {\n        super.setParams(params);\n\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params, this.getDefaultFilterOptions());\n\n        this.allowTwoConditions = !params.suppressAndOrCondition;\n        this.alwaysShowBothConditions = !!params.alwaysShowBothConditions;\n        this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);\n\n        this.putOptionsIntoDropdown();\n        this.addChangedListeners();\n    }\n\n    private getDefaultJoinOperator(defaultJoinOperator?: JoinOperator): JoinOperator | undefined {\n        return includes(['AND', 'OR'], defaultJoinOperator) ? defaultJoinOperator : 'AND';\n    }\n\n    private putOptionsIntoDropdown(): void {\n        const filterOptions = this.optionsFactory.getFilterOptions();\n        const eTypes = [this.eType1, this.eType2];\n\n        // Add specified options to all condition drop-downs.\n        filterOptions.forEach(option => {\n            const listOption = typeof option === 'string' ?\n                this.createBoilerplateListOption(option) :\n                this.createCustomListOption(option);\n\n            eTypes.forEach(eType => eType.addOption(listOption));\n        });\n\n        // Make drop-downs read-only if there is only one option.\n        eTypes.forEach(eType => eType.setDisabled(filterOptions.length <= 1));\n    }\n\n    private createBoilerplateListOption(option: string): ListOption {\n        return { value: option, text: this.translate(option as keyof IFilterLocaleText) };\n    }\n\n    private createCustomListOption(option: IFilterOptionDef): ListOption {\n        const { displayKey } = option;\n        const customOption = this.optionsFactory.getCustomOption(option.displayKey);\n        return {\n            value: displayKey,\n            text: customOption ?\n                this.gridOptionsWrapper.getLocaleTextFunc()(customOption.displayKey, customOption.displayName) :\n                this.translate(displayKey as keyof IFilterLocaleText),\n        };\n    }\n\n    public isAllowTwoConditions(): boolean {\n        return this.allowTwoConditions;\n    }\n\n    protected createBodyTemplate(): string {\n        return /* html */`\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions1\"></ag-select>\n            ${this.createValueTemplate(ConditionPosition.One)}\n            <div class=\"ag-filter-condition\" ref=\"eJoinOperatorPanel\">\n               <ag-radio-button ref=\"eJoinOperatorAnd\" class=\"ag-filter-condition-operator ag-filter-condition-operator-and\"></ag-radio-button>\n               <ag-radio-button ref=\"eJoinOperatorOr\" class=\"ag-filter-condition-operator ag-filter-condition-operator-or\"></ag-radio-button>\n            </div>\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions2\"></ag-select>\n            ${this.createValueTemplate(ConditionPosition.Two)}`;\n    }\n\n    protected getCssIdentifier() {\n        return 'simple-filter';\n    }\n\n    protected updateUiVisibility(): void {\n        const elementConditionGroups = [\n            [this.eType1],\n            [this.eType2, this.eJoinOperatorPanel, this.eJoinOperatorAnd, this.eJoinOperatorOr],\n        ];\n        const elementBodies = [this.eCondition1Body, this.eCondition2Body];\n\n        elementConditionGroups.forEach((group, position) => {\n            const visible = this.isConditionVisible(position);\n            const disabled = this.isConditionDisabled(position);\n\n            group.forEach(element => {\n                if (element instanceof AgAbstractInputField || element instanceof AgSelect) {\n                    element.setDisabled(disabled);\n                    element.setDisplayed(visible);\n                } else {\n                    setDisabled(element, disabled);\n                    setDisplayed(element, visible);\n                }\n            });\n        });\n\n        elementBodies.forEach((element, index) => {\n            setDisplayed(element, this.isConditionBodyVisible(index));\n        });\n\n        this.forEachInput((element, index, position, numberOfInputs) => {\n            this.setElementDisplayed(element, index < numberOfInputs);\n            this.setElementDisabled(element, this.isConditionDisabled(position));\n        });\n\n        this.resetPlaceholder();\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams) {\n        super.afterGuiAttached(params);\n\n        this.resetPlaceholder();\n\n        if (!params || (!params.suppressFocus && !this.isReadOnly())) {\n            const firstInput = this.getInputs()[0][0];\n            if (!firstInput) { return; }\n\n            if (firstInput instanceof AgAbstractInputField) {\n                firstInput.getInputElement().focus();\n            }\n        }\n    }\n\n    // allow sub-classes to reset HTML placeholders after UI update.\n    protected resetPlaceholder(): void {\n        const globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        this.forEachInput((element, index, _, numberOfInputs) => {\n            if (!(element instanceof AgAbstractInputField)) {\n                return;\n            }\n\n            const placeholder =\n                index === 0 && numberOfInputs > 1 ? 'inRangeStart' :\n                index === 0 ? 'filterOoo' :\n                'inRangeEnd';\n            const ariaLabel =\n                index === 0 && numberOfInputs > 1 ? globalTranslate('ariaFilterFromValue', 'Filter from value') :\n                index === 0 ? globalTranslate('ariaFilterValue', 'Filter Value') :\n                globalTranslate('ariaFilterToValue', 'Filter to Value');\n\n            element.setInputPlaceholder(this.translate(placeholder));\n            element.setInputAriaLabel(ariaLabel);\n        });\n    }\n\n    protected setElementValue(element: E, value: V | null, silent?: boolean): void {\n        if (element instanceof AgAbstractInputField) {\n            element.setValue(value != null ? String(value) : null, silent);\n        }\n    }\n\n    protected setElementDisplayed(element: E, displayed: boolean): void {\n        if (element instanceof Component) {\n            setDisplayed(element.getGui(), displayed);\n        }\n    }\n\n    protected setElementDisabled(element: E, disabled: boolean): void {\n        if (element instanceof Component) {\n            setDisabled(element.getGui(), disabled);\n        }\n    }\n\n    protected attachElementOnChange(element: E, listener: () => void): void {\n        if (element instanceof AgAbstractInputField) {\n            element.onValueChange(listener);\n        }\n    }\n\n    protected forEachInput(cb: (element: E, index: number, position: number, numberOfInputs: number) => void): void {\n        const inputs = this.getInputs();\n        this.getConditionTypes().forEach((type, position) => {\n            const numberOfInputs = this.getNumberOfInputs(type);\n            for (let index = 0; index < inputs[position].length; index++) {\n                const input = inputs[position][index];\n                if (input != null) {\n                    cb(input, index, position, numberOfInputs);\n                }\n            }\n        });\n    }\n\n    protected isConditionVisible(position: ConditionPosition): boolean {\n        if (position === 0) { return true; } // Position 0 should always be visible.\n        if (!this.allowTwoConditions) { return false; } // Short-circuit if no tail conditions.\n\n        if (this.isReadOnly()) {\n            // Only display a condition when read-only if the condition is complete.\n            return this.isConditionUiComplete(position);\n        }\n\n        if (this.alwaysShowBothConditions) { return true; }\n\n        // Only display a 2nd or later condition when the previous condition is complete.\n        return this.isConditionUiComplete(position - 1);\n    }\n\n    protected isConditionDisabled(position: ConditionPosition): boolean {\n        if (this.isReadOnly()) { return true; } // Read-only mode trumps everything.\n        if (!this.isConditionVisible(position)) { return true; } // Invisible implies disabled.\n        if (position === 0) { return false; } // Position 0 should typically be editable.\n\n        // Only allow editing of a 2nd or later condition if the previous condition is complete.\n        return !this.isConditionUiComplete(position - 1);\n    }\n\n    protected isConditionBodyVisible(position: ConditionPosition): boolean {\n        if (!this.isConditionVisible(position)) { return false; }\n\n        // Check that the condition needs inputs.\n        const type = this.getConditionTypes()[position];\n        const numberOfInputs = this.getNumberOfInputs(type);\n        return numberOfInputs > 0;\n    }\n\n    // returns true if the UI represents a working filter, eg all parts are filled out.\n    // eg if text filter and textfield blank then returns false.\n    protected isConditionUiComplete(position: ConditionPosition): boolean {\n        const type = this.getConditionTypes()[position];\n\n        if (type === SimpleFilter.EMPTY) { return false; }\n\n        if (this.getValues(position).some(v => v == null)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected resetUiToDefaults(silent?: boolean): AgPromise<void> {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const filteringLabel = translate('ariaFilteringOperator', 'Filtering operator');\n        const uniqueGroupId = 'ag-simple-filter-and-or-' + this.getCompId();\n        const defaultOption = this.optionsFactory.getDefaultOption();\n\n        this.eType1\n            .setValue(defaultOption, silent)\n            .setAriaLabel(filteringLabel)\n            .setDisabled(this.isReadOnly());\n        this.eType2\n            .setValue(this.optionsFactory.getDefaultOption(), silent)\n            .setAriaLabel(filteringLabel)\n            .setDisabled(this.isReadOnly());\n\n        this.eJoinOperatorAnd\n            .setValue(this.isDefaultOperator('AND'), silent)\n            .setName(uniqueGroupId)\n            .setLabel(this.translate('andCondition'))\n            .setDisabled(this.isReadOnly());\n\n        this.eJoinOperatorOr\n            .setValue(this.isDefaultOperator('OR'), silent)\n            .setName(uniqueGroupId)\n            .setLabel(this.translate('orCondition'))\n            .setDisabled(this.isReadOnly());\n\n        this.forEachInput((element) => {\n            this.setElementValue(element, null, silent);\n            this.setElementDisabled(element, this.isReadOnly());\n        });\n\n        this.resetPlaceholder();\n\n        return AgPromise.resolve();\n    }\n\n    // puts model values into the UI\n    protected setConditionIntoUi(model: M | null, position: ConditionPosition): void {\n        const values = this.mapValuesFromModel(model);\n        this.forEachInput((element, index, elPosition, _) => {\n            if (elPosition !== position) { return; }\n\n            this.setElementValue(element, values[index] != null ? values[index] : null);\n        });\n    }\n\n    // after floating filter changes, this sets the 'value' section. this is implemented by the base class\n    // (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.\n    protected setValueFromFloatingFilter(value: V | null): void {\n        this.forEachInput((element, index, position, _) => {\n            this.setElementValue(element, index === 0 && position === 0 ? value : null);\n        });\n    }\n\n    private isDefaultOperator(operator: JoinOperator): boolean {\n        return operator === this.defaultJoinOperator;\n    }\n\n    private addChangedListeners() {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        const listener = () => this.onUiChanged();\n        this.eType1.onValueChange(listener);\n        this.eType2.onValueChange(listener);\n        this.eJoinOperatorOr.onValueChange(listener);\n        this.eJoinOperatorAnd.onValueChange(listener);\n\n        this.forEachInput((element) => {\n            this.attachElementOnChange(element, listener);\n        });\n    }\n\n    /** returns true if the row passes the said condition */\n    protected individualConditionPasses(params: IDoesFilterPassParams, filterModel: M) {\n        const cellValue = this.getCellValue(params.node);\n        const values = this.mapValuesFromModel(filterModel);\n        const customFilterOption = this.optionsFactory.getCustomOption(filterModel.type);\n\n        const customFilterResult = this.evaluateCustomFilter(customFilterOption, values, cellValue);\n        if (customFilterResult != null) {\n            return customFilterResult;\n        }\n\n        if (cellValue == null) {\n            return this.evaluateNullValue(filterModel.type);\n        }\n\n        return this.evaluateNonNullValue(values, cellValue, filterModel, params);\n    }\n\n    protected evaluateCustomFilter(\n        customFilterOption: IFilterOptionDef | undefined,\n        values: Tuple<V>,\n        cellValue: V,\n    ): boolean | undefined {\n        if (customFilterOption == null) {\n            return;\n        }\n\n        const { predicate } = customFilterOption;\n        // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n        if (predicate != null && !values.some(v => v == null)) {\n            return predicate(values, cellValue);\n        }\n\n        // No custom filter invocation, indicate that to the caller.\n        return;\n    }\n\n    protected isBlank(cellValue: V) {\n        return cellValue == null ||\n            (typeof cellValue === 'string' && cellValue.trim().length === 0);\n    }\n}\n"]}