{"version":3,"sources":["../../../src/ts/eventKeys.ts"],"names":[],"mappings":"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","file":"eventKeys.js","sourcesContent":["export class Events {\n\n    /** Everything has changed with the columns. Either complete new set of columns set, or user called setState() */\n    /** @deprecated - grid no longer uses this, and setSate() also fires individual events */\n    public static EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged';\n\n    /** User has set in new columns. */\n    public static EVENT_NEW_COLUMNS_LOADED = 'newColumnsLoaded';\n\n    /** The pivot mode flag was changed */\n    public static EVENT_COLUMN_PIVOT_MODE_CHANGED = 'columnPivotModeChanged';\n\n    /** A row group column was added, removed or order changed. */\n    public static EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';\n\n    /** expandAll / collapseAll was called from the api. */\n    public static EVENT_EXPAND_COLLAPSE_ALL = 'expandOrCollapseAll';\n\n    /** A pivot column was added, removed or order changed. */\n    public static EVENT_COLUMN_PIVOT_CHANGED = 'columnPivotChanged';\n\n    /** The list of grid columns has changed. */\n    public static EVENT_GRID_COLUMNS_CHANGED = 'gridColumnsChanged';\n\n    /** A value column was added, removed or agg function was changed. */\n    public static EVENT_COLUMN_VALUE_CHANGED = 'columnValueChanged';\n\n    /** A column was moved */\n    public static EVENT_COLUMN_MOVED = 'columnMoved';\n\n    /** One or more columns was shown / hidden */\n    public static EVENT_COLUMN_VISIBLE = 'columnVisible';\n\n    /** One or more columns was pinned / unpinned*/\n    public static EVENT_COLUMN_PINNED = 'columnPinned';\n\n    /** A column group was opened / closed */\n    public static EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened';\n\n    /** One or more columns was resized. If just one, the column in the event is set. */\n    public static EVENT_COLUMN_RESIZED = 'columnResized';\n\n    /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */\n    public static EVENT_DISPLAYED_COLUMNS_CHANGED = 'displayedColumnsChanged';\n\n    /** The list of virtual columns has changed, results from viewport changing */\n    public static EVENT_VIRTUAL_COLUMNS_CHANGED = 'virtualColumnsChanged';\n\n    /** Async Transactions Executed */\n    public static EVENT_ASYNC_TRANSACTIONS_FLUSHED = 'asyncTransactionsFlushed';\n\n    /** A row group was opened / closed */\n    public static EVENT_ROW_GROUP_OPENED = 'rowGroupOpened';\n\n    /** The client has set new data into the grid */\n    public static EVENT_ROW_DATA_CHANGED = 'rowDataChanged';\n\n    /** The client has updated data for the grid */\n    public static EVENT_ROW_DATA_UPDATED = 'rowDataUpdated';\n\n    /** The client has set new floating data into the grid */\n    public static EVENT_PINNED_ROW_DATA_CHANGED = 'pinnedRowDataChanged';\n\n    /** Range selection has changed */\n    public static EVENT_RANGE_SELECTION_CHANGED = 'rangeSelectionChanged';\n\n    /** Chart was created */\n    public static EVENT_CHART_CREATED = 'chartCreated';\n\n    /** Chart Range selection has changed */\n    public static EVENT_CHART_RANGE_SELECTION_CHANGED = 'chartRangeSelectionChanged';\n\n    /** Chart Options have changed */\n    public static EVENT_CHART_OPTIONS_CHANGED = 'chartOptionsChanged';\n\n    /** Chart was destroyed */\n    public static EVENT_CHART_DESTROYED = 'chartDestroyed';\n\n    /** For when the tool panel is shown / hidden */\n    public static EVENT_TOOL_PANEL_VISIBLE_CHANGED = 'toolPanelVisibleChanged';\n\n    public static EVENT_COLUMN_PANEL_ITEM_DRAG_START = 'columnPanelItemDragStart';\n    public static EVENT_COLUMN_PANEL_ITEM_DRAG_END = 'columnPanelItemDragEnd';\n\n    /** Model was updated - grid updates the drawn rows when this happens */\n    public static EVENT_MODEL_UPDATED = 'modelUpdated';\n\n    public static EVENT_PASTE_START = 'pasteStart';\n    public static EVENT_PASTE_END = 'pasteEnd';\n\n    public static EVENT_FILL_START = 'fillStart';\n    public static EVENT_FILL_END = 'fillEnd';\n\n    public static EVENT_CELL_CLICKED = 'cellClicked';\n    public static EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked';\n    public static EVENT_CELL_MOUSE_DOWN = 'cellMouseDown';\n    public static EVENT_CELL_CONTEXT_MENU = 'cellContextMenu';\n    public static EVENT_CELL_VALUE_CHANGED = 'cellValueChanged';\n    public static EVENT_CELL_EDIT_REQUEST = 'cellEditRequest';\n    public static EVENT_ROW_VALUE_CHANGED = 'rowValueChanged';\n    public static EVENT_CELL_FOCUSED = 'cellFocused';\n    public static EVENT_FULL_WIDTH_ROW_FOCUSED = 'fullWidthRowFocused';\n    public static EVENT_ROW_SELECTED = 'rowSelected';\n    public static EVENT_SELECTION_CHANGED = 'selectionChanged';\n\n    public static EVENT_CELL_KEY_DOWN = 'cellKeyDown';\n    public static EVENT_CELL_KEY_PRESS = 'cellKeyPress';\n\n    public static EVENT_CELL_MOUSE_OVER = 'cellMouseOver';\n    public static EVENT_CELL_MOUSE_OUT = 'cellMouseOut';\n\n    /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */\n    public static EVENT_FILTER_CHANGED = 'filterChanged';\n\n    /** Filter was change but not applied. Only useful if apply buttons are used in filters. */\n    public static EVENT_FILTER_MODIFIED = 'filterModified';\n    public static EVENT_FILTER_OPENED = 'filterOpened';\n\n    public static EVENT_SORT_CHANGED = 'sortChanged';\n\n    /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */\n    public static EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved';\n\n    public static EVENT_ROW_CLICKED = 'rowClicked';\n    public static EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked';\n\n    /** Gets called once after the grid has finished initialising. */\n    public static EVENT_GRID_READY = 'gridReady';\n    /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's\n     * changed, so always filling the space it was given. */\n    public static EVENT_GRID_SIZE_CHANGED = 'gridSizeChanged';\n    /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */\n    public static EVENT_VIEWPORT_CHANGED = 'viewportChanged';\n    /* The width of the scrollbar has been calculated */\n    public static EVENT_SCROLLBAR_WIDTH_CHANGED = 'scrollbarWidthChanged';\n    /** Rows were rendered for the first time (ie on async data load). */\n    public static EVENT_FIRST_DATA_RENDERED = 'firstDataRendered';\n    /** A column drag has started, either resizing a column or moving a column. */\n    public static EVENT_DRAG_STARTED = 'dragStarted';\n    /** A column drag has stopped */\n    public static EVENT_DRAG_STOPPED = 'dragStopped';\n\n    public static EVENT_CHECKBOX_CHANGED = 'checkboxChanged';\n\n    public static EVENT_ROW_EDITING_STARTED = 'rowEditingStarted';\n    public static EVENT_ROW_EDITING_STOPPED = 'rowEditingStopped';\n\n    public static EVENT_CELL_EDITING_STARTED = 'cellEditingStarted';\n    public static EVENT_CELL_EDITING_STOPPED = 'cellEditingStopped';\n\n    /** Main body of grid has scrolled, either horizontally or vertically */\n    public static EVENT_BODY_SCROLL = 'bodyScroll';\n\n    /** Main body of the grid has stopped scrolling, either horizontally or vertically */\n    public static EVENT_BODY_SCROLL_END = 'bodyScrollEnd';\n\n    public static EVENT_HEIGHT_SCALE_CHANGED = 'heightScaleChanged';\n\n    /** The displayed page for pagination has changed. For example the data was filtered or sorted,\n     * or the user has moved to a different page. */\n    public static EVENT_PAGINATION_CHANGED = 'paginationChanged';\n\n    /** Only used by React, Angular, Web Components and VueJS AG Grid components\n     * (not used if doing plain JavaScript). If the grid receives changes due\n     * to bound properties, this event fires after the grid has finished processing the change. */\n    public static EVENT_COMPONENT_STATE_CHANGED = 'componentStateChanged';\n\n    /*****************************  INTERNAL EVENTS: START ******************************************* */\n\n    /** Please remember to add to ComponentUtil.EXCLUDED_INTERNAL_EVENTS to not have these events exposed to framework components. */\n\n    /** All items from here down are used internally by the grid, not intended for external use. */\n    // not documented, either experimental, or we just don't want users using an depending on them\n    public static EVENT_BODY_HEIGHT_CHANGED = 'bodyHeightChanged';\n    public static EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = 'displayedColumnsWidthChanged';\n    public static EVENT_SCROLL_VISIBILITY_CHANGED = 'scrollVisibilityChanged';\n    public static EVENT_COLUMN_HOVER_CHANGED = 'columnHoverChanged';\n    public static EVENT_FLASH_CELLS = 'flashCells';\n    public static EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = 'paginationPixelOffsetChanged';\n    public static EVENT_DISPLAYED_ROWS_CHANGED = 'displayedRowsChanged';\n\n    public static EVENT_LEFT_PINNED_WIDTH_CHANGED = 'leftPinnedWidthChanged';\n    public static EVENT_RIGHT_PINNED_WIDTH_CHANGED = 'rightPinnedWidthChanged';\n\n    public static EVENT_ROW_CONTAINER_HEIGHT_CHANGED = 'rowContainerHeightChanged';\n\n    public static EVENT_ROW_DRAG_ENTER = 'rowDragEnter';\n    public static EVENT_ROW_DRAG_MOVE = 'rowDragMove';\n    public static EVENT_ROW_DRAG_LEAVE = 'rowDragLeave';\n    public static EVENT_ROW_DRAG_END = 'rowDragEnd';\n\n    // primarily for charts\n    public static EVENT_POPUP_TO_FRONT = 'popupToFront';\n\n    // these are used for server side group and agg - only used by CS with Viewport Row Model - intention is\n    // to design these better around server side functions and then release to general public when fully working with\n    // all the row models.\n    public static EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = 'columnRowGroupChangeRequest';\n    public static EVENT_COLUMN_PIVOT_CHANGE_REQUEST = 'columnPivotChangeRequest';\n    public static EVENT_COLUMN_VALUE_CHANGE_REQUEST = 'columnValueChangeRequest';\n    public static EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = 'columnAggFuncChangeRequest';\n\n    public static EVENT_KEYBOARD_FOCUS = 'keyboardFocus';\n    public static EVENT_MOUSE_FOCUS = 'mouseFocus';\n\n    public static EVENT_STORE_UPDATED = 'storeUpdated';\n\n    /*****************************  INTERNAL EVENTS: END ******************************************* */\n}\n"]}