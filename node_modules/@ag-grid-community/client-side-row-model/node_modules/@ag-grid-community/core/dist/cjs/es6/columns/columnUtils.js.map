{"version":3,"sources":["../../../src/ts/columns/columnUtils.ts"],"names":[],"mappings":"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","file":"columnUtils.js","sourcesContent":["import { IHeaderColumn } from \"../entities/iHeaderColumn\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { IProvidedColumn } from \"../entities/iProvidedColumn\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { Column } from \"../entities/column\";\nimport { Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { attrToNumber } from \"../utils/generic\";\nimport { ColDef } from \"../entities/colDef\";\n\n// takes in a list of columns, as specified by the column definitions, and returns column groups\n@Bean('columnUtils')\nexport class ColumnUtils extends BeanStub {\n\n    public calculateColMinWidth(colDef: ColDef): number {\n        return colDef.minWidth != null ? colDef.minWidth : this.gridOptionsWrapper.getMinColWidth();\n    }\n\n    public calculateColMaxWidth(colDef: ColDef): number {\n        return colDef.maxWidth != null ? colDef.maxWidth : (this.gridOptionsWrapper.getMaxColWidth() || Number.MAX_SAFE_INTEGER);\n    }\n\n    public calculateColInitialWidth(colDef: ColDef): number {\n        const minColWidth = this.calculateColMinWidth(colDef);\n        const maxColWidth = this.calculateColMaxWidth(colDef);\n\n        let width : number;\n        const colDefWidth = attrToNumber(colDef.width);\n        const colDefInitialWidth = attrToNumber(colDef.initialWidth);\n\n        if (colDefWidth != null) {\n            width = colDefWidth;\n        } else if (colDefInitialWidth != null) {\n            width = colDefInitialWidth;\n        } else {\n            width = this.gridOptionsWrapper.getColWidth();\n        }\n\n        return Math.max(Math.min(width, maxColWidth), minColWidth);\n    }\n\n    public getOriginalPathForColumn(column: Column, originalBalancedTree: IProvidedColumn[]): ProvidedColumnGroup[] | null {\n        const result: ProvidedColumnGroup[] = [];\n        let found = false;\n\n        const recursePath = (balancedColumnTree: IProvidedColumn[], dept: number): void => {\n            for (let i = 0; i < balancedColumnTree.length; i++) {\n                if (found) { return; }\n                    // quit the search, so 'result' is kept with the found result\n\n                const node = balancedColumnTree[i];\n                if (node instanceof ProvidedColumnGroup) {\n                    const nextNode = node;\n                    recursePath(nextNode.getChildren(), dept + 1);\n                    result[dept] = node;\n                } else if (node === column) {\n                    found = true;\n                }\n            }\n        };\n\n        recursePath(originalBalancedTree, 0);\n\n        // we should always find the path, but in case there is a bug somewhere, returning null\n        // will make it fail rather than provide a 'hard to track down' bug\n        return found ? result : null;\n    }\n\n    public depthFirstOriginalTreeSearch(parent: ProvidedColumnGroup | null, tree: IProvidedColumn[], callback: (treeNode: IProvidedColumn, parent: ProvidedColumnGroup | null) => void): void {\n        if (!tree) { return; }\n\n        tree.forEach((child: IProvidedColumn) => {\n            if (child instanceof ProvidedColumnGroup) {\n                this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);\n            }\n            callback(child, parent);\n        });\n\n    }\n\n    public depthFirstAllColumnTreeSearch(tree: IHeaderColumn[] | null, callback: (treeNode: IHeaderColumn) => void): void {\n        if (!tree) { return; }\n\n        tree.forEach((child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);\n            }\n            callback(child);\n        });\n\n    }\n\n    public depthFirstDisplayedColumnTreeSearch(tree: IHeaderColumn[] | null, callback: (treeNode: IHeaderColumn) => void): void {\n        if (!tree) { return; }\n\n        tree.forEach((child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);\n            }\n            callback(child);\n        });\n    }\n}\n"]}