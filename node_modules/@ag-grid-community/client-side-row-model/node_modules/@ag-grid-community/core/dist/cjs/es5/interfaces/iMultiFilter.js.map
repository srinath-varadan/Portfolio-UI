{"version":3,"sources":["../../../src/ts/interfaces/iMultiFilter.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"iMultiFilter.js","sourcesContent":["import { IProvidedFilter } from \"../filter/provided/providedFilter\";\nimport { AgPromise } from \"../utils\";\nimport { IFilter, IFilterComp, IFilterDef, IFilterParams, IFilterType, IFloatingFilterType, ProvidedFilterModel } from \"./iFilter\";\n\n/** Interface contract for the public aspects of the ProvidedFilter implementation(s). */\nexport interface IMultiFilter extends IProvidedFilter {\n    /** @returns the child filter instance at the given index. */\n    getChildFilterInstance(index: number): IFilter | undefined;\n}\n\nexport interface IMultiFilterDef extends IFilterDef {\n    /**\n     * Configures how the filter is shown in the Multi Filter.\n     * Default: `inline`\n     */\n    display?: 'inline' | 'accordion' | 'subMenu';\n    /** The title to be used when a filter is displayed inside a sub-menu or accordion. */\n    title?: string;\n\n    /** Child filter component to use inside the Multi Filter. */\n    filter?: IFilterType;\n    /** Child filter component to use inside the Multi Filter. */\n    filterFramework?: any;\n    /** Custom parameters to be passed to the child filter component. */\n    filterParams?: any;\n    /** Floating filter component to use for the child filter. */\n    floatingFilterComponent?: IFloatingFilterType;\n    /** Floating framework filter component to use for the child filter. */\n    floatingFilterComponentFramework?: any;\n    /** Custom parameters to be passed to the floating filter component. */\n    floatingFilterComponentParams?: any;\n}\n\nexport interface IMultiFilterParams extends IFilterParams {\n    /** An array of filter definition objects. */\n    filters?: IMultiFilterDef[];\n    /**\n     * If true, all UI inputs managed by this filter are for display only, and the filter can only\n     * be affected by API calls. Does NOT affect child filters, they need to be individually\n     * configured with `readOnly` where applicable.\n     * Default: `false`\n     */\n    readOnly?: boolean;\n}\n\nexport interface IMultiFilterModel {\n    /** Multi filter type.  */\n    filterType?: 'multi';\n    /**\n     * Child filter models in the same order as the filters are specified in `filterParams`.\n     */\n    filterModels: any[] | null;\n}\n\nexport interface IMultiFilterComp {\n    /** Returns `true` if the filter is currently active, otherwise `false`. */\n    isFilterActive(): boolean;\n\n    /** Returns a model representing the current state of the filter, or `null` if the filter is not active. */\n    getModel(): ProvidedFilterModel | null;\n\n    /**\n     * Sets the state of the child filters using the supplied models. Providing `null` will\n     * de-activate all child filters.\n     * \n     * **Note:** if you are providing values asynchronously to a child Set Filter,\n     * you need to wait for these changes to be applied before performing any further actions by\n     * waiting on the returned grid promise, e.g.\n     * `filter.setModel([null, { values: ['a', 'b'] }]).then(function() { gridApi.onFilterChanged(); });`\n     */\n    setModel(model: IMultiFilterModel | null): void | AgPromise<void>;\n\n    /** Returns the child filter instance at the specified index or `undefined` for an invalid index.  */\n    getChildFilterInstance(index: number): IFilterComp | undefined;\n}"]}