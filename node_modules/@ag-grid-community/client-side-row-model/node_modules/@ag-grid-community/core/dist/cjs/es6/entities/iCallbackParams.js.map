{"version":3,"sources":["../../../src/ts/entities/iCallbackParams.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"iCallbackParams.js","sourcesContent":["import { HeaderPosition } from \"../headerRendering/common/headerPosition\";\nimport { ChartMenuOptions } from \"../interfaces/iChartOptions\";\nimport { AgGridCommon } from \"../interfaces/iCommon\";\nimport { ServerSideTransaction } from \"../interfaces/serverSideTransaction\";\nimport { CellPosition } from \"./cellPosition\";\nimport { ColDef, ColGroupDef } from \"./colDef\";\nimport { Column } from \"./column\";\nimport { RowNode } from \"./rowNode\";\n\nexport interface GetContextMenuItemsParams extends AgGridCommon {\n    /** Names of the items that would be provided by default. */\n    defaultItems: string[] | undefined;\n    /** The column, if a cell was clicked, otherwise null. */\n    column: Column | null;\n    /** The row node, if a cell was clicked, otherwise null. */\n    node: RowNode | null;\n    /** The value, if a cell was clicked, otherwise null.  */\n    value: any;\n}\n\nexport interface GetMainMenuItemsParams extends AgGridCommon {\n    /** The column that was clicked */\n    column: Column;\n    /** List of the items that would be displayed by default */\n    defaultItems: string[];\n}\n\nexport interface PostProcessPopupParams extends AgGridCommon {\n    /** If popup is for a column, this gives the Column */\n    column?: Column | null;\n    /** If popup is for a row, this gives the RowNode */\n    rowNode?: RowNode | null;\n    /** The popup we are showing */\n    ePopup: HTMLElement;\n    /** The different types are:\n     *  'contextMenu', 'columnMenu', 'aggFuncSelect', 'popupCellEditor' */\n    type: string;\n    /** If the popup is as a result of a button click (eg menu button),\n     *  this is the component that the user clicked */\n    eventSource?: HTMLElement | null;\n    /** If the popup is as a result of a click or touch,\n     *  this is the event - eg user showing context menu */\n    mouseEvent?: MouseEvent | Touch | null;\n}\n\nexport interface SendToClipboardParams extends AgGridCommon {\n    data: string;\n}\nexport interface ProcessDataFromClipboardParams extends AgGridCommon {\n    /** 2D array of all cells from the clipboard */\n    data: string[][];\n}\n\nexport interface GetChartToolbarItemsParams extends AgGridCommon {\n    defaultItems?: ChartMenuOptions[];\n}\n\nexport interface NavigateToNextHeaderParams extends AgGridCommon {\n    /** The key for the arrow key pressed,\n     *  left = 'ArrowLeft', up = 'ArrowUp', right = 'ArrowRight', down = 'ArrowDown' */\n    key: string;\n    /** The header that currently has focus */\n    previousHeaderPosition: HeaderPosition | null;\n    /** The header the grid would normally pick as the next header for this navigation */\n    nextHeaderPosition: HeaderPosition | null;\n    /** The number of header rows present in the grid */\n    headerRowCount: number;\n    event: KeyboardEvent;\n}\n\nexport interface TabToNextHeaderParams extends AgGridCommon {\n    /** True if the Shift key is also down */\n    backwards: boolean;\n    /** The header that currently has focus */\n    previousHeaderPosition: HeaderPosition | null;\n    /** The header the grid would normally pick as the next header for this navigation */\n    nextHeaderPosition: HeaderPosition | null;\n    /** The number of header rows present in the grid */\n    headerRowCount: number;\n}\n\n\nexport interface TabToNextCellParams extends AgGridCommon {\n    /** True if the Shift key is also down */\n    backwards: boolean;\n    /** True if the current cell is editing\n     * (you may want to skip cells that are not editable, as the grid will enter the next cell in editing mode also if tabbing) */\n    editing: boolean;\n    /** The cell that currently has focus */\n    previousCellPosition: CellPosition;\n    /** The cell the grid would normally pick as the next cell for navigation.  */\n    nextCellPosition: CellPosition | null;\n\n}\n\nexport interface NavigateToNextCellParams extends AgGridCommon {\n    /** The keycode for the arrow key pressed:\n     *  left = 'ArrowLeft', up = 'ArrowUp', right = 'ArrowRight', down = 'ArrowDown' */\n    key: string;\n    /** The cell that currently has focus */\n    previousCellPosition: CellPosition;\n    /** The cell the grid would normally pick as the next cell for navigation */\n    nextCellPosition: CellPosition | null;\n\n    event: KeyboardEvent | null;\n}\n\nexport interface PaginationNumberFormatterParams extends AgGridCommon {\n    value: number;\n}\n\n\nexport interface IsGroupOpenByDefaultParams extends AgGridCommon {\n    /** The row node being considered. */\n    rowNode: RowNode;\n    /** The Column for which this row is grouping. */\n    rowGroupColumn: Column;\n    /** Same as `rowNode.level` - what level the group is at, e.g. 0 for top level, 1 for second etc */\n    level: number;\n    /** Same as `rowNode.field` - the field we are grouping on, e.g. 'country' */\n    field: string;\n    /** Same as `rowNode.key`, the value of this group, e.g. 'Ireland' */\n    key: string;\n}\n\nexport interface GetServerSideStoreParamsParams extends AgGridCommon {\n    /** The level of the store. Top level is 0. */\n    level: number;\n    /** The Row Node for the group that got expanded, or undefined if top level (ie no parent) */\n    parentRowNode?: RowNode;\n    /** Active Row Group Columns, if any. */\n    rowGroupColumns: Column[];\n    /** Active Pivot Columns, if any. */\n    pivotColumns: Column[];\n    /** true if pivot mode is active. */\n    pivotMode: boolean;\n}\n\nexport interface IsServerSideGroupOpenByDefaultParams extends AgGridCommon {\n    data: any;\n    rowNode: RowNode;\n}\n\nexport interface IsApplyServerSideTransactionParams extends AgGridCommon {\n    /** The transaction getting applied. */\n    transaction: ServerSideTransaction;\n    /** The parent RowNode, if transaction is applied to a group. */\n    parentNode: RowNode;\n    //** Store info, if any, as passed via the success() callback when loading data. */\n    storeInfo: any;\n}\n\nexport interface GetRowIdParams extends AgGridCommon {\n    /** The data item provided to the grid for the row in question */\n    data: any;\n    /** If grouping, the level, ie how many levels from the top. Used by ServerSide Row Model only */\n    level: number;\n    /** If grouping, provides the keys of the parent groups. Used by ServerSide Row Model only */\n    parentKeys?: string[];\n}\n\nexport interface ProcessRowParams extends AgGridCommon {\n    eRow: HTMLElement;\n    ePinnedLeftRow: HTMLElement;\n    ePinnedRightRow: HTMLElement;\n    rowIndex: number;\n    node: RowNode;\n    addRenderedRowListener: (eventType: string, listener: Function) => void;\n}\n\nexport interface FillOperationParams extends AgGridCommon {\n    /** The mouse event for the fill operation. */\n    event: MouseEvent;\n    /** The values that have been processed by the fill operation. */\n    values: any[];\n    /** The RowNode of the current cell being changed. */\n    rowNode: RowNode;\n    /** The Column of the current cell being changed. */\n    column: Column;\n    /** The values that were present before processing started. */\n    initialValues: any[];\n    /** The index of the current processed value. */\n    currentIndex: number;\n    /** The value of the cell being currently processed by the Fill Operation. */\n    currentCellValue: any;\n    /** The direction of the Fill Operation. */\n    direction: 'up' | 'down' | 'left' | 'right';\n}\n\nexport interface RowHeightParams extends AgGridCommon {\n    data: any;\n    node: RowNode;\n}\n\nexport interface IsExternalFilterPresentParams extends AgGridCommon { }\n\nexport interface InitialGroupOrderComparatorParams extends AgGridCommon {\n    nodeA: RowNode;\n    nodeB: RowNode\n}\n\nexport interface GetGroupRowAggParams extends AgGridCommon {\n    nodes: RowNode[];\n}\n\nexport interface PostSortRowsParams extends AgGridCommon {\n    nodes: RowNode[];\n}\n\nexport interface IsFullWidthRowParams extends AgGridCommon {\n    rowNode: RowNode;\n}\n\nexport interface GetLocaleTextParams extends AgGridCommon {\n    key: string;\n    defaultValue: string;\n    variableValues?: string[];\n}\n\nexport interface GetGroupAggFilteringParams extends AgGridCommon {\n    node: RowNode;\n}\n"]}