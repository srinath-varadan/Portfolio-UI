{"version":3,"sources":["../../../src/ts/rendering/cellRenderers/groupCellRendererCtrl.ts"],"names":[],"mappings":"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","file":"groupCellRendererCtrl.js","sourcesContent":["import { ColumnModel } from \"../../columns/columnModel\";\nimport { UserCompDetails, UserComponentFactory } from \"../../components/framework/userComponentFactory\";\nimport { Constants } from \"../../constants/constants\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired } from \"../../context/context\";\nimport { CellRendererSelectorFunc } from \"../../entities/colDef\";\nimport { Column } from \"../../entities/column\";\nimport { GridOptions } from \"../../entities/gridOptions\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { isElementInEventPath, isStopPropagationForAgGrid, stopPropagationForAgGrid } from \"../../utils/event\";\nimport { removeAriaExpanded, setAriaExpanded } from \"../../utils/aria\";\nimport { doOnce } from \"../../utils/function\";\nimport { missing } from \"../../utils/generic\";\nimport { createIconNoSpan } from \"../../utils/icon\";\nimport { cloneObject } from \"../../utils/object\";\nimport { ExpressionService } from \"../../valueService/expressionService\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent\";\nimport { RowDragComp } from \"../row/rowDragComp\";\nimport { ValueFormatterService } from \"../valueFormatterService\";\nimport { ICellRendererComp, ICellRendererFunc, ICellRendererParams } from \"./iCellRenderer\";\n\nexport interface IGroupCellRenderer {\n    setInnerRenderer(compDetails: UserCompDetails | undefined, valueToDisplay: any): void;\n    setChildCount(count: string): void;\n    setCheckboxVisible(value: boolean): void;\n    setExpandedDisplayed(value: boolean): void;\n    setContractedDisplayed(value: boolean): void;\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n}\n\nexport interface FooterValueGetterFunc {\n    (params: GroupCellRendererParams): any;\n}\n\nexport interface GroupCellRendererParams extends ICellRendererParams {\n\n    /**\n     * Only when in fullWidth, this gives whether the comp is pinned or not.\n     * If not doing fullWidth, then this is not provided, as pinned can be got from the column.\n     */\n    pinned: string;\n    /** 'true' if comp is showing full width. */\n    fullWidth: boolean;\n\n    /** Set to `true` to not include any padding (indentation) in the child rows. */\n    suppressPadding: boolean;\n    /** Set to `true` to suppress expand on double click. */\n    suppressDoubleClickExpand: boolean;\n    /** Set to `true` to suppress expand on <kbd>Enter</kbd> */\n    suppressEnterExpand: boolean;\n    /** The value getter for the footer text. Can be a function or expression. */\n    footerValueGetter: string | FooterValueGetterFunc;\n    /** If `true`, count is not displayed beside the name. */\n    suppressCount: boolean;\n    /** If `true`, a selection checkbox is included.  */\n    checkbox: any;\n    rowDrag?: boolean;\n\n    /** The renderer to use for inside the cell (after grouping functions are added) */\n    innerRenderer?: { new(): ICellRendererComp; } | ICellRendererFunc | string;\n    /**\n     * @deprecated as of v27, use innerRenderer for Framework components\n     * Same as `innerRenderer` but for a framework component. */\n    innerRendererFramework?: any;\n    /** Additional params to customise to the `innerRenderer`. */\n    innerRendererParams?: any;\n    /** Callback to enable different innerRenderers to be used based of value of params. */\n    innerRendererSelector?: CellRendererSelectorFunc;\n\n    /** @deprecated */\n    padding: number;\n}\n\nexport class GroupCellRendererCtrl extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('gridOptions') private readonly gridOptions: GridOptions;\n\n    private params: GroupCellRendererParams;\n\n    // will be true if the node was pulled down\n    private showingValueForOpenedParent: boolean;\n\n    // this is normally the rowNode of this row, however when doing hideOpenParents, it will\n    // be the parent who's details we are actually showing if the data was pulled down.\n    private displayedGroupNode: RowNode;\n\n    private cellIsBlank: boolean;\n\n    private eGui: HTMLElement;\n    private eExpanded: HTMLElement;\n    private eContracted: HTMLElement;\n    private eCheckbox: HTMLElement;\n    private expandListener: (() => null) | null;\n\n    // keep reference to this, so we can remove again when indent changes\n    private indentClass: string;\n\n    private comp: IGroupCellRenderer;\n    private compClass: any;\n\n    public init(comp: IGroupCellRenderer, eGui: HTMLElement, eCheckbox: HTMLElement, eExpanded: HTMLElement, eContracted: HTMLElement, compClass: any, params: GroupCellRendererParams): void {\n        this.params = params;\n        this.eGui = eGui;\n        this.eCheckbox = eCheckbox;\n        this.eExpanded = eExpanded;\n        this.eContracted = eContracted;\n        this.comp = comp;\n        this.compClass = compClass;\n\n        const topLevelFooter = this.isTopLevelFooter();\n\n        const embeddedRowMismatch = this.isEmbeddedRowMismatch();\n        // This allows for empty strings to appear as groups since\n        // it will only return for null or undefined.\n        const nullValue = params.value == null;\n        let skipCell = false;\n\n        // if the groupCellRenderer is inside of a footer and groupHideOpenParents is true\n        // we should only display the groupCellRenderer if the current column is the rowGroupedColumn\n        if (this.gridOptionsWrapper.isGroupIncludeFooter() && this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            const node = params.node;\n\n            if (node.footer) {\n                const showRowGroup = params.colDef && params.colDef.showRowGroup;\n                const rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();\n\n                skipCell = showRowGroup !== rowGroupColumnId;\n            }\n        }\n\n        this.cellIsBlank = topLevelFooter ? false : (embeddedRowMismatch || nullValue || skipCell);\n\n        if (this.cellIsBlank) { return; }\n\n        this.setupShowingValueForOpenedParent();\n        this.findDisplayedGroupNode();\n        this.addFullWidthRowDraggerIfNeeded();\n        this.addExpandAndContract();\n        this.addCheckboxIfNeeded();\n        this.addValueElement();\n        this.setupIndent();\n        this.refreshAriaExpanded();\n    }\n\n    protected destroy(): void {\n        super.destroy();\n        // property cleanup to avoid memory leaks\n        this.expandListener = null;\n    }\n\n    private refreshAriaExpanded(): void {\n        const { node, eParentOfValue } = this.params;\n\n        if (this.expandListener) {\n            this.expandListener = this.expandListener();\n        }\n\n        if (!this.isExpandable()) {\n            removeAriaExpanded(eParentOfValue);\n            return;\n        }\n\n        const listener = () => {\n            // for react, we don't use JSX, as setting attributes via jsx is slower\n            setAriaExpanded(eParentOfValue, !!node.expanded);\n        };\n\n        this.expandListener = this.addManagedListener(node, RowNode.EVENT_EXPANDED_CHANGED, listener) || null;\n        listener();\n    }\n\n    private isTopLevelFooter(): boolean {\n        if (!this.gridOptionsWrapper.isGroupIncludeTotalFooter()) { return false; }\n\n        if (this.params.value != null || this.params.node.level != -1) { return false; }\n\n        // at this point, we know it's the root node and there is no value present, so it's a footer cell.\n        // the only thing to work out is if we are displaying groups  across multiple\n        // columns (groupMultiAutoColumn=true), we only want 'total' to appear in the first column.\n\n        const colDef = this.params.colDef;\n        const doingFullWidth = colDef == null;\n        if (doingFullWidth) { return true; }\n\n        if (colDef!.showRowGroup === true) { return true; }\n\n        const rowGroupCols = this.columnModel.getRowGroupColumns();\n        // this is a sanity check, rowGroupCols should always be present\n        if (!rowGroupCols || rowGroupCols.length === 0) { return true; }\n\n        const firstRowGroupCol = rowGroupCols[0];\n\n        return firstRowGroupCol.getId() === colDef!.showRowGroup;\n    }\n\n    // if we are doing embedded full width rows, we only show the renderer when\n    // in the body, or if pinning in the pinned section, or if pinning and RTL,\n    // in the right section. otherwise we would have the cell repeated in each section.\n    private isEmbeddedRowMismatch(): boolean {\n        if (!this.params.fullWidth || !this.gridOptionsWrapper.isEmbedFullWidthRows()) { return false; }\n\n        const pinnedLeftCell = this.params.pinned === Constants.PINNED_LEFT;\n        const pinnedRightCell = this.params.pinned === Constants.PINNED_RIGHT;\n        const bodyCell = !pinnedLeftCell && !pinnedRightCell;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            if (this.columnModel.isPinningLeft()) {\n                return !pinnedRightCell;\n            }\n            return !bodyCell;\n        }\n\n        if (this.columnModel.isPinningLeft()) {\n            return !pinnedLeftCell;\n        }\n\n        return !bodyCell;\n    }\n\n    private findDisplayedGroupNode(): void {\n        const column = this.params.column;\n        const rowNode: RowNode = this.params.node;\n\n        if (this.showingValueForOpenedParent) {\n            let pointer = rowNode.parent;\n\n            while (pointer != null) {\n                if (pointer.rowGroupColumn && column!.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {\n                    this.displayedGroupNode = pointer;\n                    break;\n                }\n                pointer = pointer.parent;\n            }\n        }\n\n        // if we didn't find a displayed group, set it to the row node\n        if (missing(this.displayedGroupNode)) {\n            this.displayedGroupNode = rowNode;\n        }\n    }\n\n    private setupShowingValueForOpenedParent(): void {\n        // note - this code depends on sortService.updateGroupDataForHiddenOpenParents, where group data\n        // is updated to reflect the dragged down parents\n        const rowNode: RowNode = this.params.node;\n        const column = this.params.column as Column;\n\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            this.showingValueForOpenedParent = false;\n            return;\n        }\n\n        // hideOpenParents means rowNode.groupData can have data for the group this column is displaying, even though\n        // this rowNode isn't grouping by the column we are displaying\n\n        // if no groupData at all, we are not showing a parent value\n        if (!rowNode.groupData) {\n            this.showingValueForOpenedParent = false;\n            return;\n        }\n\n        // this is the normal case, in that we are showing a group for which this column is configured. note that\n        // this means the Row Group is closed (if it was open, we would not be displaying it)\n        const showingGroupNode = rowNode.rowGroupColumn != null;\n        if (showingGroupNode) {\n            const keyOfGroupingColumn = rowNode.rowGroupColumn!.getId();\n            const configuredToShowThisGroupLevel = column.isRowGroupDisplayed(keyOfGroupingColumn);\n            // if showing group as normal, we didn't take group info from parent\n            if (configuredToShowThisGroupLevel) {\n                this.showingValueForOpenedParent = false;\n                return;\n            }\n        }\n\n        // see if we are showing a Group Value for the Displayed Group. if we are showing a group value, and this Row Node\n        // is not grouping by this Displayed Group, we must of gotten the value from a parent node\n        const valPresent = rowNode.groupData[column.getId()] != null;\n\n        this.showingValueForOpenedParent = valPresent;\n    }\n\n    private addValueElement(): void {\n        if (this.displayedGroupNode.footer) {\n            this.addFooterValue();\n        } else {\n            this.addGroupValue();\n            this.addChildCount();\n        }\n    }\n\n    private addGroupValue(): void {\n\n        // we try and use the cellRenderer of the column used for the grouping if we can\n        const paramsAdjusted = this.adjustParamsWithDetailsFromRelatedColumn();\n        const innerCompDetails = this.getInnerCompDetails(paramsAdjusted);\n\n        const { valueFormatted, value } = paramsAdjusted;\n        const valueWhenNoRenderer = valueFormatted != null ? valueFormatted : value;\n\n        this.comp.setInnerRenderer(innerCompDetails, valueWhenNoRenderer);\n    }\n\n    private adjustParamsWithDetailsFromRelatedColumn(): GroupCellRendererParams {\n\n        const relatedColumn = this.displayedGroupNode.rowGroupColumn;\n        const column = this.params.column;\n\n        if (!relatedColumn) { return this.params; }\n\n        const notFullWidth = column != null;\n        if (notFullWidth) {\n            const showingThisRowGroup = column!.isRowGroupDisplayed(relatedColumn.getId());\n            if (!showingThisRowGroup) { return this.params; }\n        }\n\n        const params = this.params;\n\n        const { value, node } = this.params;\n        const valueFormatted = this.valueFormatterService.formatValue(relatedColumn, node, value);\n\n        // we don't update the original params, as they could of come through React,\n        // as react has RowGroupCellRenderer, which means the params could be props which\n        // would be read only\n        const paramsAdjusted = {\n            ...params,\n            valueFormatted: valueFormatted\n        };\n\n        return paramsAdjusted;\n    }\n\n    private addFooterValue(): void {\n        const footerValueGetter = this.params.footerValueGetter;\n        let footerValue = '';\n\n        if (footerValueGetter) {\n            // params is same as we were given, except we set the value as the item to display\n            const paramsClone = cloneObject(this.params);\n            paramsClone.value = this.params.value;\n\n            if (typeof footerValueGetter === 'function') {\n                footerValue = footerValueGetter(paramsClone);\n            } else if (typeof footerValueGetter === 'string') {\n                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);\n            } else {\n                console.warn('AG Grid: footerValueGetter should be either a function or a string (expression)');\n            }\n        } else {\n            footerValue = 'Total ' + (this.params.value != null ? this.params.value : '');\n        }\n\n        const innerCompDetails = this.getInnerCompDetails(this.params);\n\n        this.comp.setInnerRenderer(innerCompDetails, footerValue);\n    }\n\n    private getInnerCompDetails(params: GroupCellRendererParams): UserCompDetails | undefined {\n\n        // for full width rows, we don't do any of the below\n        if (params.fullWidth) {\n            return this.userComponentFactory.getFullWidthGroupRowInnerCellRenderer(\n                this.gridOptions.groupRowRendererParams, params);\n        }\n\n        // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country\n        // and then rating, we will use the country cell renderer for each country group row and likewise the rating\n        // cell renderer for each rating group row.\n        //\n        // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers\n        // of the grouped columns.\n        //\n        // so we check and use in the following order:\n        //\n        // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)\n        // 2) groupedColDef.cellRenderer of the grouped column\n        // 3) groupedColDef.cellRendererParams.innerRenderer\n\n        // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer\n        const innerCompDetails = this.userComponentFactory\n            .getInnerRendererDetails(params, params);\n\n        // avoid using GroupCellRenderer again, otherwise stack overflow, as we insert same renderer again and again.\n        // this covers off chance user is grouping by a column that is also configured with GroupCellRenderer\n        const isGroupRowRenderer = (details: UserCompDetails | undefined) => details && details.componentClass == this.compClass;\n\n        if (innerCompDetails && !isGroupRowRenderer(innerCompDetails)) {\n            // use the renderer defined in cellRendererParams.innerRenderer\n            return innerCompDetails;\n        }\n\n        const relatedColumn = this.displayedGroupNode.rowGroupColumn;\n        const relatedColDef = relatedColumn ? relatedColumn.getColDef() : undefined;\n\n        if (!relatedColDef) {\n            return;\n        }\n\n        // otherwise see if we can use the cellRenderer of the column we are grouping by\n        const relatedCompDetails = this.userComponentFactory\n            .getCellRendererDetails(relatedColDef, params);\n\n        if (relatedCompDetails && !isGroupRowRenderer(relatedCompDetails)) {\n            // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it\n            return relatedCompDetails;\n        }\n\n        if (isGroupRowRenderer(relatedCompDetails) &&\n            relatedColDef.cellRendererParams &&\n            relatedColDef.cellRendererParams.innerRenderer) {\n            // edge case - this comes from a column which has been grouped dynamically, that has a renderer 'group'\n            // and has an inner cell renderer\n            const res = this.userComponentFactory.getInnerRendererDetails(relatedColDef.cellRendererParams, params);\n            return res;\n        }\n    }\n\n    private addChildCount(): void {\n        // only include the child count if it's included, eg if user doing custom aggregation,\n        // then this could be left out, or set to -1, ie no child count\n        if (this.params.suppressCount) { return; }\n\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));\n\n        // filtering changes the child count, so need to cater for it\n        this.updateChildCount();\n    }\n\n    private updateChildCount(): void {\n        const allChildrenCount = this.displayedGroupNode.allChildrenCount;\n        const showingGroupForThisNode = this.isShowRowGroupForThisRow();\n        const showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;\n        const countString = showCount ? `(${allChildrenCount})` : ``;\n        this.comp.setChildCount(countString);\n    }\n\n    private isShowRowGroupForThisRow(): boolean {\n        if (this.gridOptionsWrapper.isTreeData()) { return true; }\n\n        const rowGroupColumn = this.displayedGroupNode.rowGroupColumn;\n\n        if (!rowGroupColumn) { return false; }\n\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());\n\n        return thisColumnIsInterested;\n    }\n\n    private addExpandAndContract(): void {\n        const params = this.params;\n        const eExpandedIcon = createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);\n        const eContractedIcon = createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);\n\n        if (eExpandedIcon) {\n            this.eExpanded.appendChild(eExpandedIcon);\n        }\n\n        if (eContractedIcon) {\n            this.eContracted.appendChild(eContractedIcon);\n        }\n\n        const eGroupCell = params.eGridCell;\n\n        // if editing groups, then double click is to start editing\n        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {\n            this.addManagedListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));\n        }\n\n        this.addManagedListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eContracted, 'click', this.onExpandClicked.bind(this));\n\n        // expand / contract as the user hits enter\n        this.addManagedListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));\n        this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));\n\n        this.showExpandAndContractIcons();\n\n        // because we don't show the expand / contract when there are no children, we need to check every time\n        // the number of children change.\n        const expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_GROUP_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);\n    }\n\n    private onExpandClicked(mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        // so if we expand a node, it does not also get selected.\n        stopPropagationForAgGrid(mouseEvent);\n\n        this.onExpandOrContract(mouseEvent);\n    }\n\n    private onExpandOrContract(e: MouseEvent | KeyboardEvent): void {\n        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row\n        const rowNode: RowNode = this.displayedGroupNode;\n        const nextExpandState = !rowNode.expanded;\n        rowNode.setExpanded(nextExpandState, e);\n    }\n\n    private isExpandable(): boolean {\n        if (this.showingValueForOpenedParent) { return true; }\n\n        const rowNode = this.displayedGroupNode;\n        const reducedLeafNode = this.columnModel.isPivotMode() && rowNode.leafGroup;\n        const expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;\n\n        if (!expandableGroup) { return false; }\n\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === 'string';\n\n        if (displayingForOneColumnOnly) {\n            const showing = this.isShowRowGroupForThisRow();\n            return showing;\n        }\n\n        return true;\n    }\n\n    private showExpandAndContractIcons(): void {\n        const { params, displayedGroupNode: displayedGroup, columnModel } = this;\n        const { node } = params;\n\n        const isExpandable = this.isExpandable();\n\n        if (isExpandable) {\n            // if expandable, show one based on expand state.\n            // if we were dragged down, means our parent is always expanded\n            const expanded = this.showingValueForOpenedParent ? true : node.expanded;\n            this.comp.setExpandedDisplayed(expanded);\n            this.comp.setContractedDisplayed(!expanded);\n        } else {\n            // it not expandable, show neither\n            this.comp.setExpandedDisplayed(false);\n            this.comp.setContractedDisplayed(false);\n        }\n\n        // compensation padding for leaf nodes, so there is blank space instead of the expand icon\n        const pivotMode = columnModel.isPivotMode();\n        const pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;\n        const addExpandableCss = isExpandable && !pivotModeAndLeafGroup;\n        const isTotalFooterNode = node.footer && node.level === -1;\n\n        this.comp.addOrRemoveCssClass('ag-cell-expandable', addExpandableCss);\n        this.comp.addOrRemoveCssClass('ag-row-group', addExpandableCss);\n\n        if (pivotMode) {\n            this.comp.addOrRemoveCssClass('ag-pivot-leaf-group', pivotModeAndLeafGroup);\n        } else if (!isTotalFooterNode) {\n            this.comp.addOrRemoveCssClass('ag-row-group-leaf-indent', !addExpandableCss);\n        }\n    }\n\n    private onRowNodeIsExpandableChanged(): void {\n        // maybe if no children now, we should hide the expand / contract icons\n        this.showExpandAndContractIcons();\n\n        // if we have no children, this impacts the indent\n        this.setIndent();\n\n        this.refreshAriaExpanded();\n    }\n\n    private setupIndent(): void {\n        // only do this if an indent - as this overwrites the padding that\n        // the theme set, which will make things look 'not aligned' for the\n        // first group level.\n        const node: RowNode = this.params.node;\n        const suppressPadding = this.params.suppressPadding;\n\n        if (!suppressPadding) {\n            this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));\n            this.setIndent();\n        }\n    }\n\n    private setIndent(): void {\n        if (this.gridOptionsWrapper.isGroupHideOpenParents()) { return; }\n\n        const params = this.params;\n        const rowNode: RowNode = params.node;\n        // if we are only showing one group column, we don't want to be indenting based on level\n        const fullWithRow = !!params.colDef;\n        const treeData = this.gridOptionsWrapper.isTreeData();\n        const manyDimensionThisColumn = !fullWithRow || treeData || params.colDef!.showRowGroup === true;\n        const paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;\n        const userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;\n\n        if (userProvidedPaddingPixelsTheDeprecatedWay) {\n            doOnce(() => console.warn('AG Grid: cellRendererParams.padding no longer works, it was deprecated in since v14.2 and removed in v26, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the AG Grid documentation page for Themes, in particular the property $row-group-indent-size.'), 'groupCellRenderer->doDeprecatedWay');\n        }\n\n        if (this.indentClass) {\n            this.comp.addOrRemoveCssClass(this.indentClass, false);\n        }\n\n        this.indentClass = 'ag-row-group-indent-' + paddingCount;\n        this.comp.addOrRemoveCssClass(this.indentClass, true);\n    }\n\n    private addFullWidthRowDraggerIfNeeded(): void {\n        if (!this.params.fullWidth || !this.params.rowDrag) { return; }\n\n        const rowDragComp = new RowDragComp(() => this.params.value, this.params.node);\n        this.createManagedBean(rowDragComp, this.context);\n\n        this.eGui.insertAdjacentElement('afterbegin', rowDragComp.getGui());\n    }\n\n    private isUserWantsSelected(): boolean {\n        const paramsCheckbox = this.params.checkbox;\n\n        if (typeof paramsCheckbox === 'function') { return paramsCheckbox(this.params); }\n\n        return paramsCheckbox === true;\n    }\n\n    private addCheckboxIfNeeded(): void {\n        const rowNode = this.displayedGroupNode;\n        const checkboxNeeded = this.isUserWantsSelected() &&\n            // footers cannot be selected\n            !rowNode.footer &&\n            // pinned rows cannot be selected\n            !rowNode.rowPinned &&\n            // details cannot be selected\n            !rowNode.detail;\n\n        if (checkboxNeeded) {\n            const cbSelectionComponent = new CheckboxSelectionComponent();\n            this.getContext().createBean(cbSelectionComponent);\n\n            cbSelectionComponent.init({ rowNode: rowNode, column: this.params.column });\n            this.eCheckbox.appendChild(cbSelectionComponent.getGui());\n            this.addDestroyFunc(() => this.getContext().destroyBean(cbSelectionComponent));\n        }\n\n        this.comp.setCheckboxVisible(checkboxNeeded);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const enterKeyPressed = event.key === KeyCode.ENTER;\n\n        if (!enterKeyPressed || this.params.suppressEnterExpand) { return; }\n\n        const cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);\n\n        if (cellEditable) { return; }\n\n        this.onExpandOrContract(event);\n    }\n\n    private onCellDblClicked(mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        // we want to avoid acting on double click events on the expand / contract icon,\n        // as that icons already has expand / collapse functionality on it. otherwise if\n        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which\n        // is open->close->open, however double click should be open->close only.\n        const targetIsExpandIcon\n            = isElementInEventPath(this.eExpanded, mouseEvent)\n            || isElementInEventPath(this.eContracted, mouseEvent);\n\n        if (!targetIsExpandIcon) {\n            this.onExpandOrContract(mouseEvent);\n        }\n    }\n}\n"]}