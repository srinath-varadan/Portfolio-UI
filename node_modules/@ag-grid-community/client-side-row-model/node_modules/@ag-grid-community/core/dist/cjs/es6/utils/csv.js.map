{"version":3,"sources":["../../../src/ts/utils/csv.ts"],"names":[],"mappings":";;;;;;;;AAAA,gDAAgD;AAChD,8DAA8D;AAC9D,SAAgB,aAAa,CAAC,OAAe,EAAE,SAAS,GAAG,GAAG;IAC1D,MAAM,IAAI,GAAY,EAAE,CAAC;IACzB,MAAM,SAAS,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,CAAC;IAEnE,IAAI,iBAAiB,GAAG,KAAK,CAAC;IAE9B,IAAI,OAAO,KAAK,EAAE,EAAE;QAAE,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAAE;IAEtC,4FAA4F;IAC5F,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,OAAO,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE;QAC/E,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtC,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;QACvC,MAAM,gBAAgB,GAAG,GAAG,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBACZ,iCAAiC;gBACjC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;aAClB;YAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE;gBACpB,oCAAoC;gBACpC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;aAC1B;QACL,CAAC,CAAC;QAEF,gBAAgB,EAAE,CAAC;QAEnB,IAAI,WAAW,KAAK,GAAG,EAAE;YACrB,IAAI,iBAAiB,EAAE;gBACnB,IAAI,QAAQ,KAAK,GAAG,EAAE;oBAClB,wBAAwB;oBACxB,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC;oBACzB,QAAQ,EAAE,CAAC;iBACd;qBAAM;oBACH,oBAAoB;oBACpB,iBAAiB,GAAG,KAAK,CAAC;iBAC7B;gBAED,SAAS;aACZ;iBAAM,IAAI,YAAY,KAAK,SAAS,IAAI,YAAY,KAAK,SAAS,IAAI,SAAS,CAAC,YAAY,CAAC,EAAE;gBAC5F,qBAAqB;gBACrB,iBAAiB,GAAG,IAAI,CAAC;gBACzB,SAAS;aACZ;SACJ;QAED,IAAI,CAAC,iBAAiB,EAAE;YACpB,IAAI,WAAW,KAAK,SAAS,EAAE;gBAC3B,sBAAsB;gBACtB,MAAM,EAAE,CAAC;gBACT,gBAAgB,EAAE,CAAC;gBAEnB,SAAS;aACZ;iBAAM,IAAI,SAAS,CAAC,WAAW,CAAC,EAAE;gBAC/B,mBAAmB;gBACnB,MAAM,GAAG,CAAC,CAAC;gBACX,GAAG,EAAE,CAAC;gBACN,gBAAgB,EAAE,CAAC;gBAEnB,IAAI,WAAW,KAAK,IAAI,IAAI,QAAQ,KAAK,IAAI,EAAE;oBAC3C,kDAAkD;oBAClD,QAAQ,EAAE,CAAC;iBACd;gBAED,SAAS;aACZ;SACJ;QAED,0CAA0C;QAC1C,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,WAAW,CAAC;KACpC;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAzED,sCAyEC","file":"csv.js","sourcesContent":["// Based on https://stackoverflow.com/a/14991797\n// This will parse a delimited string into an array of arrays.\nexport function stringToArray(strData: string, delimiter = ','): string[][] {\n    const data: any[][] = [];\n    const isNewline = (char: string) => char === '\\r' || char === '\\n';\n\n    let insideQuotedField = false;\n\n    if (strData === '') { return [['']]; }\n\n    // iterate over each character, keep track of current row and column (of the returned array)\n    for (let row = 0, column = 0, position = 0; position < strData.length; position++) {\n        const previousChar = strData[position - 1];\n        const currentChar = strData[position];\n        const nextChar = strData[position + 1];\n        const ensureDataExists = () => {\n            if (!data[row]) {\n                // create row if it doesn't exist\n                data[row] = [];\n            }\n\n            if (!data[row][column]) {\n                // create column if it doesn't exist\n                data[row][column] = '';\n            }\n        };\n\n        ensureDataExists();\n\n        if (currentChar === '\"') {\n            if (insideQuotedField) {\n                if (nextChar === '\"') {\n                    // unescape double quote\n                    data[row][column] += '\"';\n                    position++;\n                } else {\n                    // exit quoted field\n                    insideQuotedField = false;\n                }\n\n                continue;\n            } else if (previousChar === undefined || previousChar === delimiter || isNewline(previousChar)) {\n                // enter quoted field\n                insideQuotedField = true;\n                continue;\n            }\n        }\n\n        if (!insideQuotedField) {\n            if (currentChar === delimiter) {\n                // move to next column\n                column++;\n                ensureDataExists();\n\n                continue;\n            } else if (isNewline(currentChar)) {\n                // move to next row\n                column = 0;\n                row++;\n                ensureDataExists();\n\n                if (currentChar === '\\r' && nextChar === '\\n') {\n                    // skip over second newline character if it exists\n                    position++;\n                }\n\n                continue;\n            }\n        }\n\n        // add current character to current column\n        data[row][column] += currentChar;\n    }\n\n    return data;\n}\n"]}