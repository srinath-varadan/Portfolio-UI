{"version":3,"sources":["../../../src/ts/rendering/overlays/overlayWrapperComponent.ts"],"names":[],"mappings":"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","file":"overlayWrapperComponent.js","sourcesContent":["import { Autowired, PostConstruct } from '../../context/context';\nimport { Component } from '../../widgets/component';\nimport { UserComponentFactory } from '../../components/framework/userComponentFactory';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { ILoadingOverlayComp, ILoadingOverlayParams } from './loadingOverlayComponent';\nimport { INoRowsOverlayComp, INoRowsOverlayParams } from './noRowsOverlayComponent';\nimport { AgPromise } from '../../utils';\nimport { clearElement } from '../../utils/dom';\nimport { LayoutCssClasses, LayoutFeature, LayoutView, UpdateLayoutClassesParams } from \"../../styling/layoutFeature\";\nimport { PaginationProxy } from \"../../pagination/paginationProxy\";\nimport { Events } from \"../../eventKeys\";\nimport { GridApi } from \"../../gridApi\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { WithoutGridCommon } from '../../interfaces/iCommon';\n\nenum LoadingType { Loading, NoRows }\n\nexport class OverlayWrapperComponent extends Component implements LayoutView {\n\n    // wrapping in outer div, and wrapper, is needed to center the loading icon\n    // The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/\n    private static TEMPLATE = /* html */`\n        <div class=\"ag-overlay\" aria-hidden=\"true\">\n            <div class=\"ag-overlay-panel\">\n                <div class=\"ag-overlay-wrapper\" ref=\"eOverlayWrapper\"></div>\n            </div>\n        </div>`;\n\n    @Autowired('userComponentFactory') userComponentFactory: UserComponentFactory;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    @RefSelector('eOverlayWrapper') eOverlayWrapper: HTMLElement;\n\n    private activeOverlay: ILoadingOverlayComp;\n    private inProgress = false;\n    private destroyRequested = false;\n    private manuallyDisplayed: boolean = false;\n\n    constructor() {\n        super(OverlayWrapperComponent.TEMPLATE);\n    }\n\n    public updateLayoutClasses(cssClass: string, params: UpdateLayoutClassesParams): void {\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\n        overlayWrapperClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        overlayWrapperClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n        overlayWrapperClassList.toggle(LayoutCssClasses.PRINT, params.print);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.createManagedBean(new LayoutFeature(this));\n        this.setDisplayed(false);\n\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));\n\n        if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {\n            this.showLoadingOverlay();\n        }\n\n        this.gridApi.registerOverlayWrapperComp(this);\n    }\n\n    private setWrapperTypeClass(loadingType: LoadingType): void {\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\n        overlayWrapperClassList.toggle('ag-overlay-loading-wrapper', loadingType === LoadingType.Loading);\n        overlayWrapperClassList.toggle('ag-overlay-no-rows-wrapper', loadingType === LoadingType.NoRows);\n    }\n\n    public showLoadingOverlay(): void {\n        if (this.gridOptionsWrapper.isSuppressLoadingOverlay()) { return; }\n\n        const params: WithoutGridCommon<ILoadingOverlayParams> = {};\n\n        const compDetails = this.userComponentFactory.getLoadingOverlayCompDetails(params);\n        const promise = compDetails.newAgStackInstance();\n\n        this.showOverlay(promise, LoadingType.Loading);\n    }\n\n    public showNoRowsOverlay(): void {\n        if (this.gridOptionsWrapper.isSuppressNoRowsOverlay()) { return; }\n\n        const params: WithoutGridCommon<INoRowsOverlayParams> = {};\n\n        const compDetails = this.userComponentFactory.getNoRowsOverlayCompDetails(params);\n        const promise = compDetails.newAgStackInstance();\n\n        this.showOverlay(promise, LoadingType.NoRows);\n    }\n\n    private showOverlay(workItem: AgPromise<ILoadingOverlayComp | INoRowsOverlayComp> | null, type: LoadingType): void {\n        if (this.inProgress) {\n            return;\n        }\n\n        this.setWrapperTypeClass(type);\n        this.destroyActiveOverlay();\n\n        this.inProgress = true;\n\n        if (workItem) {\n            workItem.then(comp => {\n                this.inProgress = false;\n\n                this.eOverlayWrapper.appendChild(comp!.getGui());\n                this.activeOverlay = comp!;\n\n                if (this.destroyRequested) {\n                    this.destroyRequested = false;\n                    this.destroyActiveOverlay();\n                }\n            });\n        }\n\n        this.manuallyDisplayed = this.columnModel.isReady() && !this.paginationProxy.isEmpty();\n        this.setDisplayed(true);\n    }\n\n    private destroyActiveOverlay(): void {\n        if (this.inProgress) {\n            this.destroyRequested = true;\n            return;\n        }\n\n        if (!this.activeOverlay) {\n            return;\n        }\n\n        this.activeOverlay = this.getContext().destroyBean(this.activeOverlay)!;\n\n        clearElement(this.eOverlayWrapper);\n    }\n\n    public hideOverlay(): void {\n        this.manuallyDisplayed = false;\n        this.destroyActiveOverlay();\n        this.setDisplayed(false);\n    }\n\n    public destroy(): void {\n        this.destroyActiveOverlay();\n        super.destroy();\n    }\n\n    private showOrHideOverlay(): void {\n        const isEmpty = this.paginationProxy.isEmpty();\n        const isSuppressNoRowsOverlay = this.gridOptionsWrapper.isSuppressNoRowsOverlay();\n        if (isEmpty && !isSuppressNoRowsOverlay) {\n            this.showNoRowsOverlay();\n        } else {\n            this.hideOverlay();\n        }\n    }\n\n    private onRowDataChanged(): void {\n        this.showOrHideOverlay();\n    }\n\n    private onNewColumnsLoaded(): void {\n        // hide overlay if columns and rows exist, this can happen if columns are loaded after data.\n        // this problem exists before of the race condition between the services (column controller in this case)\n        // and the view (grid panel). if the model beans were all initialised first, and then the view beans second,\n        // this race condition would not happen.\n        if (this.columnModel.isReady() && !this.paginationProxy.isEmpty() && !this.manuallyDisplayed) {\n            this.hideOverlay();\n        }\n    }\n\n}\n"]}