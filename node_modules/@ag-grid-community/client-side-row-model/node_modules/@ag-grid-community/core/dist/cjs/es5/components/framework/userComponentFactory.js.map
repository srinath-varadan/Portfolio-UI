{"version":3,"sources":["../../../src/ts/components/framework/userComponentFactory.ts"],"names":[],"mappings":"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","file":"userComponentFactory.js","sourcesContent":["import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, Bean, Optional } from \"../../context/context\";\nimport { CellEditorSelectorFunc, CellEditorSelectorResult, CellRendererSelectorFunc, ColDef, ColGroupDef } from \"../../entities/colDef\";\nimport { GridOptions } from \"../../entities/gridOptions\";\nimport { ToolPanelDef } from \"../../entities/sideBar\";\nimport { IFloatingFilterParams } from \"../../filter/floating/floatingFilter\";\nimport { IHeaderParams } from \"../../headerRendering/cells/column/headerComp\";\nimport { IHeaderGroupParams } from \"../../headerRendering/cells/columnGroup/headerGroupComp\";\nimport { ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { IFilterDef, IFilterParams } from \"../../interfaces/iFilter\";\nimport { IRichCellEditorParams } from \"../../interfaces/iRichCellEditorParams\";\nimport { ISetFilterParams } from \"../../interfaces/iSetFilter\";\nimport { IStatusPanelParams, StatusPanelDef } from \"../../interfaces/iStatusPanel\";\nimport { IToolPanelParams } from \"../../interfaces/iToolPanel\";\nimport { GroupCellRendererParams } from \"../../rendering/cellRenderers/groupCellRendererCtrl\";\nimport { ICellRendererParams, ISetFilterCellRendererParams } from \"../../rendering/cellRenderers/iCellRenderer\";\nimport { IDateParams } from \"../../rendering/dateComponent\";\nimport { ILoadingOverlayParams } from \"../../rendering/overlays/loadingOverlayComponent\";\nimport { INoRowsOverlayParams } from \"../../rendering/overlays/noRowsOverlayComponent\";\nimport { ITooltipParams } from \"../../rendering/tooltipComponent\";\nimport { AgPromise } from \"../../utils\";\nimport { mergeDeep } from '../../utils/object';\nimport { AgComponentUtils } from \"./agComponentUtils\";\nimport { ComponentMetadata, ComponentMetadataProvider } from \"./componentMetadataProvider\";\nimport {\n    CellEditorComponent,\n    CellRendererComponent,\n    ComponentType,\n    DateComponent,\n    FilterComponent,\n    FloatingFilterComponent,\n    FullWidth,\n    FullWidthDetail,\n    FullWidthGroup,\n    FullWidthLoading,\n    HeaderComponent,\n    HeaderGroupComponent,\n    InnerRendererComponent,\n    LoadingOverlayComponent,\n    NoRowsOverlayComponent,\n    StatusPanelComponent,\n    ToolPanelComponent,\n    TooltipComponent\n} from \"./componentTypes\";\nimport { FrameworkComponentWrapper } from \"./frameworkComponentWrapper\";\nimport { UserComponentRegistry } from \"./userComponentRegistry\";\nimport { FloatingFilterMapper } from '../../filter/floating/floatingFilterMapper';\nimport { ModuleNames } from '../../modules/moduleNames';\nimport { ModuleRegistry } from '../../modules/moduleRegistry';\nimport { doOnce } from \"../../utils/function\";\nimport { AgGridCommon, WithoutGridCommon } from \"../../interfaces/iCommon\";\n\nexport type DefinitionObject =\n    GridOptions\n    | ColDef\n    | ColGroupDef\n    | IFilterDef\n    | ISetFilterParams\n    | IRichCellEditorParams\n    | ToolPanelDef\n    | StatusPanelDef;\n\nexport interface UserCompDetails {\n    componentClass: any;\n    componentFromFramework: boolean;\n    params: any;\n    type: ComponentType;\n    popupFromSelector?: boolean,\n    popupPositionFromSelector?: string,\n    newAgStackInstance: () => AgPromise<any>;\n}\n\nconst ANNOTATIONS = '__annotations__';\n\n@Bean('userComponentFactory')\nexport class UserComponentFactory extends BeanStub {\n\n    @Autowired('gridOptions') private readonly gridOptions: GridOptions;\n    @Autowired('agComponentUtils') private readonly agComponentUtils: AgComponentUtils;\n    @Autowired('componentMetadataProvider') private readonly componentMetadataProvider: ComponentMetadataProvider;\n    @Autowired('userComponentRegistry') private readonly userComponentRegistry: UserComponentRegistry;\n    @Optional('frameworkComponentWrapper') private readonly frameworkComponentWrapper: FrameworkComponentWrapper;\n\n    public getHeaderCompDetails(colDef: ColDef, params: WithoutGridCommon<IHeaderParams>): UserCompDetails | undefined {\n        return this.getCompDetails(colDef, HeaderComponent, 'agColumnHeader', params);\n    }\n\n    public getHeaderGroupCompDetails(params: WithoutGridCommon<IHeaderGroupParams>): UserCompDetails | undefined {\n        const colGroupDef = params.columnGroup.getColGroupDef()!;\n        return this.getCompDetails(colGroupDef, HeaderGroupComponent, 'agColumnGroupHeader', params);\n    }\n\n    // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.\n    // so we have to pass the type in.\n    public getFullWidthCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidth, null, params, true)!;\n    }\n\n    public getFullWidthLoadingCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthLoading, 'agLoadingCellRenderer', params, true)!;\n    }\n\n    public getFullWidthGroupCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthGroup, 'agGroupRowRenderer', params, true)!;\n    }\n\n    public getFullWidthDetailCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthDetail, 'agDetailCellRenderer', params, true)!;\n    }\n\n    // CELL RENDERER\n    public getInnerRendererDetails(def: GroupCellRendererParams, params: WithoutGridCommon<ICellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n    public getFullWidthGroupRowInnerCellRenderer(def: any, params: WithoutGridCommon<ICellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n    public getCellRendererDetails(def: ColDef | IRichCellEditorParams, params: WithoutGridCommon<ICellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n\n    // CELL EDITOR\n    public getCellEditorDetails(def: ColDef, params: WithoutGridCommon<ICellEditorParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellEditorComponent, 'agCellEditor', params, true);\n    }\n\n    // FILTER\n    public getFilterDetails(def: IFilterDef, params: WithoutGridCommon<IFilterParams>, defaultFilter: string): UserCompDetails | undefined {\n        return this.getCompDetails(def, FilterComponent, defaultFilter, params, true);\n    }\n\n    public getDateCompDetails(params: WithoutGridCommon<IDateParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, DateComponent, 'agDateInput', params, true)!;\n    }\n\n    public getLoadingOverlayCompDetails(params: WithoutGridCommon<ILoadingOverlayParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, LoadingOverlayComponent, 'agLoadingOverlay', params, true)!;\n    }\n\n    public getNoRowsOverlayCompDetails(params: WithoutGridCommon<INoRowsOverlayParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, NoRowsOverlayComponent, 'agNoRowsOverlay', params, true)!;\n    }\n\n    public getTooltipCompDetails(params: WithoutGridCommon<ITooltipParams>): UserCompDetails {\n        return this.getCompDetails(params.colDef!, TooltipComponent, 'agTooltipComponent', params, true)!;\n    }\n\n    public getSetFilterCellRendererDetails(def: ISetFilterParams, params: WithoutGridCommon<ISetFilterCellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n\n    public getFloatingFilterCompDetails(def: IFilterDef, params: WithoutGridCommon<IFloatingFilterParams<any>>, defaultFloatingFilter: string | null): UserCompDetails | undefined {\n        return this.getCompDetails(def, FloatingFilterComponent, defaultFloatingFilter, params);\n    }\n\n    public getToolPanelCompDetails(toolPanelDef: ToolPanelDef, params: WithoutGridCommon<IToolPanelParams>): UserCompDetails {\n        return this.getCompDetails(toolPanelDef, ToolPanelComponent, null, params, true)!;\n    }\n\n    public getStatusPanelCompDetails(def: StatusPanelDef, params: WithoutGridCommon<IStatusPanelParams>): UserCompDetails {\n        return this.getCompDetails(def, StatusPanelComponent, null, params, true)!;\n    }\n\n    private getCompDetails(defObject: DefinitionObject, type: ComponentType, defaultName: string | null | undefined, params: any, mandatory = false): UserCompDetails | undefined {\n\n        const { propertyName, cellRenderer } = type;\n\n        let { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector } = this.getCompKeys(defObject, type, params);\n\n        const lookupFromRegistry = (key: string) => {\n            const item = this.userComponentRegistry.retrieve(key);\n            if (item) {\n                jsComp = !item.componentFromFramework ? item.component : undefined;\n                fwComp = item.componentFromFramework ? item.component : undefined;\n            }\n        };\n\n        // if compOption is a string, means we need to look the item up\n        if (compName != null) {\n            lookupFromRegistry(compName);\n        }\n\n        // if lookup brought nothing back, and we have a default, lookup the default\n        if (jsComp == null && fwComp == null && defaultName != null) {\n            lookupFromRegistry(defaultName);\n        }\n\n        // if we have a comp option, and it's a function, replace it with an object equivalent adaptor\n        if (jsComp && cellRenderer && !this.agComponentUtils.doesImplementIComponent(jsComp)) {\n            jsComp = this.agComponentUtils.adaptFunction(propertyName, jsComp);\n        }\n\n        if (!jsComp && !fwComp) {\n            if (mandatory) {\n                console.error(`Could not find component ${compName}, did you forget to configure this component?`);\n            }\n            return;\n        }\n\n        const paramsMerged = this.mergeParamsWithApplicationProvidedParams(defObject, type, params, paramsFromSelector);\n\n        const componentFromFramework = jsComp == null;\n        const componentClass = jsComp ? jsComp : fwComp;\n\n        return {\n            componentFromFramework,\n            componentClass,\n            params: paramsMerged,\n            type: type,\n            popupFromSelector,\n            popupPositionFromSelector,\n            newAgStackInstance: () => this.newAgStackInstance(componentClass, componentFromFramework, paramsMerged, type)\n        };\n    }\n\n    private getCompKeys(defObject: DefinitionObject, type: ComponentType, params?: any): {\n        compName?: string,\n        jsComp: any,\n        fwComp: any,\n        paramsFromSelector: any,\n        popupFromSelector?: boolean,\n        popupPositionFromSelector?: string\n    } {\n\n        const { propertyName } = type;\n\n        let compName: string | undefined;\n        let jsComp: any;\n        let fwComp: any;\n\n        let paramsFromSelector: any;\n        let popupFromSelector: boolean | undefined;\n        let popupPositionFromSelector: string | undefined;\n\n        // there are two types of js comps, class based and func based. we can only check for\n        // class based, by checking if getGui() exists. no way to differentiate js func based vs eg react func based\n        // const isJsClassComp = (comp: any) => this.agComponentUtils.doesImplementIComponent(comp);\n        // const fwActive = this.frameworkComponentWrapper != null;\n\n        // pull from defObject if available\n        if (defObject) {\n            const defObjectAny = defObject as any;\n\n            // if selector, use this\n            const selectorFunc: CellEditorSelectorFunc | CellRendererSelectorFunc = defObjectAny[propertyName + 'Selector'];\n            const selectorRes = selectorFunc ? selectorFunc(params) : null;\n\n            const assignComp = (providedJsComp: any, providedFwComp: any) => {\n\n                const xxxFrameworkDeprecatedWarn = () => {\n                    const warningMessage = `AG Grid: As of v27, the property ${propertyName}Framework is deprecated. The property ${propertyName} can now be used for JavaScript AND Framework Components.`;\n                    doOnce(() => console.warn(warningMessage), `UserComponentFactory.${propertyName}FrameworkDeprecated`);\n                };\n\n                if (typeof providedJsComp === 'string') {\n                    compName = providedJsComp as string;\n                } else if (typeof providedFwComp === 'string') {\n                    xxxFrameworkDeprecatedWarn();\n                    compName = providedFwComp as string;\n                    // comp===true for filters, which means use the default comp\n                } else if (providedJsComp != null && providedJsComp !== true) {\n                    const isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(providedJsComp);\n                    if (isFwkComp) {\n                        fwComp = providedJsComp;\n                    } else {\n                        jsComp = providedJsComp;\n                    }\n                } else if (providedFwComp != null) {\n                    xxxFrameworkDeprecatedWarn();\n                    fwComp = providedFwComp;\n                }\n            };\n\n            if (selectorRes) {\n                if (selectorRes.frameworkComponent != null) {\n                    const warningMessage = `AG Grid: As of v27, the return for ${propertyName}Selector has attributes [component, params] only. The attribute frameworkComponent is deprecated. You should now return back Framework Components using the 'component' attribute and the grid works out if it's a framework component or not.`;\n                    doOnce(() => console.warn(warningMessage), `UserComponentFactory.${propertyName}FrameworkSelectorDeprecated`);\n                    assignComp(selectorRes.frameworkComponent, undefined);\n                } else {\n                    assignComp(selectorRes.component, undefined);\n                }\n                paramsFromSelector = selectorRes.params;\n                popupFromSelector = (selectorRes as CellEditorSelectorResult).popup;\n                popupPositionFromSelector = (selectorRes as CellEditorSelectorResult).popupPosition;\n            } else {\n                // if no selector, or result of selector is empty, take from defObject\n                assignComp(defObjectAny[propertyName], defObjectAny[propertyName + 'Framework']);\n            }\n        }\n\n        return { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector };\n    }\n\n    private newAgStackInstance(\n        ComponentClass: any,\n        componentFromFramework: boolean,\n        params: any,\n        type: ComponentType\n    ): AgPromise<any> {\n        const propertyName = type.propertyName;\n        const jsComponent = !componentFromFramework;\n        // using javascript component\n        let instance: any;\n\n        if (jsComponent) {\n            instance = new ComponentClass();\n        } else {\n            // Using framework component\n            const thisComponentConfig: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n            instance = this.frameworkComponentWrapper.wrap(\n                ComponentClass,\n                thisComponentConfig.mandatoryMethodList,\n                thisComponentConfig.optionalMethodList,\n                type\n            );\n        }\n\n        const deferredInit = this.initComponent(instance, params);\n\n        if (deferredInit == null) {\n            return AgPromise.resolve(instance);\n        }\n        return (deferredInit as AgPromise<void>).then(() => instance);\n    }\n\n    // used by Floating Filter\n    public mergeParamsWithApplicationProvidedParams(\n        defObject: DefinitionObject,\n        type: ComponentType,\n        paramsFromGrid: any,\n        paramsFromSelector: any = null\n    ): any {\n        const params: AgGridCommon = {\n            context: this.gridOptionsWrapper.getContext(),\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            api: this.gridOptionsWrapper.getApi()!\n        };\n\n        mergeDeep(params, paramsFromGrid);\n\n        // pull user params from either the old prop name and new prop name\n        // eg either cellRendererParams and cellCompParams\n        const defObjectAny = defObject as any;\n        const userParams = defObjectAny && defObjectAny[type.propertyName + 'Params'];\n\n        if (typeof userParams === 'function') {\n            const userParamsFromFunc = userParams(paramsFromGrid);\n            mergeDeep(params, userParamsFromFunc);\n        } else if (typeof userParams === 'object') {\n            mergeDeep(params, userParams);\n        }\n\n        mergeDeep(params, paramsFromSelector);\n\n        return params;\n    }\n\n    private initComponent(component: any, params: any): AgPromise<void> | void {\n        this.context.createBean(component);\n        if (component.init == null) { return; }\n        return component.init(params);\n    }\n\n    public getDefaultFloatingFilterType(def: IFilterDef): string | null {\n        if (def == null) { return null; }\n\n        let defaultFloatingFilterType: string | null = null;\n\n        let { compName, jsComp, fwComp }\n            = this.getCompKeys(def, FilterComponent);\n\n        if (compName) {\n            // will be undefined if not in the map\n            defaultFloatingFilterType = FloatingFilterMapper.getFloatingFilterType(compName);\n        } else {\n            const usingDefaultFilter = (jsComp == null && fwComp == null) && (def.filter === true);\n            if (usingDefaultFilter) {\n                const setFilterModuleLoaded = ModuleRegistry.isRegistered(ModuleNames.SetFilterModule);\n                defaultFloatingFilterType = setFilterModuleLoaded ? 'agSetColumnFloatingFilter' : 'agTextColumnFloatingFilter';\n            }\n        }\n\n        return defaultFloatingFilterType;\n    }\n}\n"]}