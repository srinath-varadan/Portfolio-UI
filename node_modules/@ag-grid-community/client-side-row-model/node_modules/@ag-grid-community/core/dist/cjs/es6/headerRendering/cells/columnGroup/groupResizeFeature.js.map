{"version":3,"sources":["../../../src/ts/headerRendering/cells/columnGroup/groupResizeFeature.ts"],"names":[],"mappings":"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","file":"groupResizeFeature.js","sourcesContent":["import { ColumnModel, ColumnResizeSet } from \"../../../columns/columnModel\";\nimport { Constants } from \"../../../constants/constants\";\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { AutoWidthCalculator } from \"../../../rendering/autoWidthCalculator\";\nimport { HorizontalResizeService } from \"../../common/horizontalResizeService\";\nimport { IHeaderGroupCellComp } from \"./headerGroupCellCtrl\";\n\nexport class GroupResizeFeature extends BeanStub {\n\n    private eResize: HTMLElement;\n    private columnGroup: ColumnGroup;\n    private comp: IHeaderGroupCellComp;\n    private pinned: string | null;\n\n    private resizeCols: Column[];\n    private resizeStartWidth: number;\n    private resizeRatios: number[];\n\n    private resizeTakeFromCols: Column[] | null;\n    private resizeTakeFromStartWidth: number | null;\n    private resizeTakeFromRatios: number[] | null;\n\n    @Autowired('horizontalResizeService') private readonly horizontalResizeService: HorizontalResizeService;\n    @Autowired('autoWidthCalculator') private readonly autoWidthCalculator: AutoWidthCalculator;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    constructor(comp: IHeaderGroupCellComp, eResize: HTMLElement,  pinned: string | null, columnGroup: ColumnGroup) {\n        super();\n\n        this.eResize = eResize;\n        this.comp = comp;\n        this.pinned = pinned;\n        this.columnGroup = columnGroup;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        if (!this.columnGroup.isResizable()) {\n            this.comp.addOrRemoveResizableCssClass('ag-hidden', true);\n            return;\n        }\n\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.eResize,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this, false),\n            onResizeEnd: this.onResizing.bind(this, true)\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n\n        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {\n            const skipHeaderOnAutoSize = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n\n            this.eResize.addEventListener('dblclick', () => {\n                // get list of all the column keys we are responsible for\n                const keys: string[] = [];\n                const leafCols = this.columnGroup.getDisplayedLeafColumns();\n\n                leafCols.forEach((column: Column) => {\n                    // not all cols in the group may be participating with auto-resize\n                    if (!column.getColDef().suppressAutoSize) {\n                        keys.push(column.getColId());\n                    }\n                });\n\n                if (keys.length > 0) {\n                    this.columnModel.autoSizeColumns({\n                        columns: keys,\n                        skipHeader: skipHeaderOnAutoSize,\n                        stopAtGroup: this.columnGroup,\n                        source: 'uiColumnResized'\n                    });\n                }\n\n                this.resizeLeafColumnsToFit();\n            });\n        }\n    }\n\n    public onResizeStart(shiftKey: boolean): void {\n        this.calculateInitialValues();\n\n        let takeFromGroup: ColumnGroup | null = null;\n\n        if (shiftKey) {\n            takeFromGroup = this.columnModel.getDisplayedGroupAfter(this.columnGroup);\n        }\n\n        if (takeFromGroup) {\n            const takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();\n\n            this.resizeTakeFromCols = takeFromLeafCols.filter(col => col.isResizable());\n\n            this.resizeTakeFromStartWidth = 0;\n            this.resizeTakeFromCols.forEach(col => this.resizeTakeFromStartWidth! += col.getActualWidth());\n            this.resizeTakeFromRatios = [];\n            this.resizeTakeFromCols.forEach(col => this.resizeTakeFromRatios!.push(col.getActualWidth() / this.resizeTakeFromStartWidth!));\n        } else {\n            this.resizeTakeFromCols = null;\n            this.resizeTakeFromStartWidth = null;\n            this.resizeTakeFromRatios = null;\n        }\n\n        this.comp.addOrRemoveCssClass('ag-column-resizing', true);\n\n    }\n\n    public onResizing(finished: boolean, resizeAmount: any): void {\n        const resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n        const width = this.resizeStartWidth + resizeAmountNormalised;\n\n        this.resizeColumns(width, finished);\n    }\n\n    public resizeLeafColumnsToFit(): void {\n        const preferredSize = this.autoWidthCalculator.getPreferredWidthForColumnGroup(this.columnGroup);\n        this.calculateInitialValues();\n\n        if (preferredSize > this.resizeStartWidth) {\n            this.resizeColumns(preferredSize, true);\n        }\n    }\n\n    public resizeColumns(totalWidth: number, finished: boolean = true): void {\n        const resizeSets: ColumnResizeSet[] = [];\n\n        resizeSets.push({\n            columns: this.resizeCols,\n            ratios: this.resizeRatios,\n            width: totalWidth\n        });\n\n        if (this.resizeTakeFromCols) {\n            const diff = totalWidth - this.resizeStartWidth;\n            resizeSets.push({\n                columns: this.resizeTakeFromCols,\n                ratios: this.resizeTakeFromRatios!,\n                width: this.resizeTakeFromStartWidth! - diff\n            });\n        }\n\n        this.columnModel.resizeColumnSets({\n            resizeSets,\n            finished,\n            source: 'uiColumnDragged'\n        });\n\n        if (finished) {\n            this.comp.addOrRemoveCssClass('ag-column-resizing', false);\n        }\n    }\n\n    private calculateInitialValues(): void {\n        const leafCols = this.columnGroup.getDisplayedLeafColumns();\n        this.resizeCols = leafCols.filter(col => col.isResizable());\n        this.resizeStartWidth = 0;\n        this.resizeCols.forEach(col => this.resizeStartWidth += col.getActualWidth());\n        this.resizeRatios = [];\n        this.resizeCols.forEach(col => this.resizeRatios.push(col.getActualWidth() / this.resizeStartWidth));\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n    private normaliseDragChange(dragChange: number): number {\n        let result = dragChange;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (this.pinned !== Constants.PINNED_LEFT) {\n                result *= -1;\n            }\n        } else if (this.pinned === Constants.PINNED_RIGHT) {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            result *= -1;\n        }\n\n        return result;\n    }\n}"]}