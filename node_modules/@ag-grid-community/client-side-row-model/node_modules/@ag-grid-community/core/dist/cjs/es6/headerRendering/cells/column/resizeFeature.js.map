{"version":3,"sources":["../../../src/ts/headerRendering/cells/column/resizeFeature.ts"],"names":[],"mappings":"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","file":"resizeFeature.js","sourcesContent":["import { ColumnModel } from \"../../../columns/columnModel\";\nimport { Constants } from \"../../../constants/constants\";\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { setDisplayed } from \"../../../utils/dom\";\nimport { TouchListener } from \"../../../widgets/touchListener\";\nimport { HorizontalResizeService } from \"../../common/horizontalResizeService\";\nimport { HeaderCellCtrl, IHeaderCellComp } from \"./headerCellCtrl\";\n\nexport class ResizeFeature extends BeanStub {\n\n    @Autowired('horizontalResizeService') private horizontalResizeService: HorizontalResizeService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private pinned: string | null;\n    private column: Column;\n    private eResize: HTMLElement;\n    private comp: IHeaderCellComp;\n\n    private resizeStartWidth: number;\n    private resizeWithShiftKey: boolean;\n\n    private ctrl: HeaderCellCtrl;\n\n    constructor(\n        pinned: string | null,\n        column: Column,\n        eResize: HTMLElement,\n        comp: IHeaderCellComp,\n        ctrl: HeaderCellCtrl\n    ) {\n        super();\n        this.pinned = pinned;\n        this.column = column;\n        this.eResize = eResize;\n        this.comp = comp;\n        this.ctrl = ctrl;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const colDef = this.column.getColDef();\n\n        const destroyResizeFuncs: (() => void)[] = [];\n\n        let canResize: boolean;\n        let canAutosize: boolean;\n\n        const addResize = () => {\n            setDisplayed(this.eResize, canResize);\n\n            if (!canResize) { return; }\n\n            const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n                eResizeBar: this.eResize,\n                onResizeStart: this.onResizeStart.bind(this),\n                onResizing: this.onResizing.bind(this, false),\n                onResizeEnd: this.onResizing.bind(this, true)\n            });\n            destroyResizeFuncs.push(finishedWithResizeFunc);\n\n            if (canAutosize) {\n                const skipHeaderOnAutoSize = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n\n                const autoSizeColListener = () => {\n                    this.columnModel.autoSizeColumn(this.column, skipHeaderOnAutoSize, \"uiColumnResized\");\n                };\n\n                this.eResize.addEventListener('dblclick', autoSizeColListener);\n                const touchListener: TouchListener = new TouchListener(this.eResize);\n                touchListener.addEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener);\n\n                this.addDestroyFunc(() => {\n                    this.eResize.removeEventListener('dblclick', autoSizeColListener);\n                    touchListener.removeEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener);\n                    touchListener.destroy();\n                });\n            }\n        };\n\n        const removeResize = () => {\n            destroyResizeFuncs.forEach(f => f());\n            destroyResizeFuncs.length = 0;\n        };\n\n        const refresh = () => {\n            const resize = this.column.isResizable();\n            const autoSize = !this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;\n            const propertyChange = resize !== canResize || autoSize !== canAutosize;\n            if (propertyChange) {\n                canResize = resize;\n                canAutosize = autoSize;\n                removeResize();\n                addResize();\n            }\n        };\n\n        refresh();\n        this.addDestroyFunc(removeResize);\n        this.ctrl.addRefreshFunction(refresh);\n    }\n\n    private onResizing(finished: boolean, resizeAmount: number): void {\n        const resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);\n        const columnWidths = [{ key: this.column, newWidth: this.resizeStartWidth + resizeAmountNormalised }];\n        this.columnModel.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, \"uiColumnDragged\");\n\n        if (finished) {\n            this.comp.addOrRemoveCssClass('ag-column-resizing', false);\n        }\n    }\n\n    private onResizeStart(shiftKey: boolean): void {\n        this.resizeStartWidth = this.column.getActualWidth();\n        this.resizeWithShiftKey = shiftKey;\n\n        this.comp.addOrRemoveCssClass('ag-column-resizing', true);\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?\n    private normaliseResizeAmount(dragChange: number): number {\n        let result = dragChange;\n\n        const notPinningLeft = this.pinned !== Constants.PINNED_LEFT;\n        const pinningRight = this.pinned === Constants.PINNED_RIGHT;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (notPinningLeft) {\n                result *= -1;\n            }\n        } else {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            if (pinningRight) {\n                result *= -1;\n            }\n        }\n\n        return result;\n    }\n\n}"]}