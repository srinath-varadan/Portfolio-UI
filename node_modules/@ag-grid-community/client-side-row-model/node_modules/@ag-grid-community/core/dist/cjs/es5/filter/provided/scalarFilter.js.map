{"version":3,"sources":["../../../src/ts/filter/provided/scalarFilter.ts"],"names":[],"mappings":"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","file":"scalarFilter.js","sourcesContent":["import { _ } from \"src/ts/utils\";\nimport { AgInputTextField } from \"../../widgets/agInputTextField\";\nimport { SimpleFilter, ISimpleFilterParams, ISimpleFilterModel, ISimpleFilterModelType, Tuple } from \"./simpleFilter\";\n\nexport interface IScalarFilterParams extends ISimpleFilterParams {\n    /** If `true`, the `'inRange'` filter option will include values equal to the start and end of the range. */\n    inRangeInclusive?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'equals'` filter option. */\n    includeBlanksInEquals?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'lessThan'` and `'lessThanOrEqual'` filter options. */\n    includeBlanksInLessThan?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'greaterThan'` and `'greaterThanOrEqual'` filter options. */\n    includeBlanksInGreaterThan?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'inRange'` filter option. */\n    includeBlanksInRange?: boolean;\n}\n\nexport interface Comparator<T> {\n    (left: T, right: T): number;\n}\n\nexport abstract class ScalarFilter<M extends ISimpleFilterModel, V, E = AgInputTextField> extends SimpleFilter<M, V, E> {\n    private scalarFilterParams: IScalarFilterParams;\n\n    protected abstract comparator(): Comparator<V>;\n\n    protected setParams(params: IScalarFilterParams): void {\n        super.setParams(params);\n        this.scalarFilterParams = params;\n    }\n\n    protected evaluateNullValue(filterType?: ISimpleFilterModelType | null) {\n        switch (filterType) {\n            case ScalarFilter.EQUALS:\n            case ScalarFilter.NOT_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInEquals) {\n                    return true;\n                }\n                break;\n\n            case ScalarFilter.GREATER_THAN:\n            case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInGreaterThan) {\n                    return true;\n                }\n                break;\n\n            case ScalarFilter.LESS_THAN:\n            case ScalarFilter.LESS_THAN_OR_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInLessThan) {\n                    return true;\n                }\n                break;\n            case ScalarFilter.IN_RANGE:\n                if (this.scalarFilterParams.includeBlanksInRange) {\n                    return true;\n                }\n                break;\n            case ScalarFilter.BLANK:\n                return true;\n            case ScalarFilter.NOT_BLANK:\n                return false;\n        }\n\n        return false;\n    }\n\n    protected evaluateNonNullValue(values: Tuple<V>, cellValue: V, filterModel: M): boolean {\n        const comparator = this.comparator();\n        const compareResult = values[0] != null ? comparator(values[0]!, cellValue) : 0;\n\n        switch (filterModel.type) {\n            case ScalarFilter.EQUALS:\n                return compareResult === 0;\n\n            case ScalarFilter.NOT_EQUAL:\n                return compareResult !== 0;\n\n            case ScalarFilter.GREATER_THAN:\n                return compareResult > 0;\n\n            case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                return compareResult >= 0;\n\n            case ScalarFilter.LESS_THAN:\n                return compareResult < 0;\n\n            case ScalarFilter.LESS_THAN_OR_EQUAL:\n                return compareResult <= 0;\n\n            case ScalarFilter.IN_RANGE: {\n                const compareToResult = comparator(values[1]!, cellValue);\n\n                return this.scalarFilterParams.inRangeInclusive ?\n                    compareResult >= 0 && compareToResult <= 0 :\n                    compareResult > 0 && compareToResult < 0;\n            }\n\n            case ScalarFilter.BLANK:\n                return this.isBlank(cellValue);\n\n            case ScalarFilter.NOT_BLANK:\n                return !this.isBlank(cellValue);\n\n            default:\n                console.warn('AG Grid: Unexpected type of filter \"' + filterModel.type + '\", it looks like the filter was configured with incorrect Filter Options');\n                return true;\n        }\n    }\n}"]}