{"version":3,"sources":["../../../src/ts/headerRendering/cells/column/selectAllFeature.ts"],"names":[],"mappings":"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","file":"selectAllFeature.js","sourcesContent":["import { AgCheckbox } from \"../../../widgets/agCheckbox\";\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired } from \"../../../context/context\";\nimport { ColumnApi } from \"../../../columns/columnApi\";\nimport { GridApi } from \"../../../gridApi\";\nimport { Events } from \"../../../events\";\nimport { IRowModel } from \"../../../interfaces/iRowModel\";\nimport { Constants } from \"../../../constants/constants\";\nimport { Column } from \"../../../entities/column\";\nimport { RowNode } from \"../../../entities/rowNode\";\nimport { SelectionService } from \"../../../selectionService\";\nimport { HeaderCellCtrl } from \"./headerCellCtrl\";\nimport { setAriaRole } from \"../../../utils/aria\";\nimport { HeaderCheckboxSelectionCallbackParams } from \"../../../entities/colDef\";\n\nexport class SelectAllFeature extends BeanStub {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('selectionService') private selectionService: SelectionService;\n\n    private cbSelectAllVisible = false;\n    private processingEventFromCheckbox = false;\n    private column: Column;\n    private headerCellCtrl: HeaderCellCtrl;\n\n    private filteredOnly: boolean;\n    private cbSelectAll: AgCheckbox;\n\n    constructor(column: Column) {\n        super();\n        this.column = column;\n\n        const colDef = column.getColDef();\n        this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;\n    }\n\n    public onSpaceKeyPressed(e: KeyboardEvent): void {\n        const checkbox = this.cbSelectAll;\n        const eDocument = this.gridOptionsWrapper.getDocument();\n\n        if (checkbox.isDisplayed() && !checkbox.getGui().contains(eDocument.activeElement)) {\n            e.preventDefault();\n            checkbox.setValue(!checkbox.getValue());\n        }\n    }\n\n    public getCheckboxGui(): HTMLElement {\n        return this.cbSelectAll.getGui();\n    }\n\n    public setComp(ctrl: HeaderCellCtrl): void {\n        this.headerCellCtrl = ctrl;\n        this.cbSelectAll = this.createManagedBean(new AgCheckbox());\n        this.cbSelectAll.addCssClass('ag-header-select-all');\n        setAriaRole(this.cbSelectAll.getGui(), 'presentation');\n        this.showOrHideSelectAll();\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideSelectAll.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));\n        this.addManagedListener(this.cbSelectAll, AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));\n        this.cbSelectAll.getInputElement().setAttribute('tabindex', '-1');\n        this.refreshSelectAllLabel();\n    }\n\n    private showOrHideSelectAll(): void {\n        this.cbSelectAllVisible = this.isCheckboxSelection();\n        this.cbSelectAll.setDisplayed(this.cbSelectAllVisible);\n\n        if (this.cbSelectAllVisible) {\n            // in case user is trying this feature with the wrong model type\n            this.checkRightRowModelType();\n            // make sure checkbox is showing the right state\n            this.updateStateOfCheckbox();\n        }\n        this.refreshSelectAllLabel();\n    }\n\n    private onModelChanged(): void {\n        if (!this.cbSelectAllVisible) { return; }\n        this.updateStateOfCheckbox();\n    }\n\n    private onSelectionChanged(): void {\n        if (!this.cbSelectAllVisible) { return; }\n        this.updateStateOfCheckbox();\n    }\n\n    private getNextCheckboxState(selectionCount: SelectionCount): boolean | null {\n        // if no rows, always have it unselected\n        if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {\n            return false;\n        }\n\n        // if mix of selected and unselected, this is the tri-state\n        if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {\n            return null;\n        }\n\n        // only selected\n        if (selectionCount.selected > 0) {\n            return true;\n        }\n\n        // nothing selected\n        return false;\n    }\n\n    private updateStateOfCheckbox(): void {\n        if (this.processingEventFromCheckbox) { return; }\n\n        this.processingEventFromCheckbox = true;\n\n        const selectionCount = this.getSelectionCount();\n        const allSelected = this.getNextCheckboxState(selectionCount);\n\n        this.cbSelectAll.setValue(allSelected!);\n        this.refreshSelectAllLabel();\n\n        this.processingEventFromCheckbox = false;\n    }\n\n    private refreshSelectAllLabel(): void {\n        if (!this.cbSelectAllVisible) {\n            this.headerCellCtrl.setAriaDescriptionProperty('selectAll', null);\n        } else {\n            const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n            const checked = this.cbSelectAll.getValue();\n            const ariaStatus = checked ? translate('ariaChecked', 'checked') : translate('ariaUnchecked', 'unchecked');\n            const ariaLabel = translate('ariaRowSelectAll', 'Press Space to toggle all rows selection');\n\n            this.headerCellCtrl.setAriaDescriptionProperty('selectAll', `${ariaLabel} (${ariaStatus})`);\n        }\n\n        this.headerCellCtrl.refreshAriaDescription();\n    }\n\n    private getSelectionCount(): SelectionCount {\n        let selectedCount = 0;\n        let notSelectedCount = 0;\n\n        const callback = (node: RowNode) => {\n\n            if (this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) { return; }\n\n            if (node.isSelected()) {\n                selectedCount++;\n            } else if (!node.selectable) {\n                // don't count non-selectable nodes!\n            } else {\n                notSelectedCount++;\n            }\n        };\n\n        if (this.filteredOnly) {\n            this.gridApi.forEachNodeAfterFilter(callback);\n        } else {\n            this.gridApi.forEachNode(callback);\n        }\n\n        return {\n            notSelected: notSelectedCount,\n            selected: selectedCount\n        };\n    }\n\n    private checkRightRowModelType(): void {\n        const rowModelType = this.rowModel.getType();\n        const rowModelMatches = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n\n        if (!rowModelMatches) {\n            console.warn(`AG Grid: selectAllCheckbox is only available if using normal row model, you are using ${rowModelType}`);\n        }\n    }\n\n    private onCbSelectAll(): void {\n        if (this.processingEventFromCheckbox) { return; }\n        if (!this.cbSelectAllVisible) { return; }\n\n        const value = this.cbSelectAll.getValue();\n\n        if (value) {\n            this.selectionService.selectAllRowNodes(this.filteredOnly);\n        } else {\n            this.selectionService.deselectAllRowNodes(this.filteredOnly);\n        }\n    }\n\n    private isCheckboxSelection(): boolean {\n        let result = this.column.getColDef().headerCheckboxSelection;\n\n        if (typeof result === 'function') {\n            const func = result as (params: HeaderCheckboxSelectionCallbackParams) => boolean;\n            const params: HeaderCheckboxSelectionCallbackParams = {\n                column: this.column,\n                colDef: this.column.getColDef(),\n                columnApi: this.columnApi,\n                api: this.gridApi,\n                context: this.gridOptionsWrapper.getContext()\n            };\n            result = func(params);\n        }\n\n        if (result) {\n            if (this.gridOptionsWrapper.isRowModelServerSide()) {\n                console.warn('AG Grid: headerCheckboxSelection is not supported for Server Side Row Model');\n                return false;\n            }\n            if (this.gridOptionsWrapper.isRowModelInfinite()) {\n                console.warn('AG Grid: headerCheckboxSelection is not supported for Infinite Row Model');\n                return false;\n            }\n            if (this.gridOptionsWrapper.isRowModelViewport()) {\n                console.warn('AG Grid: headerCheckboxSelection is not supported for Viewport Row Model');\n                return false;\n            }\n            // otherwise the row model is compatible, so return true\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\ninterface SelectionCount {\n    selected: number;\n    notSelected: number;\n}\n"]}