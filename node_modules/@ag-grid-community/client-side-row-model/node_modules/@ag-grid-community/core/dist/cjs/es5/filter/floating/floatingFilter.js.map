{"version":3,"sources":["../../../src/ts/filter/floating/floatingFilter.ts"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA","file":"floatingFilter.js","sourcesContent":["import { Column } from '../../entities/column';\nimport { FilterChangedEvent } from '../../events';\nimport { IComponent } from '../../interfaces/iComponent';\nimport { IFilter, IFilterParams, ProvidedFilterModel } from '../../interfaces/iFilter';\nimport { AgGridCommon } from '../../interfaces/iCommon';\n\nexport interface IFloatingFilterParent {\n    /**\n     * Notification that a new floating-filter value was input by the user.\n     *\n     * @param type operation type selected.\n     * @param value model-typed value entered.\n     */\n    onFloatingFilterChanged(type: string | null, value: any): void;\n}\ntype InbuiltParentType = IFloatingFilterParent & IFilter;\nexport type IFloatingFilterParentCallback<P = InbuiltParentType> = (parentFilterInstance: P) => void;\n\nexport interface IFloatingFilterParams<P = InbuiltParentType> extends AgGridCommon {\n    /** The column this filter is for. */\n    column: Column;\n    /**\n     * The params object passed to the filter.\n     * This is to allow the floating filter access to the configuration of the parent filter.\n     * For example, the provided filters use debounceMs from the parent filter params.\n     * */\n    filterParams: IFilterParams;\n    /**\n     * Boolean flag to indicate if the button in the floating filter that opens the parent filter in a popup should be displayed.\n     */\n    suppressFilterButton: boolean;\n\n    /**\n     * This is a shortcut to invoke getModel on the parent filter.\n     * If the parent filter doesn't exist (filters are lazily created as needed)\n     * then it returns null rather than calling getModel() on the parent filter.\n     */\n    currentParentModel: () => any;\n\n    /**\n     * Gets a reference to the parent filter. The result is returned asynchronously\n     * via a callback as the parent filter may not exist yet. If it does\n     * not exist, it is created and asynchronously returned (AG Grid itself\n     * does not create components asynchronously, however if providing a framework\n     * provided filter e.g. React, it might be).\n     *\n     * The floating filter can then call any method it likes on the parent filter.\n     * The parent filter will typically provide its own method for the floating\n     * filter to call to set the filter. For example, if creating custom filter A,\n     * it should have a method your floating A can call to set the state\n     * when the user updates via the floating filter.\n     */\n    parentFilterInstance: (callback: IFloatingFilterParentCallback<P>) => void;\n    /**\n     * Shows the parent filter popup.\n     */\n    showParentFilter: () => void;\n}\n\nexport interface IFloatingFilter {\n\n    /**\n     * Gets called every time the parent filter changes.\n     * Your floating filter would typically refresh its UI to reflect the new filter state.\n     * The provided parentModel is what the parent filter returns from its getModel() method.\n     * The event is the FilterChangedEvent that the grid fires.\n     */\n    onParentModelChanged(parentModel: any, filterChangedEvent?: FilterChangedEvent | null): void;\n\n    /**\n     * A hook to perform any necessary operation just after the GUI for this component has been rendered on the screen.\n     * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n     * This is useful for any logic that requires attachment before executing, such as putting focus on a particular DOM element.\n     */\n    afterGuiAttached?(): void;\n}\n\nexport interface IFloatingFilterComp<P = any> extends IFloatingFilter, IComponent<IFloatingFilterParams<P>> {\n}\n\nexport interface BaseFloatingFilterChange {\n    model: ProvidedFilterModel;\n    apply: boolean;\n}\n"]}