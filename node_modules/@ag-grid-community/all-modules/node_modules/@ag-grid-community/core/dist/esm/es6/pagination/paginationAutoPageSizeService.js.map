{"version":3,"sources":["../../../src/ts/pagination/paginationAutoPageSizeService.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAKpE,IAAa,6BAA6B,GAA1C,MAAa,6BAA8B,SAAQ,QAAQ;IAO/C,aAAa;QACjB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;YAC5B,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC,sBAAsB,CAAC;YAEtD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,yBAAyB,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAClH,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,+BAA+B,EAAE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9H,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,SAAS;QACb,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,EAAE,CAAC;IAC/D,CAAC;IAEO,yBAAyB;QAC7B,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEO,mBAAmB;QACvB,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEO,aAAa;QACjB,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;YAClB,OAAO;SACV;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,EAAE,CAAC;QACjE,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC,aAAa,EAAE,CAAC;QAEvF,IAAI,UAAU,GAAG,CAAC,EAAE;YAChB,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC;YACvD,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;SAC1E;IACL,CAAC;CACJ,CAAA;AAxC8B;IAA1B,SAAS,CAAC,cAAc,CAAC;mEAAoC;AAK9D;IADC,aAAa;kEASb;AAfQ,6BAA6B;IADzC,IAAI,CAAC,+BAA+B,CAAC;GACzB,6BAA6B,CA0CzC;SA1CY,6BAA6B","file":"paginationAutoPageSizeService.js","sourcesContent":["import { BeanStub } from \"../context/beanStub\";\nimport { Events } from \"../events\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { RowContainerCtrl } from \"../gridBodyComp/rowContainer/rowContainerCtrl\";\n\n@Bean('paginationAutoPageSizeService')\nexport class PaginationAutoPageSizeService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private centerRowContainerCon: RowContainerCtrl;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCon = p.centerRowContainerCtrl;\n\n            this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));\n            this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n            this.checkPageSize();\n        });\n    }\n\n    private notActive(): boolean {\n        return !this.gridOptionsWrapper.isPaginationAutoPageSize();\n    }\n\n    private onScrollVisibilityChanged(): void {\n        this.checkPageSize();\n    }\n\n    private onBodyHeightChanged(): void {\n        this.checkPageSize();\n    }\n\n    private checkPageSize(): void {\n        if (this.notActive()) {\n            return;\n        }\n\n        const rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        const bodyHeight = this.centerRowContainerCon.getViewportSizeFeature().getBodyHeight();\n\n        if (bodyHeight > 0) {\n            const newPageSize = Math.floor(bodyHeight / rowHeight);\n            this.gridOptionsWrapper.setProperty('paginationPageSize', newPageSize);\n        }\n    }\n}\n"]}