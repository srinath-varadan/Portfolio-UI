{"version":3,"sources":["../../../src/ts/rendering/cell/cellCustomStyleFeature.ts"],"names":[],"mappings":"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","file":"cellCustomStyleFeature.js","sourcesContent":["import { BeanStub } from \"../../context/beanStub\";\nimport { CellClassParams } from \"../../entities/colDef\";\nimport { CellCtrl, ICellComp } from \"./cellCtrl\";\nimport { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { Beans } from \"../beans\";\nimport { CellStyleFunc, CellStyle } from \"../../entities/colDef\";\n\nexport class CellCustomStyleFeature extends BeanStub {\n\n    private readonly cellCtrl: CellCtrl;\n    private readonly column: Column;\n    private readonly rowNode: RowNode;\n    private readonly beans: Beans;\n    private staticClasses: string[] = [];\n\n    private cellComp: ICellComp;\n\n    constructor(ctrl: CellCtrl, beans: Beans) {\n        super();\n\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n    }\n\n    public setComp(comp: ICellComp): void {\n        this.cellComp = comp;\n\n        this.applyUserStyles();\n        this.applyCellClassRules();\n        this.applyClassesFromColDef();\n    }\n\n    public applyCellClassRules(): void {\n        const colDef = this.column.getColDef();\n        const cellClassParams: CellClassParams = {\n            value: this.cellCtrl.getValue(),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            colDef: colDef,\n            rowIndex: this.rowNode.rowIndex!,\n            api: this.beans.gridOptionsWrapper.getApi()!,\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n            context: this.beans.gridOptionsWrapper.getContext()\n        };\n\n        this.beans.stylingService.processClassRules(\n            colDef.cellClassRules,\n            cellClassParams,\n            className => this.cellComp.addOrRemoveCssClass(className, true),\n            className => this.cellComp.addOrRemoveCssClass(className, false)\n        );\n    }\n\n    public applyUserStyles() {\n        const colDef = this.column.getColDef();\n\n        if (!colDef.cellStyle) { return; }\n\n        let styles: CellStyle | null | undefined;\n\n        if (typeof colDef.cellStyle === 'function') {\n            const cellStyleParams = {\n                column: this.column,\n                value: this.cellCtrl.getValue(),\n                colDef: colDef,\n                data: this.rowNode.data,\n                node: this.rowNode,\n                rowIndex: this.rowNode.rowIndex!,\n                api: this.beans.gridOptionsWrapper.getApi()!,\n                columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n                context: this.beans.gridOptionsWrapper.getContext(),\n            } as CellClassParams;\n            const cellStyleFunc = colDef.cellStyle as CellStyleFunc;\n            styles = cellStyleFunc(cellStyleParams);\n        } else {\n            styles = colDef.cellStyle;\n        }\n\n        this.cellComp.setUserStyles(styles);\n    }\n\n    public applyClassesFromColDef() {\n        const colDef = this.column.getColDef();\n        const cellClassParams: CellClassParams = {\n            value: this.cellCtrl.getValue(),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            colDef: colDef,\n            rowIndex: this.rowNode.rowIndex!,\n            api: this.beans.gridOptionsWrapper.getApi()!,\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n            context: this.beans.gridOptionsWrapper.getContext()\n        };\n\n        if (this.staticClasses.length) {\n            this.staticClasses.forEach(className => this.cellComp.addOrRemoveCssClass(className, false));\n        }\n\n        this.staticClasses = this.beans.stylingService.getStaticCellClasses(colDef, cellClassParams);\n\n        if (this.staticClasses.length) {\n            this.staticClasses.forEach(className => this.cellComp.addOrRemoveCssClass(className, true));\n        }\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public destroy() {\n        super.destroy();\n    }\n}\n"]}