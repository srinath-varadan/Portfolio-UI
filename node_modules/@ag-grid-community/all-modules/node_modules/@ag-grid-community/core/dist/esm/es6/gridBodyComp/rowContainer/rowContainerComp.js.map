{"version":3,"sources":["../../../src/ts/gridBodyComp/rowContainer/rowContainerComp.ts"],"names":[],"mappings":"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","file":"rowContainerComp.js","sourcesContent":["import { Component } from \"../../widgets/component\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { Autowired, PostConstruct, PreDestroy } from \"../../context/context\";\nimport { getRowContainerTypeForName, IRowContainerComp, RowContainerCtrl, RowContainerName, RowContainerType } from \"./rowContainerCtrl\";\nimport { ensureDomOrder, insertWithDomOrder } from \"../../utils/dom\";\nimport { RowComp } from \"../../rendering/row/rowComp\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl\";\nimport { Beans } from \"../../rendering/beans\";\nimport { getAllValuesInObject } from \"../../utils/object\";\nimport { setAriaRole } from \"../../utils/aria\";\n\nfunction templateFactory(): string {\n    const name = Component.elementGettingCreated.getAttribute('name') as RowContainerName;\n\n    const cssClasses = RowContainerCtrl.getRowContainerCssClasses(name);\n\n    let res: string;\n\n    const template1 = name === RowContainerName.CENTER;\n    const template2 = name === RowContainerName.TOP_CENTER || name === RowContainerName.BOTTOM_CENTER;\n\n    if (template1) {\n        res = /* html */\n            `<div class=\"${cssClasses.wrapper}\" ref=\"eWrapper\" role=\"presentation\">\n                <div class=\"${cssClasses.viewport}\" ref=\"eViewport\" role=\"presentation\">\n                    <div class=\"${cssClasses.container}\" ref=\"eContainer\"></div>\n                </div>\n            </div>`;\n    } else if (template2) {\n        res = /* html */\n            `<div class=\"${cssClasses.viewport}\" ref=\"eViewport\" role=\"presentation\">\n                <div class=\"${cssClasses.container}\" ref=\"eContainer\"></div>\n            </div>`;\n    } else {\n        res = /* html */\n            `<div class=\"${cssClasses.container}\" ref=\"eContainer\"></div>`;\n    }\n\n    return res;\n}\n\nexport class RowContainerComp extends Component {\n\n    @Autowired('beans') private beans: Beans;\n\n    @RefSelector('eViewport') private eViewport: HTMLElement;\n    @RefSelector('eContainer') private eContainer: HTMLElement;\n    @RefSelector('eWrapper') private eWrapper: HTMLElement;\n\n    private readonly name: RowContainerName;\n    private readonly type: RowContainerType;\n\n    private rowComps: {[id: string]: RowComp} = {};\n\n    // we ensure the rows are in the dom in the order in which they appear on screen when the\n    // user requests this via gridOptions.ensureDomOrder. this is typically used for screen readers.\n    private domOrder: boolean;\n    private lastPlacedElement: HTMLElement | null;\n\n    constructor() {\n        super(templateFactory());\n        this.name = Component.elementGettingCreated.getAttribute('name') as RowContainerName;\n        this.type = getRowContainerTypeForName(this.name);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const compProxy: IRowContainerComp = {\n            setViewportHeight: height => this.eViewport.style.height = height,\n            setRowCtrls: rowCtrls => this.setRowCtrls(rowCtrls),\n            setDomOrder: domOrder => {\n                this.domOrder = domOrder;\n            },\n            setContainerWidth: width => this.eContainer.style.width = width\n        };\n\n        const ctrl = this.createManagedBean(new RowContainerCtrl(this.name));\n        ctrl.setComp(compProxy, this.eContainer, this.eViewport, this.eWrapper);\n    }\n\n    @PreDestroy\n    private preDestroy(): void {\n        // destroys all row comps\n        this.setRowCtrls([]);\n    }\n\n    private setRowCtrls(rowCtrls: RowCtrl[]): void {\n        const oldRows = {...this.rowComps};\n        this.rowComps = {};\n\n        this.lastPlacedElement = null;\n\n        const processRow = (rowCon: RowCtrl) => {\n            const instanceId = rowCon.getInstanceId();\n            const existingRowComp = oldRows[instanceId];\n            if (existingRowComp) {\n                this.rowComps[instanceId] = existingRowComp;\n                delete oldRows[instanceId];\n                this.ensureDomOrder(existingRowComp.getGui());\n            } else {\n                const rowComp = this.newRowComp(rowCon);\n                this.rowComps[instanceId] = rowComp;\n                this.appendRow(rowComp.getGui());\n            }\n        };\n\n        rowCtrls.forEach(processRow);\n        getAllValuesInObject(oldRows).forEach(oldRowComp => {\n            this.eContainer.removeChild(oldRowComp.getGui());\n            oldRowComp.destroy();\n        });\n\n        setAriaRole(this.eContainer, rowCtrls.length ? \"rowgroup\" :  \"presentation\");\n    }\n\n    public appendRow(element: HTMLElement) {\n        if (this.domOrder) {\n            insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);\n        } else {\n            this.eContainer.appendChild(element);\n        }\n        this.lastPlacedElement = element;\n    }\n\n    private ensureDomOrder(eRow: HTMLElement): void {\n        if (this.domOrder) {\n            ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\n            this.lastPlacedElement = eRow;\n        }\n    }\n\n    private newRowComp(rowCtrl: RowCtrl): RowComp {\n        const pinned = RowContainerCtrl.getPinned(this.name);\n        const res = new RowComp(rowCtrl, this.beans, this.type);\n        return res;\n    }\n\n}"]}