{"version":3,"sources":["../../../src/ts/headerRendering/rowContainer/headerRowContainerCtrl.ts"],"names":[],"mappings":"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","file":"headerRowContainerCtrl.js","sourcesContent":["import { ColumnModel } from \"../../columns/columnModel\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired } from \"../../context/context\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { Column } from \"../../entities/column\";\nimport { IHeaderColumn } from \"../../entities/iHeaderColumn\";\nimport { Events } from \"../../eventKeys\";\nimport { CenterWidthFeature } from \"../../gridBodyComp/centerWidthFeature\";\nimport { PinnedWidthService } from \"../../gridBodyComp/pinnedWidthService\";\nimport { ScrollVisibleService } from \"../../gridBodyComp/scrollVisibleService\";\nimport { NumberSequence } from \"../../utils\";\nimport { BodyDropTarget } from \"../columnDrag/bodyDropTarget\";\nimport { HeaderRowType } from \"../row/headerRowComp\";\nimport { HeaderRowCtrl } from \"../row/headerRowCtrl\";\nimport { FocusService } from \"../../focusService\";\nimport { HeaderPosition } from \"../common/headerPosition\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { HeaderCellCtrl } from \"../cells/column/headerCellCtrl\";\nimport { HeaderGroupCellCtrl } from \"../cells/columnGroup/headerGroupCellCtrl\";\n\nexport interface IHeaderRowContainerComp {\n    setCenterWidth(width: string): void;\n    setContainerTransform(transform: string): void;\n    setPinnedContainerWidth(width: string): void;\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setCtrls(ctrls: HeaderRowCtrl[]): void;\n}\n\nexport class HeaderRowContainerCtrl extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('pinnedWidthService') private pinnedWidthService: PinnedWidthService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('focusService') public focusService: FocusService;\n\n    private pinned: string | null;\n    private comp: IHeaderRowContainerComp;\n\n    private filtersRowCtrl: HeaderRowCtrl | undefined;\n    private columnsRowCtrl: HeaderRowCtrl;\n    private groupsRowCtrls: HeaderRowCtrl[] = [];\n\n    constructor(pinned: string | null) {\n        super();\n        this.pinned = pinned;\n    }\n\n    public setComp(comp: IHeaderRowContainerComp, eGui: HTMLElement): void {\n        this.comp = comp;\n\n        this.setupCenterWidth();\n        this.setupPinnedWidth();\n\n        this.setupDragAndDrop(eGui);\n\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n\n        this.ctrlsService.registerHeaderContainer(this, this.pinned);\n\n        if (this.columnModel.isReady()) {\n            this.refresh();\n        }\n    }\n\n    private setupDragAndDrop(dropContainer: HTMLElement): void {\n        const bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);\n        this.createManagedBean(bodyDropTarget);\n    }\n\n    public refresh(keepColumns = false): void {\n        const sequence = new NumberSequence();\n\n        const focusedHeaderPosition = this.focusService.getFocusHeaderToUseAfterRefresh();\n\n        const refreshColumnGroups = () => {\n            const groupRowCount = this.columnModel.getHeaderRowCount() - 1;\n\n            this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);\n\n            for (let i = 0; i < groupRowCount; i++) {\n                const ctrl = this.createBean(new HeaderRowCtrl(sequence.next(), this.pinned, HeaderRowType.COLUMN_GROUP));\n                this.groupsRowCtrls.push(ctrl);\n            }\n        };\n\n        const refreshColumns = () => {\n            const rowIndex = sequence.next();\n            const needNewInstance = this.columnsRowCtrl == null || !keepColumns || this.columnsRowCtrl.getRowIndex() !== rowIndex;\n\n            if (needNewInstance) {\n                this.destroyBean(this.columnsRowCtrl);\n                this.columnsRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, HeaderRowType.COLUMN));\n            }\n        };\n\n        const refreshFilters = () => {\n\n            const includeFloatingFilter = this.columnModel.hasFloatingFilters();\n\n            const destroyPreviousComp = () => {\n                this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);\n            };\n\n            if (!includeFloatingFilter) {\n                destroyPreviousComp();\n                return;\n            }\n\n            const rowIndex = sequence.next();\n\n            if (this.filtersRowCtrl) {\n                const rowIndexMismatch = this.filtersRowCtrl.getRowIndex() !== rowIndex;\n                if (!keepColumns || rowIndexMismatch) {\n                    destroyPreviousComp();\n                }\n            }\n\n            if (!this.filtersRowCtrl) {\n                this.filtersRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, HeaderRowType.FLOATING_FILTER));\n            }\n        };\n\n        refreshColumnGroups();\n        refreshColumns();\n        refreshFilters();\n\n        const allCtrls = this.getAllCtrls();\n        this.comp.setCtrls(allCtrls);\n\n        this.restoreFocusOnHeader(focusedHeaderPosition);\n    }\n\n    private restoreFocusOnHeader(position: HeaderPosition | null): void {\n        if (position == null || position.column.getPinned() != this.pinned) { return; }\n\n        this.focusService.focusHeaderPosition({ headerPosition: position });\n    }\n\n    private getAllCtrls(): HeaderRowCtrl[] {\n        const res = [...this.groupsRowCtrls, this.columnsRowCtrl];\n        if (this.filtersRowCtrl) {\n            res.push(this.filtersRowCtrl!);\n        }\n        return res;\n    }\n\n    // grid cols have changed - this also means the number of rows in the header can have\n    // changed. so we remove all the old rows and insert new ones for a complete refresh\n    private onGridColumnsChanged() {\n        this.refresh(true);\n    }\n\n    private setupCenterWidth(): void {\n        if (this.pinned != null) { return; }\n\n        this.createManagedBean(new CenterWidthFeature(width => this.comp.setCenterWidth(`${width}px`)));\n    }\n\n    public setHorizontalScroll(offset: number): void {\n        this.comp.setContainerTransform(`translateX(${offset}px)`);\n    }\n\n    private setupPinnedWidth(): void {\n        if (this.pinned == null) { return; }\n\n        const pinningLeft = this.pinned === Constants.PINNED_LEFT;\n        const pinningRight = this.pinned === Constants.PINNED_RIGHT;\n\n        const listener = () => {\n            const width = pinningLeft ? this.pinnedWidthService.getPinnedLeftWidth() : this.pinnedWidthService.getPinnedRightWidth();\n            if (width == null) { return; } // can happen at initialisation, width not yet set\n\n            const hidden = width == 0;\n            const isRtl = this.gridOptionsWrapper.isEnableRtl();\n            const scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();\n\n            // if there is a scroll showing (and taking up space, so Windows, and not iOS)\n            // in the body, then we add extra space to keep header aligned with the body,\n            // as body width fits the cols and the scrollbar\n            const addPaddingForScrollbar = this.scrollVisibleService.isVerticalScrollShowing() && ((isRtl && pinningLeft) || (!isRtl && pinningRight));\n            const widthWithPadding = addPaddingForScrollbar ? width + scrollbarWidth : width;\n\n            this.comp.setPinnedContainerWidth(widthWithPadding + 'px');\n            this.comp.addOrRemoveCssClass('ag-hidden', hidden);\n        };\n\n        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);\n    }\n\n    public getHeaderCtrlForColumn(column: Column): HeaderCellCtrl | undefined;\n    public getHeaderCtrlForColumn(column: ColumnGroup): HeaderGroupCellCtrl | undefined;\n    public getHeaderCtrlForColumn(column: any): any {\n        if (column instanceof Column) {\n            if (!this.columnsRowCtrl) { return; }\n            return this.columnsRowCtrl.getHeaderCellCtrl(column);\n        }\n\n        if (this.groupsRowCtrls.length === 0) { return; }\n\n        for (let i = 0; i < this.groupsRowCtrls.length; i++) {\n            const ctrl = this.groupsRowCtrls[i].getHeaderCellCtrl(column);\n\n            if (ctrl) { return ctrl; }\n        }\n    }\n\n    /* tslint:disable */\n    public getHtmlElementForColumnHeader(column: ColumnGroup): HTMLElement | null;\n    public getHtmlElementForColumnHeader(column: Column): HTMLElement | null;\n    public getHtmlElementForColumnHeader(column: any): any {\n    /* tslint:enable */\n        const cellCtrl = this.getHeaderCtrlForColumn(column);\n\n        if (!cellCtrl) { return null; }\n\n        return cellCtrl.getGui();\n    }\n\n    public getRowType(rowIndex: number): HeaderRowType | undefined {\n        const allCtrls = this.getAllCtrls();\n        const ctrl = allCtrls[rowIndex];\n        return ctrl ? ctrl.getType() : undefined;\n    }\n\n    public focusHeader(rowIndex: number, column: IHeaderColumn, event?: KeyboardEvent): boolean {\n        const allCtrls = this.getAllCtrls();\n        const ctrl = allCtrls[rowIndex];\n        if (!ctrl) { return false; }\n\n        return ctrl.focusHeader(column, event);\n    }\n\n    public getRowCount(): number {\n        return this.getAllCtrls().length;\n    }\n}"]}