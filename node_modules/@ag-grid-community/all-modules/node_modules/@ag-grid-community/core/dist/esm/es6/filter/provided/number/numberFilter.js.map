{"version":3,"sources":["../../../src/ts/filter/provided/number/numberFilter.ts"],"names":[],"mappings":"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","file":"numberFilter.js","sourcesContent":["import { RefSelector } from '../../../widgets/componentAnnotations';\nimport { _ } from '../../../utils';\nimport { ConditionPosition, ISimpleFilterModel, Tuple } from '../simpleFilter';\nimport { ScalarFilter, Comparator, IScalarFilterParams } from '../scalarFilter';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { makeNull } from '../../../utils/generic';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { isBrowserChrome, isBrowserEdge } from '../../../utils/browser';\n\nexport interface NumberFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'number'` */\n    filterType?: 'number';\n    /**\n     * The number value(s) associated with the filter.\n     * Custom filters can have no values (hence both are optional).\n     * Range filter has two values (from and to).\n     */\n    filter?: number | null;\n    /**\n     * Range filter `to` value.\n     */\n    filterTo?: number | null;\n}\n\nexport interface INumberFilterParams extends IScalarFilterParams {\n    /**\n     * When specified, the input field will be of type `text` instead of `number`, and this will be used as a regex of all the characters that are allowed to be typed.\n     * This will be compared against any typed character and prevent the character from appearing in the input if it does not match, in supported browsers (all except Safari).\n     */\n    allowedCharPattern?: string;\n    /**\n     * Typically used alongside `allowedCharPattern`, this provides a custom parser to convert the value entered in the filter inputs into a number that can be used for comparisons.\n     */\n    numberParser?: (text: string | null) => number;\n}\n\nexport class NumberFilter extends ScalarFilter<NumberFilterModel, number> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        ScalarFilter.EQUALS,\n        ScalarFilter.NOT_EQUAL,\n        ScalarFilter.LESS_THAN,\n        ScalarFilter.LESS_THAN_OR_EQUAL,\n        ScalarFilter.GREATER_THAN,\n        ScalarFilter.GREATER_THAN_OR_EQUAL,\n        ScalarFilter.IN_RANGE,\n        ScalarFilter.BLANK,\n        ScalarFilter.NOT_BLANK,\n    ];\n\n    @RefSelector('eValue-index0-1') private readonly eValueFrom1: AgInputTextField;\n    @RefSelector('eValue-index1-1') private readonly eValueTo1: AgInputTextField;\n\n    @RefSelector('eValue-index0-2') private readonly eValueFrom2: AgInputTextField;\n    @RefSelector('eValue-index1-2') private readonly eValueTo2: AgInputTextField;\n\n    private numberFilterParams: INumberFilterParams;\n\n    constructor() {\n        super('numberFilter');\n    }\n\n    protected mapValuesFromModel(filterModel: NumberFilterModel | null): Tuple<number> {\n        const { filter, filterTo, type } = filterModel || {};\n        return [\n            filter == null ? null : filter,\n            filterTo == null ? null : filterTo,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    protected comparator(): Comparator<number> {\n        return (left: number, right: number): number => {\n            if (left === right) { return 0; }\n\n            return left < right ? 1 : -1;\n        };\n    }\n\n    protected setParams(params: INumberFilterParams): void {\n        this.numberFilterParams = params;\n\n        const allowedCharPattern = this.getAllowedCharPattern();\n\n        if (allowedCharPattern) {\n            const config = { allowedCharPattern };\n\n            this.resetTemplate({\n                'eValue-index0-1': config,\n                'eValue-index1-1': config,\n                'eValue-index0-2': config,\n                'eValue-index1-2': config,\n            });\n        }\n\n        super.setParams(params);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return NumberFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueTemplate(position: ConditionPosition): string {\n        const pos = position === ConditionPosition.One ? '1' : '2';\n        const allowedCharPattern = this.getAllowedCharPattern();\n        const agElementTag = allowedCharPattern ? 'ag-input-text-field' : 'ag-input-number-field';\n\n        return /* html */`\n            <div class=\"ag-filter-body\" ref=\"eCondition${pos}Body\" role=\"presentation\">\n                <${agElementTag} class=\"ag-filter-from ag-filter-filter\" ref=\"eValue-index0-${pos}\"></${agElementTag}>\n                <${agElementTag} class=\"ag-filter-to ag-filter-filter\" ref=\"eValue-index1-${pos}\"></${agElementTag}>\n            </div>`;\n    }\n\n    protected getValues(position: ConditionPosition): Tuple<number> {\n        const result: Tuple<number> = [];\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (position === elPosition && index < numberOfInputs) {\n                result.push(this.stringToFloat(element.getValue()));\n            }\n        });\n\n        return result;\n    }\n\n    protected areSimpleModelsEqual(aSimple: NumberFilterModel, bSimple: NumberFilterModel): boolean {\n        return aSimple.filter === bSimple.filter\n            && aSimple.filterTo === bSimple.filterTo\n            && aSimple.type === bSimple.type;\n    }\n\n    protected getFilterType(): 'number' {\n        return 'number';\n    }\n\n    private stringToFloat(value?: string | number | null): number | null {\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        let filterText = makeNull(value);\n\n        if (filterText != null && filterText.trim() === '') {\n            filterText = null;\n        }\n\n        if (this.numberFilterParams.numberParser) {\n            return this.numberFilterParams.numberParser(filterText);\n        }\n\n        return filterText == null || filterText.trim() === '-' ? null : parseFloat(filterText);\n    }\n\n    protected createCondition(position: ConditionPosition): NumberFilterModel {\n        const type = this.getConditionTypes()[position];\n        const model: NumberFilterModel = {\n            filterType: this.getFilterType(),\n            type\n        };\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n\n        return model;\n    }\n\n    protected getInputs(): Tuple<AgInputTextField>[] {\n        return [\n            [this.eValueFrom1, this.eValueTo1],\n            [this.eValueFrom2, this.eValueTo2],\n        ];\n    }\n\n    private getAllowedCharPattern(): string | null {\n        const { allowedCharPattern } = this.numberFilterParams || {};\n\n        if (allowedCharPattern) {\n            return allowedCharPattern;\n        }\n\n        if (!isBrowserChrome() && !isBrowserEdge()) {\n            // only Chrome and Edge support the HTML5 number field, so for other browsers we provide an equivalent\n            // constraint instead\n            return '\\\\d\\\\-\\\\.';\n        }\n\n        return null;\n    }\n}\n"]}