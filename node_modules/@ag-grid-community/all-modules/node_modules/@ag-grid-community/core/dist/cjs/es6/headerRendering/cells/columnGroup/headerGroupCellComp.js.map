{"version":3,"sources":["../../../src/ts/headerRendering/cells/columnGroup/headerGroupCellComp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,sDAAoE;AACpE,gFAAoE;AACpE,mFAAgF;AAIhF,MAAa,mBAAoB,SAAQ,+CAA2C;IAWhF,YAAY,IAAyB;QACjC,KAAK,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAGO,aAAa;QAEjB,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAE3B,MAAM,YAAY,GAAG,CAAC,GAAW,EAAE,KAAyB,EAAE,EAAE,CACxD,KAAK,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAEvF,MAAM,SAAS,GAAyB;YACpC,mBAAmB,EAAE,CAAC,YAAY,EAAE,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,EAAE,CAAC;YACrF,4BAA4B,EAAE,CAAC,YAAY,EAAE,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,CAAC;YACnG,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK;YAC3C,QAAQ,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC/C,eAAe,EAAE,QAAQ,CAAC,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,QAAQ,CAAC;YACpE,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC;YAC/C,kBAAkB,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;SAClE,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC;IAEO,kBAAkB,CAAC,OAAwB;QAC/C,OAAO,CAAC,kBAAkB,EAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC;IAClF,CAAC;IAEO,sBAAsB,CAAC,eAAiC;QAE5D,MAAM,WAAW,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;QAE5D,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;YACjB,WAAW,EAAE,CAAC;YACd,OAAO;SACV;QAED,IAAI,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAEjC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;IACtD,CAAC;;AAnDc,4BAAQ,GACnB;;eAEO,CAAC;AAEuB;IAAlC,mBAAS,CAAC,sBAAsB,CAAC;iEAAoD;AAE9D;IAAvB,kCAAW,CAAC,SAAS,CAAC;oDAA8B;AAOrD;IADC,uBAAa;wDAmBb;AAlCL,kDAuDC","file":"headerGroupCellComp.js","sourcesContent":["import { UserCompDetails, UserComponentFactory } from \"../../../components/framework/userComponentFactory\";\nimport { Autowired, PostConstruct } from \"../../../context/context\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { AbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellComp\";\nimport { HeaderGroupCellCtrl, IHeaderGroupCellComp } from \"./headerGroupCellCtrl\";\nimport { IHeaderGroupComp } from \"./headerGroupComp\";\n\nexport class HeaderGroupCellComp extends AbstractHeaderCellComp<HeaderGroupCellCtrl> {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header-group-cell\" role=\"columnheader\" tabindex=\"-1\">\n            <div ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n        </div>`;\n\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    @RefSelector('eResize') private eResize: HTMLElement;\n\n    constructor(ctrl: HeaderGroupCellCtrl) {\n        super(HeaderGroupCellComp.TEMPLATE, ctrl);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        const eGui = this.getGui();\n\n        const setAttribute = (key: string, value: string | undefined) =>\n                value != undefined ? eGui.setAttribute(key, value) : eGui.removeAttribute(key);\n\n        const compProxy: IHeaderGroupCellComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveResizableCssClass: (cssClassName, on) => this.eResize.classList.toggle(cssClassName, on),\n            setWidth: width => eGui.style.width = width,\n            setColId: id => eGui.setAttribute(\"col-id\", id),\n            setAriaExpanded: expanded => setAttribute('aria-expanded', expanded),\n            setTitle: title => setAttribute(\"title\", title),\n            setUserCompDetails: details => this.setUserCompDetails(details)\n        };\n\n        this.ctrl.setComp(compProxy, eGui, this.eResize);\n    }\n\n    private setUserCompDetails(details: UserCompDetails): void {\n        details.newAgStackInstance()!.then(comp => this.afterHeaderCompCreated(comp));\n    }\n\n    private afterHeaderCompCreated(headerGroupComp: IHeaderGroupComp): void {\n\n        const destroyFunc = () => this.destroyBean(headerGroupComp);\n\n        if (!this.isAlive()) {\n            destroyFunc();\n            return;\n        }\n\n        this.getGui().appendChild(headerGroupComp.getGui());\n        this.addDestroyFunc(destroyFunc);\n\n        this.ctrl.setDragSource(headerGroupComp.getGui());\n    }\n\n}\n"]}