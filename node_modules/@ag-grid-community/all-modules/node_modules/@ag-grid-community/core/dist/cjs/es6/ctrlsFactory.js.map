{"version":3,"sources":["../../../src/ts/ctrlsFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,iDAA8C;AAC9C,+CAAyD;AAGzD,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,mBAAQ;IAA1C;;QAEY,aAAQ,GAAuC,EAAE,CAAC;IAc9D,CAAC;IAZU,QAAQ,CAAC,IAAoB;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;IAC9D,CAAC;IAEM,WAAW,CAAC,IAAY;QAC3B,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE5C,IAAI,eAAe,IAAI,IAAI,EAAE;YAAE,OAAO,SAAS,CAAC;SAAE;QAElD,OAAO,IAAI,eAAe,EAAE,CAAC;IACjC,CAAC;CAEJ,CAAA;AAhBY,YAAY;IADxB,cAAI,CAAC,cAAc,CAAC;GACR,YAAY,CAgBxB;AAhBY,oCAAY","file":"ctrlsFactory.js","sourcesContent":["import { BeanStub } from \"./context/beanStub\";\nimport { Bean, ControllerMeta } from \"./context/context\";\n\n@Bean('ctrlsFactory')\nexport class CtrlsFactory extends BeanStub {\n\n    private registry: {[name: string]: new () => Object} = {};\n\n    public register(meta: ControllerMeta): void {\n        this.registry[meta.controllerName] = meta.controllerClass;\n    }\n\n    public getInstance(name: string): any {\n        const ControllerClass = this.registry[name];\n\n        if (ControllerClass == null) { return undefined; }\n\n        return new ControllerClass();\n    }\n\n}"]}