{"version":3,"sources":["../../../src/ts/headerRendering/columnDrag/bodyDropTarget.ts"],"names":[],"mappings":"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","file":"bodyDropTarget.js","sourcesContent":["import { DragAndDropService, DraggingEvent, DragSourceType, DropTarget } from \"../../dragAndDrop/dragAndDropService\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { MoveColumnFeature } from \"./moveColumnFeature\";\nimport { BodyDropPivotTarget } from \"./bodyDropPivotTarget\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { CtrlsService } from \"../../ctrlsService\";\n\nexport interface DropListener {\n    getIconName(): string | null;\n    onDragEnter(params: DraggingEvent): void;\n    onDragLeave(params: DraggingEvent): void;\n    onDragging(params: DraggingEvent): void;\n    onDragStop(params: DraggingEvent): void;\n}\n\nexport class BodyDropTarget extends BeanStub implements DropTarget {\n\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private pinned: string | null;\n    // public because it's part of the DropTarget interface\n    private eContainer: HTMLElement;\n    // public because it's part of the DropTarget interface\n    private eSecondaryContainers: HTMLElement[][];\n    private currentDropListener: DropListener;\n\n    private moveColumnFeature: MoveColumnFeature;\n    private bodyDropPivotTarget: BodyDropPivotTarget;\n\n    constructor(pinned: string | null, eContainer: HTMLElement) {\n        super();\n        this.pinned = pinned;\n        this.eContainer = eContainer;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            switch (this.pinned) {\n                case Constants.PINNED_LEFT:\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.leftRowContainerCtrl.getContainerElement()],\n                        [p.bottomLeftRowContainerCtrl.getContainerElement()],\n                        [p.topLeftRowContainerCtrl.getContainerElement()]\n                    ];\n                    break;\n                case Constants.PINNED_RIGHT:\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.rightRowContainerCtrl.getContainerElement()],\n                        [p.bottomRightRowContainerCtrl.getContainerElement()],\n                        [p.topRightRowContainerCtrl.getContainerElement()]\n                    ];\n                    break;\n                default:\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.centerRowContainerCtrl.getViewportElement()],\n                        [p.bottomCenterRowContainerCtrl.getViewportElement()],\n                        [p.topCenterRowContainerCtrl.getViewportElement()]\n                    ];\n                    break;\n            }\n        });\n    }\n\n    public isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.HeaderCell ||\n            (type === DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel());\n    }\n\n    public getSecondaryContainers(): HTMLElement[][] {\n        return this.eSecondaryContainers;\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.moveColumnFeature = this.createManagedBean(new MoveColumnFeature(this.pinned, this.eContainer));\n        this.bodyDropPivotTarget = this.createManagedBean(new BodyDropPivotTarget(this.pinned));\n\n        this.dragAndDropService.addDropTarget(this);\n    }\n\n    public getIconName(): string | null {\n        return this.currentDropListener.getIconName();\n    }\n\n    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\n    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\n    // dropped into the grid's body.\n    private isDropColumnInPivotMode(draggingEvent: DraggingEvent): boolean {\n        // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\n        // a standard column move, however if it came from the toolpanel, then we are introducing\n        // dimensions or values to the grid\n        return this.columnModel.isPivotMode() && draggingEvent.dragSource.type === DragSourceType.ToolPanel;\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // we pick the drop listener depending on whether we are in pivot mode are not. if we are\n        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\n        // we change visibility state and position.\n        this.currentDropListener = this.isDropColumnInPivotMode(draggingEvent) ? this.bodyDropPivotTarget : this.moveColumnFeature;\n        this.currentDropListener.onDragEnter(draggingEvent);\n    }\n\n    public onDragLeave(params: DraggingEvent): void {\n        this.currentDropListener.onDragLeave(params);\n    }\n\n    public onDragging(params: DraggingEvent): void {\n        this.currentDropListener.onDragging(params);\n    }\n\n    public onDragStop(params: DraggingEvent): void {\n        this.currentDropListener.onDragStop(params);\n    }\n\n}\n"]}