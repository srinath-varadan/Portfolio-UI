{"version":3,"sources":["../../../src/ts/headerRendering/cells/cssClassApplier.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,+CAA8C;AAE9C;IAAA;IA4EA,CAAC;IA1EiB,0CAA0B,GAAxC,UACI,cAAqC,EACrC,kBAAsC,EACtC,MAAqB,EACrB,WAA+B;QAE/B,IAAI,iBAAO,CAAC,cAAc,CAAC,EAAE;YAAE,OAAO,EAAE,CAAC;SAAE;QAE3C,OAAO,IAAI,CAAC,2BAA2B,CACnC,cAAc,CAAC,WAAW,EAC1B,cAAc,EACd,kBAAkB,EAClB,MAAM,EACN,WAAW,CACd,CAAC;IACN,CAAC;IAEa,6CAA6B,GAA3C,UACI,cAAqC,EACrC,kBAAsC,EACtC,MAAqB,EACrB,WAAuC;QAEvC,IAAI,iBAAO,CAAC,cAAc,CAAC,EAAE;YAAE,OAAO,EAAE,CAAC;SAAE;QAE3C,OAAO,IAAI,CAAC,2BAA2B,CACnC,cAAc,CAAC,cAAc,EAC7B,cAAc,EACd,kBAAkB,EAClB,MAAM,EACN,WAAW,CACd,CAAC;IACN,CAAC;IAEc,8BAAc,GAA7B,UAAkF,cAA8B,EAC5G,kBAAsC,EACtC,MAAqB,EACrB,WAA6B;QAC7B,OAAO;YACH,yDAAyD;YACzD,uDAAuD;YACvD,8CAA8C;YAC9C,MAAM,EAAE,cAAc;YACtB,MAAM,EAAE,MAAM;YACd,WAAW,EAAE,WAAW;YACxB,GAAG,EAAE,kBAAkB,CAAC,MAAM,EAAG;YACjC,SAAS,EAAE,kBAAkB,CAAC,YAAY,EAAG;YAC7C,OAAO,EAAE,kBAAkB,CAAC,UAAU,EAAE;SACtC,CAAC;IACX,CAAC;IAEc,2CAA2B,GAA1C,UACI,aAAoG,EACpG,cAA8B,EAC9B,kBAAsC,EACtC,MAAqB,EACrB,WAAqD;QAErD,IAAI,iBAAO,CAAC,aAAa,CAAC,EAAE;YAAE,OAAO,EAAE,CAAC;SAAE;QAE1C,IAAI,UAAyC,CAAC;QAE9C,IAAI,OAAO,aAAa,KAAK,UAAU,EAAE;YACrC,IAAM,MAAM,GAAM,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,kBAAkB,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;YAC/F,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;SACtC;aAAM;YACH,UAAU,GAAG,aAAa,CAAC;SAC9B;QAED,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAAE,OAAO,CAAC,UAAU,CAAC,CAAC;SAAE;QAC5D,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YAAE,gBAAW,UAAU,EAAE;SAAE;QAE1D,OAAO,EAAE,CAAC;IACd,CAAC;IACL,sBAAC;AAAD,CA5EA,AA4EC,IAAA;AA5EY,0CAAe","file":"cssClassApplier.js","sourcesContent":["import { AbstractColDef, HeaderClassParams, ToolPanelClassParams } from \"../../entities/colDef\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { Column } from \"../../entities/column\";\nimport { ProvidedColumnGroup } from \"../../entities/providedColumnGroup\";\nimport { missing } from \"../../utils/generic\";\n\nexport class CssClassApplier {\n\n    public static getHeaderClassesFromColDef(\n        abstractColDef: AbstractColDef | null,\n        gridOptionsWrapper: GridOptionsWrapper,\n        column: Column | null,\n        columnGroup: ColumnGroup | null\n    ): string[] {\n        if (missing(abstractColDef)) { return []; }\n\n        return this.getColumnClassesFromCollDef(\n            abstractColDef.headerClass,\n            abstractColDef,\n            gridOptionsWrapper,\n            column,\n            columnGroup\n        );\n    }\n\n    public static getToolPanelClassesFromColDef(\n        abstractColDef: AbstractColDef | null,\n        gridOptionsWrapper: GridOptionsWrapper,\n        column: Column | null,\n        columnGroup: ProvidedColumnGroup | null\n    ): string[] {\n        if (missing(abstractColDef)) { return []; }\n\n        return this.getColumnClassesFromCollDef(\n            abstractColDef.toolPanelClass,\n            abstractColDef,\n            gridOptionsWrapper,\n            column,\n            columnGroup\n        );\n    }\n\n    private static getClassParams<T extends HeaderClassParams | ToolPanelClassParams>(abstractColDef: AbstractColDef,\n        gridOptionsWrapper: GridOptionsWrapper,\n        column: Column | null,\n        columnGroup: T['columnGroup']): T {\n        return {\n            // bad naming, as colDef here can be a group or a column,\n            // however most people won't appreciate the difference,\n            // so keeping it as colDef to avoid confusion.\n            colDef: abstractColDef,\n            column: column,\n            columnGroup: columnGroup,\n            api: gridOptionsWrapper.getApi()!,\n            columnApi: gridOptionsWrapper.getColumnApi()!,\n            context: gridOptionsWrapper.getContext()\n        } as T;\n    }\n\n    private static getColumnClassesFromCollDef<T extends HeaderClassParams | ToolPanelClassParams>(\n        classesOrFunc: string | string[] | ((params: T) => string | string[] | undefined) | null | undefined,\n        abstractColDef: AbstractColDef,\n        gridOptionsWrapper: GridOptionsWrapper,\n        column: Column | null,\n        columnGroup: ColumnGroup | ProvidedColumnGroup | null\n    ): string[] {\n        if (missing(classesOrFunc)) { return []; }\n\n        let classToUse: string | string[] | undefined;\n\n        if (typeof classesOrFunc === 'function') {\n            const params: T = this.getClassParams(abstractColDef, gridOptionsWrapper, column, columnGroup);\n            classToUse = classesOrFunc(params);\n        } else {\n            classToUse = classesOrFunc;\n        }\n\n        if (typeof classToUse === 'string') { return [classToUse]; }\n        if (Array.isArray(classToUse)) { return [...classToUse]; }\n\n        return [];\n    }\n}"]}