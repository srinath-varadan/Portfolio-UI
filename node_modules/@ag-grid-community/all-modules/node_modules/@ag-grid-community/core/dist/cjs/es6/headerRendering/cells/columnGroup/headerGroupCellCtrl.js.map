{"version":3,"sources":["../../../src/ts/headerRendering/cells/columnGroup/headerGroupCellCtrl.ts"],"names":[],"mappings":"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","file":"headerGroupCellCtrl.js","sourcesContent":["import { ColumnApi } from \"../../../columns/columnApi\";\nimport { ColumnModel } from \"../../../columns/columnModel\";\nimport { UserCompDetails, UserComponentFactory } from \"../../../components/framework/userComponentFactory\";\nimport { KeyCode } from '../../../constants/keyCode';\nimport { Autowired } from \"../../../context/context\";\nimport {\n    DragAndDropService,\n    DragItem,\n    DragSource,\n    DragSourceType\n} from \"../../../dragAndDrop/dragAndDropService\";\nimport { Column } from \"../../../entities/column\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup\";\nimport { GridApi } from \"../../../gridApi\";\nimport { Beans } from \"../../../rendering/beans\";\nimport { SetLeftFeature } from \"../../../rendering/features/setLeftFeature\";\nimport { removeFromArray } from \"../../../utils/array\";\nimport { ManagedFocusFeature } from \"../../../widgets/managedFocusFeature\";\nimport { ITooltipFeatureComp, ITooltipFeatureCtrl, TooltipFeature } from \"../../../widgets/tooltipFeature\";\nimport { HeaderRowCtrl } from \"../../row/headerRowCtrl\";\nimport { AbstractHeaderCellCtrl, IAbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellCtrl\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { GroupResizeFeature } from \"./groupResizeFeature\";\nimport { GroupWidthFeature } from \"./groupWidthFeature\";\nimport { IHeaderGroupParams } from \"./headerGroupComp\";\n\nexport interface IHeaderGroupCellComp extends IAbstractHeaderCellComp, ITooltipFeatureComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    addOrRemoveResizableCssClass(cssClassName: string, on: boolean): void;\n    setWidth(width: string): void;\n    setColId(id: string): void;\n    setAriaExpanded(expanded: 'true' | 'false' | undefined): void;\n    setUserCompDetails(compDetails: UserCompDetails): void;\n}\n\nexport class HeaderGroupCellCtrl extends AbstractHeaderCellCtrl {\n\n    @Autowired('beans') protected beans: Beans;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n\n    private columnGroup: ColumnGroup;\n    private comp: IHeaderGroupCellComp;\n\n    private expandable: boolean;\n    private displayName: string | null;\n    private groupResizeFeature: GroupResizeFeature;\n\n    constructor(columnGroup: ColumnGroup, parentRowCtrl: HeaderRowCtrl) {\n        super(columnGroup, parentRowCtrl);\n        this.columnGroup = columnGroup;\n    }\n\n    public setComp(comp: IHeaderGroupCellComp, eGui: HTMLElement, eResize: HTMLElement): void {\n        super.setGui(eGui);\n        this.comp = comp;\n\n        this.displayName = this.columnModel.getDisplayNameForColumnGroup(this.columnGroup, 'header');\n\n        this.addClasses();\n        this.addAttributes();\n        this.setupMovingCss();\n        this.setupExpandable();\n        this.setupTooltip();\n        this.setupUserComp();\n\n        const pinned = this.getParentRowCtrl().getPinned();\n        const leafCols = this.columnGroup.getProvidedColumnGroup().getLeafColumns();\n\n        this.createManagedBean(new HoverFeature(leafCols, eGui));\n        this.createManagedBean(new SetLeftFeature(this.columnGroup, eGui, this.beans));\n        this.createManagedBean(new GroupWidthFeature(comp, this.columnGroup));\n        this.groupResizeFeature = this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.columnGroup));\n\n        this.createManagedBean(new ManagedFocusFeature(\n            eGui,\n            {\n                shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n                onTabKeyDown: () => undefined,\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusIn: this.onFocusIn.bind(this)\n            }\n        ));\n    }\n\n    public resizeLeafColumnsToFit(): void {\n        this.groupResizeFeature.onResizeStart(false);\n        this.groupResizeFeature.resizeLeafColumnsToFit();\n    }\n\n    private setupUserComp(): void {\n\n        let displayName = this.displayName;\n\n        const params: IHeaderGroupParams = {\n            displayName: this.displayName!,\n            columnGroup: this.columnGroup,\n            setExpanded: (expanded: boolean) => {\n                this.columnModel.setColumnGroupOpened(this.columnGroup.getProvidedColumnGroup(), expanded, \"gridInitializing\");\n            },\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsWrapper.getContext()\n        };\n\n        if (!displayName) {\n            let columnGroup = this.columnGroup;\n            const leafCols = columnGroup.getLeafColumns();\n\n            // find the top most column group that represents the same columns. so if we are dragging a group, we also\n            // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels\n            // of grouping, with each group only containing the next group, and the last group containing three columns,\n            // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all\n            // the groups represent the same column set.\n            while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {\n                columnGroup = columnGroup.getParent();\n            }\n\n            const colGroupDef = columnGroup.getColGroupDef();\n\n            if (colGroupDef) {\n                displayName = colGroupDef.headerName!;\n            }\n\n            if (!displayName) {\n                displayName = leafCols ? this.columnModel.getDisplayNameForColumn(leafCols[0], 'header', true)! : '';\n            }\n        }\n\n        const compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params)!;\n\n        this.comp.setUserCompDetails(compDetails);\n    }\n\n    private setupTooltip(): void {\n\n        const colGroupDef = this.columnGroup.getColGroupDef();\n\n        const tooltipCtrl: ITooltipFeatureCtrl = {\n            getColumn: () => this.columnGroup,\n            getGui: () => this.eGui,\n            getLocation: () => 'headerGroup',\n            getTooltipValue: () => colGroupDef && colGroupDef.headerTooltip\n        };\n\n        if (colGroupDef) {\n            tooltipCtrl.getColDef = () => colGroupDef;\n        }\n\n        const tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));\n\n        tooltipFeature.setComp(this.comp);\n    }\n\n    private setupExpandable(): void {\n        const providedColGroup = this.columnGroup.getProvidedColumnGroup();\n\n        this.refreshExpanded();\n\n        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));\n        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));\n    }\n\n    private refreshExpanded(): void {\n        const column = this.columnGroup as ColumnGroup;\n        this.expandable = column.isExpandable();\n        const expanded = column.isExpanded();\n\n        if (this.expandable) {\n            this.comp.setAriaExpanded(expanded ? 'true' : 'false');\n        } else {\n            this.comp.setAriaExpanded(undefined);\n        }\n    }\n\n    private addAttributes(): void {\n        this.comp.setColId(this.columnGroup.getUniqueId());\n    }\n\n    private addClasses(): void {\n        const colGroupDef = this.columnGroup.getColGroupDef();\n        const classes = CssClassApplier.getHeaderClassesFromColDef(colGroupDef, this.gridOptionsWrapper, null, this.columnGroup);\n\n        // having different classes below allows the style to not have a bottom border\n        // on the group header, if no group is specified\n        classes.push(this.columnGroup.isPadding() ? `ag-header-group-cell-no-group` : `ag-header-group-cell-with-group`);\n\n        classes.forEach(c => this.comp.addOrRemoveCssClass(c, true));\n    }\n\n    private setupMovingCss(): void {\n        const providedColumnGroup = this.columnGroup.getProvidedColumnGroup();\n        const leafColumns = providedColumnGroup.getLeafColumns();\n\n        // this function adds or removes the moving css, based on if the col is moving.\n        // this is what makes the header go dark when it is been moved (gives impression to\n        // user that the column was picked up).\n        const listener = () => this.comp.addOrRemoveCssClass('ag-header-cell-moving', this.columnGroup.isMoving());\n\n        leafColumns.forEach(col => {\n            this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, listener);\n        });\n\n        listener();\n    }\n\n    protected onFocusIn(e: FocusEvent) {\n        if (!this.eGui.contains(e.relatedTarget as HTMLElement)) {\n            const rowIndex = this.getRowIndex();\n            this.beans.focusService.setFocusedHeader(rowIndex, this.columnGroup);\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent) {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const activeEl = eDocument.activeElement;\n        const wrapperHasFocus = activeEl === this.eGui;\n\n        if (!this.expandable || !wrapperHasFocus) { return; }\n\n        if (e.key === KeyCode.ENTER) {\n            const column = this.columnGroup;\n            const newExpandedValue = !column.isExpanded();\n\n            this.columnModel.setColumnGroupOpened(column.getProvidedColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        }\n    }\n\n    // unlike columns, this will only get called once, as we don't react on props on column groups\n    // (we will always destroy and recreate this comp if something changes)\n    public setDragSource(eHeaderGroup: HTMLElement): void {\n\n        if (this.isSuppressMoving()) { return; }\n\n        const allLeafColumns = this.columnGroup.getProvidedColumnGroup().getLeafColumns();\n        const dragSource: DragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eHeaderGroup,\n            defaultIconName: DragAndDropService.ICON_HIDE,\n            dragItemName: this.displayName,\n            // we add in the original group leaf columns, so we move both visible and non-visible items\n            getDragItem: this.getDragItemForGroup.bind(this),\n            onDragStarted: () => allLeafColumns.forEach(col => col.setMoving(true, \"uiColumnDragged\")),\n            onDragStopped: () => allLeafColumns.forEach(col => col.setMoving(false, \"uiColumnDragged\"))\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n    // and in the order they are currently in the screen.\n    public getDragItemForGroup(): DragItem {\n        const allColumnsOriginalOrder = this.columnGroup.getProvidedColumnGroup().getLeafColumns();\n\n        // capture visible state, used when re-entering grid to dictate which columns should be visible\n        const visibleState: { [key: string]: boolean; } = {};\n        allColumnsOriginalOrder.forEach(column => visibleState[column.getId()] = column.isVisible());\n\n        const allColumnsCurrentOrder: Column[] = [];\n        this.columnModel.getAllDisplayedColumns().forEach(column => {\n            if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n                allColumnsCurrentOrder.push(column);\n                removeFromArray(allColumnsOriginalOrder, column);\n            }\n        });\n\n        // we are left with non-visible columns, stick these in at the end\n        allColumnsOriginalOrder.forEach(column => allColumnsCurrentOrder.push(column));\n\n        // create and return dragItem\n        return {\n            columns: allColumnsCurrentOrder,\n            visibleState: visibleState\n        };\n    }\n\n    private isSuppressMoving(): boolean {\n        // if any child is fixed, then don't allow moving\n        let childSuppressesMoving = false;\n        this.columnGroup.getLeafColumns().forEach((column: Column) => {\n            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n                childSuppressesMoving = true;\n            }\n        });\n\n        const result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();\n\n        return result;\n    }\n}\n"]}