{"version":3,"sources":["../../../src/ts/gridBodyComp/gridBodyComp.ts"],"names":[],"mappings":"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","file":"gridBodyComp.js","sourcesContent":["import { Autowired, Optional, PostConstruct } from '../context/context';\nimport { GridHeaderComp } from '../headerRendering/gridHeaderComp';\nimport { IRangeService } from '../interfaces/IRangeService';\nimport { ResizeObserverService } from '../misc/resizeObserverService';\nimport { LayoutCssClasses } from \"../styling/layoutFeature\";\nimport { setAriaColCount, setAriaMultiSelectable, setAriaRowCount } from '../utils/aria';\nimport { Component } from '../widgets/component';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport {\n    CSS_CLASS_CELL_SELECTABLE,\n    CSS_CLASS_COLUMN_MOVING,\n    CSS_CLASS_FORCE_VERTICAL_SCROLL,\n    GridBodyCtrl,\n    IGridBodyComp,\n    RowAnimationCssClasses\n} from \"./gridBodyCtrl\";\nimport { RowContainerName } from \"./rowContainer/rowContainerCtrl\";\n\nconst GRID_BODY_TEMPLATE = /* html */\n    `<div class=\"ag-root ag-unselectable\" role=\"grid\">\n        <ag-header-root ref=\"gridHeader\"></ag-header-root>\n        <div class=\"ag-floating-top\" ref=\"eTop\" role=\"presentation\">\n            <ag-row-container ref=\"topLeftContainer\" name=\"${RowContainerName.TOP_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"topCenterContainer\" name=\"${RowContainerName.TOP_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"topRightContainer\" name=\"${RowContainerName.TOP_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"topFullWidthContainer\" name=\"${RowContainerName.TOP_FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <div class=\"ag-body-viewport\" ref=\"eBodyViewport\" role=\"presentation\">\n            <ag-row-container ref=\"leftContainer\" name=\"${RowContainerName.LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"centerContainer\" name=\"${RowContainerName.CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"rightContainer\" name=\"${RowContainerName.RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"fullWidthContainer\" name=\"${RowContainerName.FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <div class=\"ag-floating-bottom\" ref=\"eBottom\" role=\"presentation\">\n            <ag-row-container ref=\"bottomLeftContainer\" name=\"${RowContainerName.BOTTOM_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"bottomCenterContainer\" name=\"${RowContainerName.BOTTOM_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"bottomRightContainer\" name=\"${RowContainerName.BOTTOM_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"bottomFullWidthContainer\" name=\"${RowContainerName.BOTTOM_FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>`;\n\nexport class GridBodyComp extends Component {\n\n    @Autowired('resizeObserverService') private resizeObserverService: ResizeObserverService;\n\n    @Optional('rangeService') private rangeService: IRangeService;\n\n    @RefSelector('eBodyViewport') private eBodyViewport: HTMLElement;\n    @RefSelector('eTop') private eTop: HTMLElement;\n    @RefSelector('eBottom') private eBottom: HTMLElement;\n    @RefSelector('gridHeader') headerRootComp: GridHeaderComp;\n\n    private ctrl: GridBodyCtrl;\n\n    constructor() {\n        super(GRID_BODY_TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n\n        const setHeight = (height: number, element: HTMLElement) => {\n            const heightString = `${height}px`;\n            element.style.minHeight = heightString;\n            element.style.height = heightString;\n        };\n\n        const compProxy: IGridBodyComp = {\n            setRowAnimationCssOnBodyViewport: (cssClass, animate) => this.setRowAnimationCssOnBodyViewport(cssClass, animate),\n            setColumnCount: count => setAriaColCount(this.getGui(), count),\n            setRowCount: count => setAriaRowCount(this.getGui(), count),\n            setTopHeight: height => setHeight(height, this.eTop),\n            setBottomHeight: height => setHeight(height, this.eBottom),\n            setTopDisplay: display => this.eTop.style.display = display,\n            setBottomDisplay: display => this.eBottom.style.display = display,\n            setColumnMovingCss: (cssClass, flag) => this.addOrRemoveCssClass(CSS_CLASS_COLUMN_MOVING, flag),\n            updateLayoutClasses: (cssClass, params) => {\n                const bodyViewportClassList = this.eBodyViewport.classList;\n                bodyViewportClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                bodyViewportClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n                bodyViewportClassList.toggle(LayoutCssClasses.PRINT, params.print);\n\n                this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\n                this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\n            },\n            setAlwaysVerticalScrollClass: (cssClass, on) =>\n                this.eBodyViewport.classList.toggle(CSS_CLASS_FORCE_VERTICAL_SCROLL, on),\n            registerBodyViewportResizeListener: listener => {\n                const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eBodyViewport, listener);\n                this.addDestroyFunc(() => unsubscribeFromResize());\n            },\n            setPinnedTopBottomOverflowY: overflow => this.eTop.style.overflowY = this.eBottom.style.overflowY = overflow,\n            setCellSelectableCss: (cssClass, selectable) => {\n                [this.eTop, this.eBodyViewport, this.eBottom]\n                    .forEach(ct => ct.classList.toggle(CSS_CLASS_CELL_SELECTABLE, selectable));\n            },\n        };\n\n        this.ctrl = this.createManagedBean(new GridBodyCtrl());\n        this.ctrl.setComp(compProxy, this.getGui(), this.eBodyViewport, this.eTop, this.eBottom);\n\n        if (this.rangeService || this.gridOptionsWrapper.isRowSelectionMulti()) {\n            setAriaMultiSelectable(this.getGui(), true);\n        }\n    }\n\n    private setRowAnimationCssOnBodyViewport(cssClass: string, animateRows: boolean): void {\n        const bodyViewportClassList = this.eBodyViewport.classList;\n        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_ON, animateRows);\n        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_OFF, !animateRows);\n    }\n\n    public getFloatingTopBottom(): HTMLElement[] {\n        return [this.eTop, this.eBottom];\n    }\n}\n"]}