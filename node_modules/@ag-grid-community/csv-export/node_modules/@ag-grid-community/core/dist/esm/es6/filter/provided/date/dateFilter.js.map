{"version":3,"sources":["../../../src/ts/filter/provided/date/dateFilter.ts"],"names":[],"mappings":"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","file":"dateFilter.js","sourcesContent":["import { RefSelector } from '../../../widgets/componentAnnotations';\nimport { Autowired } from '../../../context/context';\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { DateCompWrapper } from './dateCompWrapper';\nimport { ConditionPosition, ISimpleFilterModel, Tuple } from '../simpleFilter';\nimport { Comparator, IScalarFilterParams, ScalarFilter } from '../scalarFilter';\nimport { serialiseDate, parseDateTimeFromString } from '../../../utils/date';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\n\n// The date filter model takes strings, although the filter actually works with dates. This is because a Date object\n// won't convert easily to JSON. When the model is used for doing the filtering, it's converted to a Date object.\nexport interface DateFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'date'` */\n    filterType?: 'date';\n    /**\n     * The date value(s) associated with the filter. The type is `string` and format is always\n     * `YYYY-MM-DD hh:mm:ss` e.g. 2019-05-24 00:00:00. Custom filters can have no values (hence both\n     * are optional). Range filter has two values (from and to).\n     */\n    dateFrom: string | null;\n    /**\n     * Range filter `to` date value.\n     */\n    dateTo: string | null;\n}\n\nexport interface IDateFilterParams extends IScalarFilterParams {\n    /** Required if the data for the column are not native JS `Date` objects. */\n    comparator?: IDateComparatorFunc;\n    /**\n     * This is only used if a date component is not provided.\n     * By default the grid will use the browser date picker in Chrome and Firefox and a plain text box for all other browsers\n     * (This is because Chrome and Firefox are the only current browsers providing a decent out-of-the-box date picker).\n     * If this property is set to `true`, the browser date picker will be used regardless of the browser type.\n     * If set to `false`, a plain text box will be used for all browsers.\n     */\n    browserDatePicker?: boolean;\n    /** This is the minimum year that may be entered in a date field for the value to be considered valid. Default: `1000` */\n    minValidYear?: number;\n    /** This is the maximum year that may be entered in a date field for the value to be considered valid. Default is no restriction. */\n    maxValidYear?: number;\n}\n\nexport interface IDateComparatorFunc {\n    (filterLocalDateAtMidnight: Date, cellValue: any): number;\n}\n\nconst DEFAULT_MIN_YEAR = 1000;\nconst DEFAULT_MAX_YEAR = Infinity;\n\nexport class DateFilter extends ScalarFilter<DateFilterModel, Date, DateCompWrapper> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        ScalarFilter.EQUALS,\n        ScalarFilter.GREATER_THAN,\n        ScalarFilter.LESS_THAN,\n        ScalarFilter.NOT_EQUAL,\n        ScalarFilter.IN_RANGE,\n        ScalarFilter.BLANK,\n        ScalarFilter.NOT_BLANK,\n    ];\n\n    @RefSelector('eCondition1PanelFrom') private readonly eCondition1PanelFrom: HTMLElement;\n    @RefSelector('eCondition1PanelTo') private readonly eCondition1PanelTo: HTMLElement;\n    @RefSelector('eCondition2PanelFrom') private readonly eCondition2PanelFrom: HTMLElement;\n    @RefSelector('eCondition2PanelTo') private readonly eCondition2PanelTo: HTMLElement;\n\n    private dateCondition1FromComp: DateCompWrapper;\n    private dateCondition1ToComp: DateCompWrapper;\n    private dateCondition2FromComp: DateCompWrapper;\n    private dateCondition2ToComp: DateCompWrapper;\n\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n\n    private dateFilterParams: IDateFilterParams;\n    private minValidYear: number = DEFAULT_MIN_YEAR;\n    private maxValidYear: number = DEFAULT_MAX_YEAR;\n\n    constructor() {\n        super('dateFilter');\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        super.afterGuiAttached(params);\n\n        this.dateCondition1FromComp.afterGuiAttached(params);\n    }\n\n    protected mapValuesFromModel(filterModel: DateFilterModel | null): Tuple<Date> {\n        // unlike the other filters, we do two things here:\n        // 1) allow for different attribute names (same as done for other filters) (eg the 'from' and 'to'\n        //    are in different locations in Date and Number filter models)\n        // 2) convert the type (because Date filter uses Dates, however model is 'string')\n        //\n        // NOTE: The conversion of string to date also removes the timezone - i.e. when user picks\n        //       a date from the UI, it will have timezone info in it. This is lost when creating\n        //       the model. When we recreate the date again here, it's without a timezone.\n        const { dateFrom, dateTo, type } = filterModel || {};\n        return [\n            dateFrom && parseDateTimeFromString(dateFrom) || null,\n            dateTo && parseDateTimeFromString(dateTo) || null,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected comparator(): Comparator<Date> {\n        return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);\n    }\n\n    private defaultComparator(filterDate: Date, cellValue: any): number {\n        // The default comparator assumes that the cellValue is a date\n        const cellAsDate = cellValue as Date;\n\n        if (cellValue == null || cellAsDate < filterDate) { return -1; }\n        if (cellAsDate > filterDate) { return 1; }\n\n        return 0;\n    }\n\n    protected setParams(params: IDateFilterParams): void {\n        super.setParams(params);\n\n        this.dateFilterParams = params;\n\n        const yearParser = (param: keyof IDateFilterParams, fallback: number) => {\n            if (params[param] != null) {\n                if (!isNaN(params[param])) {\n                    return params[param] == null ? fallback : Number(params[param]);\n                } else {\n                    console.warn(`AG Grid: DateFilter ${param} is not a number`);\n                }\n            }\n\n            return fallback;\n        };\n        this.minValidYear = yearParser('minValidYear', DEFAULT_MIN_YEAR);\n        this.maxValidYear = yearParser('maxValidYear', DEFAULT_MAX_YEAR);\n\n        if (this.minValidYear > this.maxValidYear) {\n            console.warn(`AG Grid: DateFilter minValidYear should be <= maxValidYear`);\n        }\n\n        this.createDateComponents();\n    }\n\n    private createDateComponents(): void {\n        const createDateCompWrapper = (element: HTMLElement) =>\n            new DateCompWrapper(\n                this.getContext(),\n                this.userComponentFactory,\n                {\n                    onDateChanged: () => this.onUiChanged(),\n                    filterParams: this.dateFilterParams\n                },\n                element);\n\n        this.dateCondition1FromComp = createDateCompWrapper(this.eCondition1PanelFrom);\n        this.dateCondition1ToComp = createDateCompWrapper(this.eCondition1PanelTo);\n        this.dateCondition2FromComp = createDateCompWrapper(this.eCondition2PanelFrom);\n        this.dateCondition2ToComp = createDateCompWrapper(this.eCondition2PanelTo);\n\n        this.addDestroyFunc(() => {\n            this.forEachInput((element) => element.destroy());\n        });\n    }\n\n    protected setElementValue(element: DateCompWrapper, value: Date | null, silent?: boolean): void {\n        element.setDate(value);\n    }\n\n    protected setElementDisplayed(element: DateCompWrapper, displayed: boolean): void {\n        element.setDisplayed(displayed);\n    }\n\n    protected setElementDisabled(element: DateCompWrapper, disabled: boolean): void {\n        element.setDisabled(disabled);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DateFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueTemplate(position: ConditionPosition): string {\n        const pos = position === ConditionPosition.One ? '1' : '2';\n\n        return /* html */`\n            <div class=\"ag-filter-body\" ref=\"eCondition${pos}Body\">\n                <div class=\"ag-filter-from ag-filter-date-from\" ref=\"eCondition${pos}PanelFrom\"></div>\n                <div class=\"ag-filter-to ag-filter-date-to\" ref=\"eCondition${pos}PanelTo\"></div>\n            </div>`;\n    }\n\n    protected isConditionUiComplete(position: ConditionPosition): boolean {\n        if (!super.isConditionUiComplete(position)) {\n            return false;\n        }\n\n        const isValidDate = (value: Date | null) => value != null\n            && value.getUTCFullYear() >= this.minValidYear\n            && value.getUTCFullYear() <= this.maxValidYear;\n\n        let valid = true;\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (elPosition !== position || !valid || index >= numberOfInputs) {\n                return;\n            }\n            valid = valid && isValidDate(element.getDate());\n        });\n\n        return valid;\n    }\n\n    protected areSimpleModelsEqual(aSimple: DateFilterModel, bSimple: DateFilterModel): boolean {\n        return aSimple.dateFrom === bSimple.dateFrom\n            && aSimple.dateTo === bSimple.dateTo\n            && aSimple.type === bSimple.type;\n        }\n\n    protected getFilterType(): 'date' {\n        return 'date';\n    }\n\n    protected createCondition(position: ConditionPosition): DateFilterModel {\n        const type = this.getConditionTypes()[position];\n        const model: Partial<DateFilterModel> = {};\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.dateFrom = serialiseDate(values[0]);\n        }\n        if (values.length > 1) {\n            model.dateTo = serialiseDate(values[1]);\n        }\n\n        return {\n            dateFrom: null,\n            dateTo: null,\n            filterType: this.getFilterType(),\n            type,\n            ...model,\n        };\n    }\n\n    protected resetPlaceholder(): void {\n        const globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const placeholder = this.translate('dateFormatOoo');\n        const ariaLabel = globalTranslate('ariaFilterValue', 'Filter Value');\n\n        this.forEachInput((element) => {\n            element.setInputPlaceholder(placeholder);\n            element.setInputAriaLabel(ariaLabel);\n        });\n    }\n\n    protected getInputs(): Tuple<DateCompWrapper>[] {\n        return [\n            [this.dateCondition1FromComp, this.dateCondition1ToComp],\n            [this.dateCondition2FromComp, this.dateCondition2ToComp],\n        ];\n    }\n\n    protected getValues(position: ConditionPosition): Tuple<Date> {\n        const result: Tuple<Date> = [];\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (position === elPosition && index < numberOfInputs) {\n                result.push(element.getDate());\n            }\n        });\n\n        return result;\n    }\n}\n"]}