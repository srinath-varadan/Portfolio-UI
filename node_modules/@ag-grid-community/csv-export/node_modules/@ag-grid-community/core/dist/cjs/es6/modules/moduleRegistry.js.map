{"version":3,"sources":["../../../src/ts/modules/moduleRegistry.ts"],"names":[],"mappings":";;;;;;;;AAEA,gDAA2C;AAC3C,8CAA0C;AAE1C,MAAa,cAAc;IAMhB,MAAM,CAAC,QAAQ,CAAC,MAAc,EAAE,WAAW,GAAG,IAAI;QACrD,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;QAEtD,IAAI,cAAc,CAAC,WAAW,KAAK,SAAS,EAAE;YAC1C,cAAc,CAAC,WAAW,GAAG,WAAW,CAAC;SAC5C;aAAM;YACH,IAAI,cAAc,CAAC,WAAW,KAAK,WAAW,EAAE;gBAC5C,iBAAM,CAAC,GAAG,EAAE;oBACR,OAAO,CAAC,IAAI,CAAC,0JAA0J,CAAC,CAAC;oBACzK,OAAO,CAAC,IAAI,CAAC,4FAA4F,CAAC,CAAC;gBAE/G,CAAC,EACG,oBAAoB,CAAC,CAAC;aAC7B;SACJ;IACL,CAAC;IAED,qCAAqC;IAC9B,MAAM,CAAC,eAAe,CAAC,OAAiB,EAAE,WAAW,GAAG,IAAI;QAC/D,IAAI,CAAC,OAAO,EAAE;YACV,OAAO;SACV;QACD,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;IAC5E,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,UAAuB,EAAE,MAAc;QAClE,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;YAC/B,OAAO,IAAI,CAAC;SACf;QAED,MAAM,UAAU,GAAG,MAAM,GAAG,UAAU,CAAC;QACvC,IAAI,cAAsB,CAAC;QAC3B,IAAI,cAAc,CAAC,WAAW,EAAE;YAC5B,cAAc,GAAG,0BAA0B,MAAM,cAAc,UAAU,+EAA+E,CAAC;SAC5J;aAAM;YACH,cAAc,GAAG,0BAA0B,MAAM,gHAAgH,CAAC;SACrK;QAED,iBAAM,CAAC,GAAG,EAAE;YACR,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACjC,CAAC,EAAE,UAAU,CAAC,CAAC;QAEf,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,UAAuB;QAC9C,OAAO,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IACnD,CAAC;IAEM,MAAM,CAAC,oBAAoB;QAC9B,OAAO,gBAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAEM,MAAM,CAAC,cAAc;QACxB,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC;IACvC,CAAC;;AA7DL,wCA8DC;AA5DG,kEAAkE;AACnD,yBAAU,GAAgC,EAAE,CAAC","file":"moduleRegistry.js","sourcesContent":["import { Module } from \"../interfaces/iModule\";\nimport { ModuleNames } from \"./moduleNames\";\nimport { doOnce } from \"../utils/function\";\nimport { values } from \"../utils/generic\";\n\nexport class ModuleRegistry {\n\n    // having in a map a) removes duplicates and b) allows fast lookup\n    private static modulesMap: { [name: string]: Module; } = {};\n    private static moduleBased: boolean | undefined;\n\n    public static register(module: Module, moduleBased = true): void {\n        ModuleRegistry.modulesMap[module.moduleName] = module;\n\n        if (ModuleRegistry.moduleBased === undefined) {\n            ModuleRegistry.moduleBased = moduleBased;\n        } else {\n            if (ModuleRegistry.moduleBased !== moduleBased) {\n                doOnce(() => {\n                    console.warn(`AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.`);\n                    console.warn('Please see https://www.ag-grid.com/javascript-grid/packages-modules/ for more information.');\n\n                },\n                    'ModulePackageCheck');\n            }\n        }\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    public static registerModules(modules: Module[], moduleBased = true): void {\n        if (!modules) {\n            return;\n        }\n        modules.forEach(module => ModuleRegistry.register(module, moduleBased));\n    }\n\n    public static assertRegistered(moduleName: ModuleNames, reason: string): boolean {\n        if (this.isRegistered(moduleName)) {\n            return true;\n        }\n\n        const warningKey = reason + moduleName;\n        let warningMessage: string;\n        if (ModuleRegistry.moduleBased) {\n            warningMessage = `AG Grid: unable to use ${reason} as module ${moduleName} is not present. Please see: https://www.ag-grid.com/javascript-grid/modules/`;\n        } else {\n            warningMessage = `AG Grid: unable to use ${reason} as package 'ag-grid-enterprise' is not present. Please see: https://www.ag-grid.com/javascript-grid/packages/`;\n        }\n\n        doOnce(() => {\n            console.warn(warningMessage);\n        }, warningKey);\n\n        return false;\n    }\n\n    public static isRegistered(moduleName: ModuleNames): boolean {\n        return !!ModuleRegistry.modulesMap[moduleName];\n    }\n\n    public static getRegisteredModules(): Module[] {\n        return values(ModuleRegistry.modulesMap);\n    }\n\n    public static isPackageBased(): boolean {\n        return !ModuleRegistry.moduleBased;\n    }\n}\n"]}