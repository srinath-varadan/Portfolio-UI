{"version":3,"sources":["../../../src/ts/rendering/cell/cellRangeFeature.ts"],"names":[],"mappings":"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","file":"cellRangeFeature.js","sourcesContent":["import { Beans } from \"../beans\";\nimport {\n    CellCtrl,\n    ICellComp\n} from \"./cellCtrl\";\nimport { includes, last } from \"../../utils/array\";\nimport { CellRangeType, ISelectionHandle, SelectionHandleType } from \"../../interfaces/IRangeService\";\nimport { Column } from \"../../entities/column\";\nimport { missing } from \"../../utils/generic\";\nimport { setAriaSelected } from \"../../utils/aria\";\n\nconst CSS_CELL_RANGE_SELECTED = 'ag-cell-range-selected';\nconst CSS_CELL_RANGE_CHART = 'ag-cell-range-chart';\nconst CSS_CELL_RANGE_SINGLE_CELL = 'ag-cell-range-single-cell';\nconst CSS_CELL_RANGE_CHART_CATEGORY = 'ag-cell-range-chart-category';\nconst CSS_CELL_RANGE_HANDLE = 'ag-cell-range-handle';\nconst CSS_CELL_RANGE_TOP = 'ag-cell-range-top';\nconst CSS_CELL_RANGE_RIGHT = 'ag-cell-range-right';\nconst CSS_CELL_RANGE_BOTTOM = 'ag-cell-range-bottom';\nconst CSS_CELL_RANGE_LEFT = 'ag-cell-range-left';\n\nexport class CellRangeFeature {\n\n    private beans: Beans;\n    private cellComp: ICellComp;\n    private cellCtrl: CellCtrl;\n    private eGui: HTMLElement;\n\n    private rangeCount: number;\n    private hasChartRange: boolean;\n\n    private selectionHandle: ISelectionHandle | null | undefined;\n\n    constructor(beans: Beans, ctrl: CellCtrl) {\n        this.beans = beans;\n        this.cellCtrl = ctrl;\n    }\n\n    public setComp(cellComp: ICellComp, eGui: HTMLElement): void {\n        this.cellComp = cellComp;\n        this.eGui = eGui;\n        this.onRangeSelectionChanged();\n    }\n\n    public onRangeSelectionChanged(): void {\n        // when using reactUi, given UI is async, it's possible this method is called before the comp is registered\n        if (!this.cellComp) { return; }\n\n        this.rangeCount = this.beans.rangeService.getCellRangeCount(this.cellCtrl.getCellPosition());\n        this.hasChartRange = this.getHasChartRange();\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED, this.rangeCount !== 0);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-1`, this.rangeCount === 1);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-2`, this.rangeCount === 2);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-3`, this.rangeCount === 3);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-4`, this.rangeCount >= 4);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART, this.hasChartRange);\n\n        setAriaSelected(this.eGui, this.rangeCount > 0 ? true : undefined);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SINGLE_CELL, this.isSingleCell());\n\n        this.updateRangeBorders();\n\n        this.refreshHandle();\n    }\n\n    private updateRangeBorders(): void {\n        const rangeBorders = this.getRangeBorders();\n        const isSingleCell = this.isSingleCell();\n        const isTop = !isSingleCell && rangeBorders.top;\n        const isRight = !isSingleCell && rangeBorders.right;\n        const isBottom = !isSingleCell && rangeBorders.bottom;\n        const isLeft = !isSingleCell && rangeBorders.left;\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_TOP, isTop);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_RIGHT, isRight);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_BOTTOM, isBottom);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_LEFT, isLeft);\n    }\n\n    private isSingleCell(): boolean {\n        const { rangeService } = this.beans;\n        return this.rangeCount === 1 && rangeService && !rangeService.isMoreThanOneCell();\n    }\n\n    private getHasChartRange(): boolean {\n        const { rangeService } = this.beans;\n\n        if (!this.rangeCount || !rangeService) { return false; }\n\n        const cellRanges = rangeService.getCellRanges();\n\n        return cellRanges.length > 0 && cellRanges.every(range => includes([CellRangeType.DIMENSION, CellRangeType.VALUE], range.type));\n    }\n\n    public updateRangeBordersIfRangeCount(): void {\n        // we only need to update range borders if we are in a range\n        if (this.rangeCount > 0) {\n            this.updateRangeBorders();\n            this.refreshHandle();\n        }\n    }\n\n    private getRangeBorders(): {\n        top: boolean,\n        right: boolean,\n        bottom: boolean,\n        left: boolean;\n    } {\n        const isRtl = this.beans.gridOptionsWrapper.isEnableRtl();\n\n        let top = false;\n        let right = false;\n        let bottom = false;\n        let left = false;\n\n        const thisCol = this.cellCtrl.getCellPosition().column;\n        const { rangeService, columnModel } = this.beans;\n\n        let leftCol: Column | null;\n        let rightCol: Column | null;\n\n        if (isRtl) {\n            leftCol = columnModel.getDisplayedColAfter(thisCol);\n            rightCol = columnModel.getDisplayedColBefore(thisCol);\n        } else {\n            leftCol = columnModel.getDisplayedColBefore(thisCol);\n            rightCol = columnModel.getDisplayedColAfter(thisCol);\n        }\n\n        const ranges = rangeService.getCellRanges().filter(\n            range => rangeService.isCellInSpecificRange(this.cellCtrl.getCellPosition(), range)\n        );\n\n        // this means we are the first column in the grid\n        if (!leftCol) {\n            left = true;\n        }\n\n        // this means we are the last column in the grid\n        if (!rightCol) {\n            right = true;\n        }\n\n        for (let i = 0; i < ranges.length; i++) {\n            if (top && right && bottom && left) { break; }\n\n            const range = ranges[i];\n            const startRow = rangeService.getRangeStartRow(range);\n            const endRow = rangeService.getRangeEndRow(range);\n\n            if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellCtrl.getCellPosition())) {\n                top = true;\n            }\n\n            if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellCtrl.getCellPosition())) {\n                bottom = true;\n            }\n\n            if (!left && leftCol && range.columns.indexOf(leftCol) < 0) {\n                left = true;\n            }\n\n            if (!right && rightCol && range.columns.indexOf(rightCol) < 0) {\n                right = true;\n            }\n        }\n\n        return { top, right, bottom, left };\n    }\n\n    public refreshHandle(): void {\n        if (!this.beans.rangeService) { return; }\n\n        const shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();\n\n        if (this.selectionHandle && !shouldHaveSelectionHandle) {\n            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);\n        }\n\n        if (shouldHaveSelectionHandle) {\n            this.addSelectionHandle();\n        }\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_HANDLE, !!this.selectionHandle);\n    }\n\n    private shouldHaveSelectionHandle(): boolean {\n        const { gridOptionsWrapper, rangeService } = this.beans;\n        const cellRanges = rangeService.getCellRanges();\n        const rangesLen = cellRanges.length;\n\n        if (this.rangeCount < 1 || rangesLen < 1) {\n            return false;\n        }\n\n        const cellRange = last(cellRanges);\n        const cellPosition = this.cellCtrl.getCellPosition();\n        const isFillHandleAvailable = gridOptionsWrapper.isEnableFillHandle() && !this.cellCtrl.isSuppressFillHandle();\n        const isRangeHandleAvailable = gridOptionsWrapper.isEnableRangeHandle();\n\n        let handleIsAvailable = rangesLen === 1 && !this.cellCtrl.isEditing() && (\n            isFillHandleAvailable || isRangeHandleAvailable\n        );\n\n        if (this.hasChartRange) {\n            const hasCategoryRange = cellRanges[0].type === CellRangeType.DIMENSION;\n            const isCategoryCell = hasCategoryRange && rangeService.isCellInSpecificRange(cellPosition, cellRanges[0]);\n\n            this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART_CATEGORY, isCategoryCell);\n            handleIsAvailable = cellRange.type === CellRangeType.VALUE;\n        }\n\n        return handleIsAvailable &&\n            cellRange.endRow != null &&\n            rangeService.isContiguousRange(cellRange) &&\n            rangeService.isBottomRightCell(cellRange, cellPosition);\n    }\n\n    private addSelectionHandle() {\n        const { gridOptionsWrapper, rangeService } = this.beans;\n        const cellRangeType = last(rangeService.getCellRanges()).type;\n        const selectionHandleFill = gridOptionsWrapper.isEnableFillHandle() && missing(cellRangeType);\n        const type = selectionHandleFill ? SelectionHandleType.FILL : SelectionHandleType.RANGE;\n\n        if (this.selectionHandle && this.selectionHandle.getType() !== type) {\n            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);\n        }\n\n        if (!this.selectionHandle) {\n            this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(type);\n        }\n\n        this.selectionHandle.refresh(this.cellCtrl);\n    }\n\n    public destroy(): void {\n        this.beans.context.destroyBean(this.selectionHandle);\n    }\n\n}"]}