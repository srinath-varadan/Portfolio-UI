{"version":3,"sources":["../../../src/ts/headerRendering/columnDrag/bodyDropPivotTarget.ts"],"names":[],"mappings":"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","file":"bodyDropPivotTarget.js","sourcesContent":["import { DraggingEvent, DragAndDropService } from \"../../dragAndDrop/dragAndDropService\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { Autowired } from \"../../context/context\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { DropListener } from \"./bodyDropTarget\";\n\nexport class BodyDropPivotTarget implements DropListener {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n\n    private columnsToAggregate: Column[] = [];\n    private columnsToGroup: Column[] = [];\n    private columnsToPivot: Column[] = [];\n\n    private pinned: string | null;\n\n    constructor(pinned: string | null) {\n        this.pinned = pinned;\n    }\n\n    /** Callback for when drag enters */\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        this.clearColumnsList();\n\n        // in pivot mode, we don't accept any drops if functions are read only\n        if (this.gridOptionsWrapper.isFunctionsReadOnly()) { return; }\n\n        const dragColumns: Column[] | undefined = draggingEvent.dragItem.columns;\n\n        if (!dragColumns) { return; }\n\n        dragColumns.forEach(column => {\n            // we don't allow adding secondary columns\n            if (!column.isPrimary()) { return; }\n\n            if (column.isAnyFunctionActive()) { return; }\n\n            if (column.isAllowValue()) {\n                this.columnsToAggregate.push(column);\n            } else if (column.isAllowRowGroup()) {\n                this.columnsToGroup.push(column);\n            } else if (column.isAllowPivot()) {\n                this.columnsToPivot.push(column);\n            }\n\n        });\n    }\n\n    public getIconName(): string | null {\n        const totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;\n        if (totalColumns > 0) {\n            return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;\n        }\n\n        return null;\n    }\n\n    /** Callback for when drag leaves */\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        // if we are taking columns out of the center, then we remove them from the report\n        this.clearColumnsList();\n    }\n\n    private clearColumnsList(): void {\n        this.columnsToAggregate.length = 0;\n        this.columnsToGroup.length = 0;\n        this.columnsToPivot.length = 0;\n    }\n\n    /** Callback for when dragging */\n    public onDragging(draggingEvent: DraggingEvent): void {\n    }\n\n    /** Callback for when drag stops */\n    public onDragStop(draggingEvent: DraggingEvent): void {\n        if (this.columnsToAggregate.length > 0) {\n            this.columnModel.addValueColumns(this.columnsToAggregate, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToGroup.length > 0) {\n            this.columnModel.addRowGroupColumns(this.columnsToGroup, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToPivot.length > 0) {\n            this.columnModel.addPivotColumns(this.columnsToPivot, \"toolPanelDragAndDrop\");\n        }\n    }\n\n}"]}