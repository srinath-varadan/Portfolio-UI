{"version":3,"sources":["../../../src/ts/vanillaFrameworkOverrides.ts"],"names":[],"mappings":";;;;;;;;AACA,uCAAyC;AACzC,iCAAoC;AAEpC,IAAM,sBAAsB,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;AACrF,IAAM,cAAc,GAAG,CAAC,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;AAE9E,sHAAsH;AACtH;IAAA;QAYW,qBAAgB,GAAG,UAAC,SAAgB,IAAK,OAAA,gBAAQ,CAAC,sBAAsB,EAAE,SAAS,CAAC,EAA3C,CAA2C,CAAC;IAyBhG,CAAC;IAnCG,wCAAwC;IACjC,8CAAU,GAAjB,UAAkB,MAAW,EAAE,OAAa;QACxC,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IACM,+CAAW,GAAlB,UAAmB,MAAW,EAAE,OAAa;QACzC,OAAO,IAAI,iBAAS,CAAC,UAAA,OAAO;YACxB,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACP,CAAC;IAID,uDAAuD;IAChD,oDAAgB,GAAvB,UACI,OAAoB,EACpB,IAAY,EACZ,QAA4C,EAC5C,UAAoB;QAEpB,IAAM,SAAS,GAAG,gBAAQ,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QACjD,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;IAC5F,CAAC;IAED,+CAA+C;IAC/C,iDAAa,GAAb,UAAc,SAAiB,EAAE,QAAkB,EAAE,MAAc;QAAd,uBAAA,EAAA,cAAc;QAC/D,QAAQ,EAAE,CAAC;IACf,CAAC;IAED,sDAAkB,GAAlB,UAAmB,IAAY;QAC3B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,wDAAoB,GAApB,UAAqB,IAAS;QAC1B,OAAO,KAAK,CAAC;IACjB,CAAC;IACL,gCAAC;AAAD,CArCA,AAqCC,IAAA;AArCY,8DAAyB","file":"vanillaFrameworkOverrides.js","sourcesContent":["import { IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\nimport { includes } from \"./utils/array\";\nimport { AgPromise } from \"./utils\";\n\nconst OUTSIDE_ANGULAR_EVENTS = ['mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\n\n/** The base frameworks, eg React & Angular, override this bean with implementations specific to their requirement. */\nexport class VanillaFrameworkOverrides implements IFrameworkOverrides {\n\n    // for Vanilla JS, we use simple timeout\n    public setTimeout(action: any, timeout?: any): void {\n        window.setTimeout(action, timeout);\n    }\n    public setInterval(action: any, timeout?: any): AgPromise<number> {\n        return new AgPromise(resolve => {\n            resolve(window.setInterval(action, timeout));\n        });\n    }\n\n    public isOutsideAngular = (eventType:string) => includes(OUTSIDE_ANGULAR_EVENTS, eventType);\n\n    // for Vanilla JS, we just add the event to the element\n    public addEventListener(\n        element: HTMLElement,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        useCapture?: boolean\n    ): void {\n        const isPassive = includes(PASSIVE_EVENTS, type);\n        element.addEventListener(type, listener, { capture: !!useCapture, passive: isPassive });\n    }\n\n    // for Vanilla JS, we just execute the listener\n    dispatchEvent(eventType: string, listener: () => {}, global = false): void {\n        listener();\n    }\n\n    frameworkComponent(name: string): any {\n        return null;\n    }\n\n    isFrameworkComponent(comp: any): boolean {\n        return false;\n    }\n}\n"]}