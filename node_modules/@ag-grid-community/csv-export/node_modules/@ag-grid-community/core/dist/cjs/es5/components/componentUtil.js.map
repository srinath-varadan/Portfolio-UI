{"version":3,"sources":["../../../src/ts/components/componentUtil.ts"],"names":[],"mappings":"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","file":"componentUtil.js","sourcesContent":["import { GridOptions } from '../entities/gridOptions';\nimport { GridApi } from '../gridApi';\nimport { ComponentStateChangedEvent, Events } from '../events';\nimport { PropertyKeys } from '../propertyKeys';\nimport { ColumnApi } from '../columns/columnApi';\nimport { iterateObject } from '../utils/object';\nimport { includes } from '../utils/array';\nimport { values } from '../utils/generic';\n\nexport class ComponentUtil {\n\n    // all the events are populated in here AFTER this class (at the bottom of the file).\n    public static EVENTS: string[] = [];\n\n    // events that are available for use by users of AG Grid and so should be documented\n    public static PUBLIC_EVENTS: string[] = [];\n\n    // events that are internal to AG Grid and should not be exposed to users via documentation or generated framework components\n    public static EXCLUDED_INTERNAL_EVENTS: string[] = [];\n\n    // function below fills this with onXXX methods, based on the above events\n    private static EVENT_CALLBACKS: string[];\n\n    public static STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;\n    public static OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;\n    public static ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;\n    public static NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;\n    public static BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;\n    public static FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;\n    public static ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;\n\n    public static getEventCallbacks(): string[] {\n        if (!ComponentUtil.EVENT_CALLBACKS) {\n            ComponentUtil.EVENT_CALLBACKS = ComponentUtil.EVENTS.map(event => ComponentUtil.getCallbackForEvent(event));\n        }\n\n        return ComponentUtil.EVENT_CALLBACKS;\n    }\n\n    public static copyAttributesToGridOptions(gridOptions: GridOptions | undefined, component: any, skipEventDeprecationCheck: boolean = false): GridOptions {\n\n        // create empty grid options if none were passed\n        if (typeof gridOptions !== 'object') {\n            gridOptions = {} as GridOptions;\n        }\n\n        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'\n        const pGridOptions = gridOptions as any;\n        const keyExists = (key: string) => typeof component[key] !== 'undefined';\n\n        // if groupAggFiltering exists and isn't a function, handle as a boolean.\n        if (keyExists('groupAggFiltering') && typeof component.groupAggFiltering !== 'function') {\n            pGridOptions.groupAggFiltering = ComponentUtil.toBoolean(component.groupAggFiltering);\n            delete component.groupAggFiltering;\n        }\n\n        // add in all the simple properties\n        [\n            ...ComponentUtil.ARRAY_PROPERTIES,\n            ...ComponentUtil.STRING_PROPERTIES,\n            ...ComponentUtil.OBJECT_PROPERTIES,\n            ...ComponentUtil.FUNCTION_PROPERTIES,\n            ...ComponentUtil.getEventCallbacks(),\n        ]\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = component[key]);\n\n        ComponentUtil.BOOLEAN_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toBoolean(component[key]));\n\n        ComponentUtil.NUMBER_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toNumber(component[key]));\n\n        return gridOptions;\n    }\n\n    public static getCallbackForEvent(eventName: string): string {\n        if (!eventName || eventName.length < 2) {\n            return eventName;\n        }\n\n        return 'on' + eventName[0].toUpperCase() + eventName.substr(1);\n    }\n\n    public static processOnChange(changes: any, gridOptions: GridOptions, api: GridApi, columnApi: ColumnApi): void {\n        if (!changes) {\n            return;\n        }\n\n        const changesToApply = { ...changes };\n\n        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'\n        const pGridOptions = gridOptions as any;\n        const keyExists = (key: string) => changesToApply[key];\n\n        // if groupAggFiltering exists and isn't a function, handle as a boolean.\n        if (keyExists('groupAggFiltering')) {\n            if (typeof changesToApply.groupAggFiltering === 'function') {\n                pGridOptions.groupAggFiltering = changesToApply.groupAggFiltering;\n            } else {\n                pGridOptions.groupAggFiltering = ComponentUtil.toBoolean(changesToApply.groupAggFiltering);\n            }\n            delete changesToApply.groupAggFiltering;\n        }\n\n        // we need to do this before the generic handling, otherwise value gets set before we\n        // try to set it, and the grid then doesn't refresh the rows as it doesn't see any change.\n        // also it's possible we use the generic code setXXX below and put it up there instead,\n        // cover all cases.\n        if (changesToApply.rowClass) {\n            api.setRowClass(changesToApply.rowClass.currentValue);\n            delete changesToApply.rowClass;\n        }\n\n        // check if any change for the simple types, and if so, then just copy in the new value\n        [\n            ...ComponentUtil.ARRAY_PROPERTIES,\n            ...ComponentUtil.OBJECT_PROPERTIES,\n            ...ComponentUtil.STRING_PROPERTIES,\n            ...ComponentUtil.getEventCallbacks(),\n        ]\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = changesToApply[key].currentValue);\n\n        ComponentUtil.BOOLEAN_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toBoolean(changesToApply[key].currentValue));\n\n        ComponentUtil.NUMBER_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toNumber(changesToApply[key].currentValue));\n\n        if (changesToApply.enableCellTextSelection) {\n            api.setEnableCellTextSelection(ComponentUtil.toBoolean(changesToApply.enableCellTextSelection.currentValue));\n            delete changesToApply.enableCellTextSelection;\n        }\n\n        if (changesToApply.quickFilterText) {\n            api.setQuickFilter(changesToApply.quickFilterText.currentValue);\n            delete changesToApply.quickFilterText;\n        }\n\n        if (changesToApply.autoGroupColumnDef) {\n            api.setAutoGroupColumnDef(changesToApply.autoGroupColumnDef.currentValue, \"gridOptionsChanged\");\n            delete changesToApply.autoGroupColumnDef;\n        }\n\n        if (changesToApply.columnDefs) {\n            api.setColumnDefs(changesToApply.columnDefs.currentValue, \"gridOptionsChanged\");\n            delete changesToApply.columnDefs;\n        }\n\n        if (changesToApply.defaultColDef) {\n            api.setDefaultColDef(changesToApply.defaultColDef.currentValue, \"gridOptionsChanged\");\n            delete changesToApply.defaultColDef;\n        }\n\n        if (changesToApply.paginationPageSize) {\n            api.paginationSetPageSize(ComponentUtil.toNumber(changesToApply.paginationPageSize.currentValue));\n            delete changesToApply.paginationPageSize;\n        }\n\n        if (changesToApply.pivotMode) {\n            columnApi.setPivotMode(ComponentUtil.toBoolean(changesToApply.pivotMode.currentValue));\n            delete changesToApply.pivotMode;\n        }\n\n        if (changesToApply.groupRemoveSingleChildren) {\n            api.setGroupRemoveSingleChildren(ComponentUtil.toBoolean(changesToApply.groupRemoveSingleChildren.currentValue));\n            delete changesToApply.groupRemoveSingleChildren;\n        }\n\n        if (changesToApply.suppressRowDrag) {\n            api.setSuppressRowDrag(ComponentUtil.toBoolean(changesToApply.suppressRowDrag.currentValue));\n            delete changesToApply.suppressRowDrag;\n        }\n\n        if (changesToApply.suppressMoveWhenRowDragging) {\n            api.setSuppressMoveWhenRowDragging(ComponentUtil.toBoolean(changesToApply.suppressMoveWhenRowDragging.currentValue));\n            delete changesToApply.suppressMoveWhenRowDragging;\n        }\n\n        if (changesToApply.suppressRowClickSelection) {\n            api.setSuppressRowClickSelection(ComponentUtil.toBoolean(changesToApply.suppressRowClickSelection.currentValue));\n            delete changesToApply.suppressRowClickSelection;\n        }\n\n        if (changesToApply.suppressClipboardPaste) {\n            api.setSuppressClipboardPaste(ComponentUtil.toBoolean(changesToApply.suppressClipboardPaste.currentValue));\n            delete changesToApply.suppressClipboardPaste;\n        }\n\n        if (changesToApply.headerHeight) {\n            api.setHeaderHeight(ComponentUtil.toNumber(changesToApply.headerHeight.currentValue));\n            delete changesToApply.headerHeight;\n        }\n\n        // any remaining properties can be set in a generic way\n        // ie the setter takes the form of setXXX and the argument requires no formatting/translation first\n        const dynamicApi = (api as any);\n        Object.keys(changesToApply)\n            .forEach(property => {\n                const setterName = `set${property.charAt(0).toUpperCase()}${property.substring(1)}`;\n\n                if (dynamicApi[setterName]) {\n                    dynamicApi[setterName](changes[property].currentValue);\n                }\n            });\n\n        // copy changes into an event for dispatch\n        const event: ComponentStateChangedEvent = {\n            type: Events.EVENT_COMPONENT_STATE_CHANGED,\n            api: gridOptions.api!,\n            columnApi: gridOptions.columnApi!\n        };\n\n        iterateObject(changes, (key: string, value: any) => {\n            (event as any)[key] = value;\n        });\n\n        api.dispatchEvent(event);\n    }\n\n    public static toBoolean(value: any): boolean {\n        if (typeof value === 'boolean') {\n            return value;\n        }\n\n        if (typeof value === 'string') {\n            // for boolean, compare to empty String to allow attributes appearing with\n            // no value to be treated as 'true'\n            return value.toUpperCase() === 'TRUE' || value == '';\n        }\n\n        return false;\n    }\n\n    public static toNumber(value: any): number | undefined {\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        if (typeof value === 'string') {\n            return Number(value);\n        }\n    }\n}\n\nComponentUtil.EVENTS = values<any>(Events);\n\n/** Exclude the following internal events from code generation to prevent exposing these events via framework components */\nComponentUtil.EXCLUDED_INTERNAL_EVENTS = [\n    Events.EVENT_SCROLLBAR_WIDTH_CHANGED,\n    Events.EVENT_CHECKBOX_CHANGED,\n    Events.EVENT_HEIGHT_SCALE_CHANGED,\n    Events.EVENT_BODY_HEIGHT_CHANGED,\n    Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,\n    Events.EVENT_SCROLL_VISIBILITY_CHANGED,\n    Events.EVENT_COLUMN_HOVER_CHANGED,\n    Events.EVENT_FLASH_CELLS,\n    Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED,\n    Events.EVENT_DISPLAYED_ROWS_CHANGED,\n    Events.EVENT_LEFT_PINNED_WIDTH_CHANGED,\n    Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED,\n    Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED,\n    Events.EVENT_POPUP_TO_FRONT,\n    Events.EVENT_KEYBOARD_FOCUS,\n    Events.EVENT_MOUSE_FOCUS,\n    Events.EVENT_STORE_UPDATED,\n    Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n    Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,\n    Events.EVENT_FILL_START,\n    Events.EVENT_FILL_END,\n    Events.EVENT_FULL_WIDTH_ROW_FOCUSED\n];\n\n/** EVENTS that should be exposed via code generation for the framework components.  */\nComponentUtil.PUBLIC_EVENTS = ComponentUtil.EVENTS.filter(e => !includes(ComponentUtil.EXCLUDED_INTERNAL_EVENTS, e));\n"]}