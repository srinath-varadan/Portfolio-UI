{"version":3,"sources":["../../../src/ts/entities/rowNode.ts"],"names":[],"mappings":"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","file":"rowNode.js","sourcesContent":["import { EventService } from \"../eventService\";\nimport { AgEvent, Events, RowEvent, RowSelectedEvent, SelectionChangedEvent } from \"../events\";\nimport { Column } from \"./column\";\nimport { Constants } from \"../constants/constants\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { DetailGridInfo } from \"../gridApi\";\nimport { exists, missing, missingOrEmpty } from \"../utils/generic\";\nimport { getAllKeysInObjects } from \"../utils/object\";\nimport { IServerSideStore } from \"../interfaces/IServerSideStore\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { IServerSideRowModel } from \"../interfaces/iServerSideRowModel\";\nimport { debounce } from \"../utils/function\";\nimport { Beans } from \"../rendering/beans\";\n\nexport interface SetSelectedParams {\n    // true or false, whatever you want to set selection to\n    newValue: boolean;\n    // whether to remove other selections after this selection is done\n    clearSelection?: boolean;\n    // true when action is NOT on this node, ie user clicked a group and this is the child of a group\n    suppressFinishActions?: boolean;\n    // gets used when user shift-selects a range\n    rangeSelect?: boolean;\n    // used in group selection, if true, filtered out children will not be selected\n    groupSelectsFiltered?: boolean;\n}\n\nexport interface RowNodeEvent extends AgEvent {\n    node: RowNode;\n}\n\nexport interface DataChangedEvent extends RowNodeEvent {\n    oldData: any;\n    newData: any;\n    update: boolean;\n}\n\nexport interface CellChangedEvent extends RowNodeEvent {\n    column: Column;\n    newValue: any;\n    oldValue: any;\n}\n\nexport enum RowHighlightPosition { Above, Below }\n\nexport class RowNode implements IEventEmitter {\n\n    public static ID_PREFIX_ROW_GROUP = 'row-group-';\n    public static ID_PREFIX_TOP_PINNED = 't-';\n    public static ID_PREFIX_BOTTOM_PINNED = 'b-';\n\n    private static OBJECT_ID_SEQUENCE = 0;\n\n    public static EVENT_ROW_SELECTED = 'rowSelected';\n    public static EVENT_DATA_CHANGED = 'dataChanged';\n    public static EVENT_CELL_CHANGED = 'cellChanged';\n    public static EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';\n    public static EVENT_MASTER_CHANGED = 'masterChanged';\n    public static EVENT_GROUP_CHANGED = 'groupChanged';\n    public static EVENT_MOUSE_ENTER = 'mouseEnter';\n    public static EVENT_MOUSE_LEAVE = 'mouseLeave';\n    public static EVENT_HEIGHT_CHANGED = 'heightChanged';\n    public static EVENT_TOP_CHANGED = 'topChanged';\n    public static EVENT_DISPLAYED_CHANGED = 'displayedChanged';\n    public static EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';\n    public static EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';\n    public static EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';\n    public static EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';\n    public static EVENT_EXPANDED_CHANGED = 'expandedChanged';\n    public static EVENT_HAS_CHILDREN_CHANGED = 'hasChildrenChanged';\n    public static EVENT_SELECTABLE_CHANGED = 'selectableChanged';\n    public static EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';\n    public static EVENT_HIGHLIGHT_CHANGED = 'rowHighlightChanged';\n    public static EVENT_DRAGGING_CHANGED = 'draggingChanged';\n\n    /** Unique ID for the node. Either provided by the application, or generated by the grid if not. */\n    public id: string | undefined;\n\n    /** If using row grouping, contains the group values for this group. */\n    public groupData: { [key: string]: any | null; } | null;\n\n    /** If using row grouping and aggregation, contains the aggregation data. */\n    public aggData: any;\n\n    /** The data as provided by the application. */\n    public data: any;\n\n    /** The parent node to this node, or empty if top level */\n    public parent: RowNode | null;\n\n    /** How many levels this node is from the top when grouping. */\n    public level: number;\n\n    /** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupRemoveSingleChildren=true`)*/\n    public uiLevel: number;\n\n    /**\n     * If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\n     * This will always be the same as the level, unless we are collapsing groups, i.e. `groupRemoveSingleChildren=true`.\n     */\n    public rowGroupIndex: number | null;\n\n    /** `true` if this node is a group node (ie has children) */\n    public group: boolean | undefined;\n\n    /** `true` if this row is getting dragged */\n    public dragging: boolean;\n\n    /** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail) */\n    public master: boolean;\n\n    /** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row)*/\n    public detail: boolean;\n\n    /** If this row is a master row that was expanded, this points to the associated detail row. */\n    public detailNode: RowNode;\n\n    /** If master detail, this contains details about the detail grid */\n    public detailGridInfo: DetailGridInfo | null;\n\n    /** `true` if this node is a group and the group is the bottom level in the tree. */\n    public leafGroup: boolean;\n\n    /** `true` if this is the first child in this group. Changes when data is sorted. */\n    public firstChild: boolean;\n\n    /** `true` if this is the last child in this group. Changes when data is sorted. */\n    public lastChild: boolean;\n\n    /** Index of this row with respect to its parent when grouping. Changes when data is sorted. */\n    public childIndex: number;\n\n    /** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */\n    public rowIndex: number | null = null;\n\n    /** Either 'top' or 'bottom' if row pinned, otherwise `undefined` or `null`. */\n    public rowPinned: string;\n\n    /** If using quick filter, stores a string representation of the row for searching against. */\n    public quickFilterAggregateText: string | null;\n\n    /** `true` if row is a footer. Footers have `group = true` and `footer = true`. */\n    public footer: boolean;\n\n    /** The field we are grouping on eg 'country'. */\n    public field: string | null;\n\n    /** The row group column used for this group, e.g. the Country column instance. */\n    public rowGroupColumn: Column | null;\n\n    /** The key for the group eg Ireland, UK, USA */\n    public key: string | null = null;\n\n    /** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */\n    public stub: boolean;\n\n    /** Used by server side row model, true if this row node failed a load */\n    public failedLoad: boolean;\n\n    /** All lowest level nodes beneath this node, no groups. */\n    public allLeafChildren: RowNode[];\n\n    /** Children of this group. If multi levels of grouping, shows only immediate children. */\n    public childrenAfterGroup: RowNode[] | null;\n\n    /** Filtered children of this group. */\n    public childrenAfterFilter: RowNode[] | null;\n\n    /** Aggregated and re-filtered children of this group. */\n    public childrenAfterAggFilter: RowNode[] | null;\n\n    /** Sorted children of this group. */\n    public childrenAfterSort: RowNode[] | null;\n\n    /** Number of children and grand children. */\n    public allChildrenCount: number | null;\n\n    /** Children mapped by the pivot columns. */\n    public childrenMapped: { [key: string]: any; } | null = {};\n\n    /** Server Side Row Model Only - the children are in an infinite cache. */\n    public childStore: IServerSideStore | null;\n\n    /** `true` if group is expanded, otherwise `false`. */\n    public expanded: boolean;\n\n    /** If using footers, reference to the footer node for this group. */\n    public sibling: RowNode;\n\n    /** The height, in pixels, of this row */\n    public rowHeight: number | null | undefined;\n\n    /** Dynamic row heights are done on demand, only when row is visible. However for row virtualisation\n     * we need a row height to do the 'what rows are in viewport' maths. So we assign a row height to each\n     * row based on defaults and rowHeightEstimated=true, then when the row is needed for drawing we do\n     * the row height calculation and set rowHeightEstimated=false.*/\n    public rowHeightEstimated: boolean;\n\n    /**\n     * This will be `true` if it has a rowIndex assigned, otherwise `false`.\n     */\n    public displayed: boolean = false;\n\n    /** The row top position in pixels. */\n    public rowTop: number | null = null;\n\n    /** The top pixel for this row last time, makes sense if data set was ordered or filtered,\n     * it is used so new rows can animate in from their old position. */\n    public oldRowTop: number | null = null;\n\n    /** `true` if this node is a daemon. This means row is not part of the model. Can happen when then\n     * the row is selected and then the user sets a different ID onto the node. The nodes is then\n     * representing a different entity, so the selection controller, if the node is selected, takes\n     * a copy where daemon=true. */\n    public daemon: boolean;\n\n    /** `true` by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\n    public selectable = true;\n\n    /** Used by the value service, stores values for a particular change detection turn. */\n    public __cacheData: { [colId: string]: any; };\n    public __cacheVersion: number;\n\n    /** Used by sorting service - to give deterministic sort to groups. Previously we\n     * just id for this, however id is a string and had slower sorting compared to numbers. */\n    public __objectId: number = RowNode.OBJECT_ID_SEQUENCE++;\n\n    /** We cache the result of hasChildren() so that we can be aware of when it has changed, and hence\n     * fire the event. Really we should just have hasChildren as an attribute and do away with hasChildren()\n     * method, however that would be a breaking change. */\n    private __hasChildren: boolean;\n\n    /** When one or more Columns are using autoHeight, this keeps track of height of each autoHeight Cell,\n     * indexed by the Column ID. */\n    private __autoHeights?: { [id: string]: number | undefined } = {};\n\n    /** `true` when nodes with the same id are being removed and added as part of the same batch transaction */\n    public alreadyRendered = false;\n\n    public highlighted: RowHighlightPosition | null = null;\n\n    private selected: boolean | undefined = false;\n    private eventService: EventService | null;\n\n    private beans: Beans;\n\n    private checkAutoHeightsDebounced: () => void;\n\n    private onRowHeightChangedDebounced = debounce(this.onRowHeightChanged.bind(this), 100);\n\n    constructor(beans: Beans) {\n        this.beans = beans;\n    }\n\n    /** Replaces the data on the `rowNode`. When complete, the grid will refresh the the entire rendered row if it is showing. */\n    public setData(data: any): void {\n        this.setDataCommon(data, false);\n    }\n\n    // similar to setRowData, however it is expected that the data is the same data item. this\n    // is intended to be used with Redux type stores, where the whole data can be changed. we are\n    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\n    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\n    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\n    public updateData(data: any): void {\n        this.setDataCommon(data, true);\n    }\n\n    private setDataCommon(data: any, update: boolean): void {\n        const oldData = this.data;\n\n        this.data = data;\n        this.beans.valueCache.onDataChanged();\n        this.updateDataOnDetailNode();\n        this.checkRowSelectable();\n\n        const event: DataChangedEvent = this.createDataChangedEvent(data, oldData, update);\n\n        this.dispatchLocalEvent(event);\n    }\n\n    // when we are doing master / detail, the detail node is lazy created, but then kept around.\n    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\n    // in sync, otherwise expand/collapse of the detail would still show the old values.\n    private updateDataOnDetailNode(): void {\n        if (this.detailNode) {\n            this.detailNode.data = this.data;\n        }\n    }\n\n    private createDataChangedEvent(newData: any, oldData: any, update: boolean): DataChangedEvent {\n        return {\n            type: RowNode.EVENT_DATA_CHANGED,\n            node: this,\n            oldData: oldData,\n            newData: newData,\n            update: update\n        };\n    }\n\n    private createLocalRowEvent(type: string): RowNodeEvent {\n        return {\n            type: type,\n            node: this\n        };\n    }\n\n    public getRowIndexString(): string {\n        if (this.rowPinned === Constants.PINNED_TOP) {\n            return 't-' + this.rowIndex;\n        }\n\n        if (this.rowPinned === Constants.PINNED_BOTTOM) {\n            return 'b-' + this.rowIndex;\n        }\n\n        return this.rowIndex!.toString();\n    }\n\n    private createDaemonNode(): RowNode {\n        const oldNode = new RowNode(this.beans);\n\n        // just copy the id and data, this is enough for the node to be used\n        // in the selection controller (the selection controller is the only\n        // place where daemon nodes can live).\n        oldNode.id = this.id;\n        oldNode.data = this.data;\n        oldNode.daemon = true;\n        oldNode.selected = this.selected;\n        oldNode.level = this.level;\n\n        return oldNode;\n    }\n\n    public setDataAndId(data: any, id: string | undefined): void {\n        const oldNode = exists(this.id) ? this.createDaemonNode() : null;\n        const oldData = this.data;\n\n        this.data = data;\n        this.updateDataOnDetailNode();\n        this.setId(id);\n        this.beans.selectionService.syncInRowNode(this, oldNode);\n        this.checkRowSelectable();\n\n        const event: DataChangedEvent = this.createDataChangedEvent(data, oldData, false);\n\n        this.dispatchLocalEvent(event);\n    }\n\n    private checkRowSelectable() {\n        const isRowSelectableFunc = this.beans.gridOptionsWrapper.getIsRowSelectableFunc();\n        this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc!(this) : true);\n    }\n\n    public setRowSelectable(newVal: boolean) {\n        if (this.selectable !== newVal) {\n            this.selectable = newVal;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));\n            }\n        }\n    }\n\n    public setId(id?: string): void {\n        // see if user is providing the id's\n        const getRowIdFunc = this.beans.gridOptionsWrapper.getRowIdFunc();\n\n        if (getRowIdFunc) {\n            // if user is providing the id's, then we set the id only after the data has been set.\n            // this is important for virtual pagination and viewport, where empty rows exist.\n            if (this.data) {\n                // we pass 'true' as we skip this level when generating keys,\n                // as we don't always have the key for this level (eg when updating\n                // data via transaction on SSRM, we are getting key to look up the\n                // RowNode, don't have the RowNode yet, thus no way to get the current key)\n                const parentKeys = this.getGroupKeys(true);\n                this.id = getRowIdFunc({\n                    data: this.data,\n                    parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                    level: this.level\n                });\n                // make sure id provided doesn't start with 'row-group-' as this is reserved. also check that\n                // it has 'startsWith' in case the user provided a number.\n                if (this.id !== null && typeof this.id === 'string' && this.id.startsWith(RowNode.ID_PREFIX_ROW_GROUP)) {\n                    console.error(`AG Grid: Row IDs cannot start with ${RowNode.ID_PREFIX_ROW_GROUP}, this is a reserved prefix for AG Grid's row grouping feature.`);\n                }\n                // force id to be a string\n                if (this.id !== null && typeof this.id !== 'string') {\n                    this.id = '' + this.id;\n                }\n            } else {\n                // this can happen if user has set blank into the rowNode after the row previously\n                // having data. this happens in virtual page row model, when data is delete and\n                // the page is refreshed.\n                this.id = undefined;\n            }\n        } else {\n            this.id = id;\n        }\n    }\n\n    public getGroupKeys(excludeSelf = false): string[] {\n        const keys: string[] = [];\n\n        let pointer: RowNode | null = this;\n        if (excludeSelf) {\n            pointer = pointer.parent;\n        }\n        while (pointer && pointer.level >= 0) {\n            keys.push(pointer.key!);\n            pointer = pointer.parent;\n        }\n        keys.reverse();\n\n        return keys;\n    }\n\n    public isPixelInRange(pixel: number): boolean {\n        if (!exists(this.rowTop) || !exists(this.rowHeight)) { return false; }\n        return pixel >= this.rowTop && pixel < (this.rowTop + this.rowHeight);\n    }\n\n    public setFirstChild(firstChild: boolean): void {\n        if (this.firstChild === firstChild) { return; }\n\n        this.firstChild = firstChild;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));\n        }\n    }\n\n    public setLastChild(lastChild: boolean): void {\n        if (this.lastChild === lastChild) { return; }\n\n        this.lastChild = lastChild;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));\n        }\n    }\n\n    public setChildIndex(childIndex: number): void {\n        if (this.childIndex === childIndex) { return; }\n\n        this.childIndex = childIndex;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));\n        }\n    }\n\n    public setRowTop(rowTop: number | null): void {\n        this.oldRowTop = this.rowTop;\n\n        if (this.rowTop === rowTop) { return; }\n\n        this.rowTop = rowTop;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));\n        }\n\n        this.setDisplayed(rowTop !== null);\n    }\n\n    public clearRowTopAndRowIndex(): void {\n        this.oldRowTop = null;\n        this.setRowTop(null);\n        this.setRowIndex(null);\n    }\n\n    private setDisplayed(displayed: boolean): void {\n        if (this.displayed === displayed) { return; }\n\n        this.displayed = displayed;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DISPLAYED_CHANGED));\n        }\n    }\n\n    public setDragging(dragging: boolean): void {\n        if (this.dragging === dragging) { return; }\n\n        this.dragging = dragging;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));\n        }\n    }\n\n    public setHighlighted(highlighted: RowHighlightPosition | null): void {\n        if (highlighted === this.highlighted) { return; }\n\n        this.highlighted = highlighted;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HIGHLIGHT_CHANGED));\n        }\n    }\n\n    public setAllChildrenCount(allChildrenCount: number | null): void {\n        if (this.allChildrenCount === allChildrenCount) { return; }\n\n        this.allChildrenCount = allChildrenCount;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));\n        }\n    }\n\n    public setMaster(master: boolean): void {\n        if (this.master === master) { return; }\n\n        // if changing AWAY from master, then unexpand, otherwise\n        // next time it's shown it is expanded again\n        if (this.master && !master) {\n            this.expanded = false;\n        }\n\n        this.master = master;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_MASTER_CHANGED));\n        }\n    }\n\n    public setGroup(group: boolean): void {\n        if (this.group === group) { return; }\n\n        // if we used to be a group, and no longer, then close the node\n        if (this.group && !group) {\n            this.expanded = false;\n        }\n\n        this.group = group;\n        this.updateHasChildren();\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_GROUP_CHANGED));\n        }\n    }\n\n    /**\n     * Sets the row height.\n     * Call if you want to change the height initially assigned to the row.\n     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows. */\n    public setRowHeight(rowHeight: number | undefined | null, estimated = false): void {\n        this.rowHeight = rowHeight;\n        this.rowHeightEstimated = estimated;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));\n        }\n    }\n\n    public setRowAutoHeight(cellHeight: number | undefined, column: Column): void {\n        if (!this.__autoHeights) {\n            this.__autoHeights = {};\n        }\n        const autoHeights = this.__autoHeights!;\n\n        autoHeights[column.getId()] = cellHeight;\n\n        if (cellHeight != null) {\n            if (this.checkAutoHeightsDebounced == null) {\n                this.checkAutoHeightsDebounced = debounce(this.checkAutoHeights.bind(this), 1);\n            }\n            this.checkAutoHeightsDebounced();\n        }\n    }\n\n    public checkAutoHeights(): void {\n        let notAllPresent = false;\n        let nonePresent = true;\n        let newRowHeight = 0;\n\n        const autoHeights = this.__autoHeights!;\n        if (autoHeights == null) { return; }\n\n        const displayedAutoHeightCols = this.beans.columnModel.getAllDisplayedAutoHeightCols();\n        displayedAutoHeightCols.forEach(col => {\n            const cellHeight = autoHeights[col.getId()];\n            if (cellHeight == null) {\n                notAllPresent = true;\n                return;\n            }\n            nonePresent = false;\n            if (cellHeight > newRowHeight) {\n                newRowHeight = cellHeight;\n            }\n        });\n\n        if (notAllPresent) { return; }\n\n        // we take min of 10, so we don't adjust for empty rows. if <10, we put to default.\n        // this prevents the row starting very small when waiting for async components,\n        // which would then mean the grid squashes in far to many rows (as small heights\n        // means more rows fit in) which looks crap. so best ignore small values and assume\n        // we are still waiting for values to render.\n        if (nonePresent || newRowHeight < 10) {\n            newRowHeight = this.beans.gridOptionsWrapper.getRowHeightForNode(this).height;\n        }\n\n        if (newRowHeight == this.rowHeight) { return; }\n\n        this.setRowHeight(newRowHeight);\n\n        this.onRowHeightChangedDebounced();\n    }\n\n    /** This method is debounced. It is used for row auto-height. If we don't debounce, \n     * then the Row Models will end up recalculating each row position\n     * for each row height change and result in the Row Renderer laying out rows.\n     * This is particularly bad if using print layout, and showing eg 1,000 rows,\n     * each row will change it's height, causing Row Model to update 1,000 times.\n     */\n     private onRowHeightChanged(): void {\n        const rowModel = this.beans.rowModel as (IClientSideRowModel | IServerSideRowModel);\n        if (rowModel.onRowHeightChanged) {\n            rowModel.onRowHeightChanged();\n        }\n    }\n\n    public setRowIndex(rowIndex: number | null): void {\n        if (this.rowIndex === rowIndex) { return; }\n\n        this.rowIndex = rowIndex;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));\n        }\n    }\n\n    public setUiLevel(uiLevel: number): void {\n        if (this.uiLevel === uiLevel) { return; }\n\n        this.uiLevel = uiLevel;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));\n        }\n    }\n\n    public setExpanded(expanded: boolean, e?: MouseEvent | KeyboardEvent): void {\n        if (this.expanded === expanded) { return; }\n\n        this.expanded = expanded;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));\n        }\n\n        const event = Object.assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {\n            expanded,\n            event: e || null\n        });\n\n        this.beans.rowNodeEventThrottle.dispatchExpanded(event);\n\n        // when using footers we need to refresh the group row, as the aggregation\n        // values jump between group and footer\n        if (this.beans.gridOptionsWrapper.isGroupIncludeFooter()) {\n            this.beans.rowRenderer.refreshCells({ rowNodes: [this] });\n        }\n    }\n\n    private createGlobalRowEvent(type: string): RowEvent {\n        return {\n            type: type,\n            node: this,\n            data: this.data,\n            rowIndex: this.rowIndex,\n            rowPinned: this.rowPinned,\n            context: this.beans.gridOptionsWrapper.getContext(),\n            api: this.beans.gridOptionsWrapper.getApi()!,\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi()!\n        };\n    }\n\n    private dispatchLocalEvent(event: AgEvent): void {\n        if (this.eventService) {\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    /**\n     * Replaces the value on the `rowNode` for the specified column. When complete,\n     * the grid will refresh the rendered cell on the required row only.\n     *\n     * @param colKey The column where the value should be updated\n     * @param newValue The new value\n     * @param eventSource The source of the event\n     * @returns `True` if the value was changed, otherwise `False`.\n     */\n    public setDataValue(colKey: string | Column, newValue: any, eventSource?: string): boolean {\n        // When it is done via the editors, no 'cell changed' event gets fired, as it's assumed that\n        // the cell knows about the change given it's in charge of the editing.\n        // this method is for the client to call, so the cell listens for the change\n        // event, and also flashes the cell when the change occurs.\n        const column = this.beans.columnModel.getPrimaryColumn(colKey)!;\n        const oldValue = this.beans.valueService.getValue(column, this);\n\n        const valueChanged = this.beans.valueService.setValue(this, column, newValue, eventSource);\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n\n        return valueChanged;\n    }\n\n    public setGroupValue(colKey: string | Column, newValue: any): void {\n        const column = this.beans.columnModel.getGridColumn(colKey)!;\n\n        if (missing(this.groupData)) { this.groupData = {}; }\n\n        const columnId = column.getColId();\n        const oldValue = this.groupData[columnId];\n\n        if (oldValue === newValue) { return; }\n\n        this.groupData[columnId] = newValue;\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n    }\n\n    // sets the data for an aggregation\n    public setAggData(newAggData: any): void {\n        // find out all keys that could potentially change\n        const colIds = getAllKeysInObjects([this.aggData, newAggData]);\n        const oldAggData = this.aggData;\n\n        this.aggData = newAggData;\n\n        // if no event service, nobody has registered for events, so no need fire event\n        if (this.eventService) {\n            colIds.forEach(colId => {\n                const column = this.beans.columnModel.getGridColumn(colId)!;\n                const value = this.aggData ? this.aggData[colId] : undefined;\n                const oldValue = oldAggData ? oldAggData[colId] : undefined;\n                this.dispatchCellChangedEvent(column, value, oldValue);\n            });\n        }\n    }\n\n    public updateHasChildren(): void {\n        // we need to return true when this.group=true, as this is used by server side row model\n        // (as children are lazy loaded and stored in a cache anyway). otherwise we return true\n        // if children exist.\n        const newValue = (this.group && !this.footer) || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);\n\n        if (newValue !== this.__hasChildren) {\n            this.__hasChildren = !!newValue;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HAS_CHILDREN_CHANGED));\n            }\n        }\n    }\n\n    public hasChildren(): boolean {\n        if (this.__hasChildren == null) {\n            this.updateHasChildren();\n        }\n        return this.__hasChildren;\n    }\n\n    public isEmptyRowGroupNode(): boolean | undefined {\n        return this.group && missingOrEmpty(this.childrenAfterGroup);\n    }\n\n    private dispatchCellChangedEvent(column: Column, newValue: any, oldValue: any): void {\n        const cellChangedEvent: CellChangedEvent = {\n            type: RowNode.EVENT_CELL_CHANGED,\n            node: this,\n            column: column,\n            newValue: newValue,\n            oldValue: oldValue\n        };\n        this.dispatchLocalEvent(cellChangedEvent);\n    }\n\n    /**\n     * The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\n     * This string is then used for the quick filter instead of hitting each column separately.\n     * When you edit, using grid editing, this string gets cleared down.\n     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\n     * Otherwise new values will not work with the `quickFilter`. */\n    public resetQuickFilterAggregateText(): void {\n        this.quickFilterAggregateText = null;\n    }\n\n    public isExpandable(): boolean {\n        return (this.hasChildren() && !this.footer) || this.master ? true : false;\n    }\n\n    /** Returns:\n     * - `true` if node is selected,\n     * - `false` if the node isn't selected\n     * - `undefined` if it's partially selected (group where not all children are selected). */\n    public isSelected(): boolean | undefined {\n        // for footers, we just return what our sibling selected state is, as cannot select a footer\n        if (this.footer) { return this.sibling.isSelected(); }\n\n        return this.selected;\n    }\n\n    /** Perform a depth-first search of this node and its children. */\n    public depthFirstSearch(callback: (rowNode: RowNode) => void): void {\n        if (this.childrenAfterGroup) {\n            this.childrenAfterGroup.forEach(child => child.depthFirstSearch(callback));\n        }\n        callback(this);\n    }\n\n    // + rowController.updateGroupsInSelection()\n    // + selectionController.calculatedSelectedForAllGroupNodes()\n    public calculateSelectedFromChildren(): void {\n        let atLeastOneSelected = false;\n        let atLeastOneDeSelected = false;\n        let atLeastOneMixed = false;\n        let newSelectedValue: boolean | undefined;\n\n        if (!this.childrenAfterGroup?.length) {\n            return;\n        }\n\n        for (let i = 0; i < this.childrenAfterGroup.length; i++) {\n            const child = this.childrenAfterGroup[i];\n\n            // skip non-selectable nodes to prevent inconsistent selection values\n            if (!child.selectable) { continue; }\n\n            const childState = child.isSelected();\n\n            switch (childState) {\n                case true:\n                    atLeastOneSelected = true;\n                    break;\n                case false:\n                    atLeastOneDeSelected = true;\n                    break;\n                default:\n                    atLeastOneMixed = true;\n                    break;\n            }\n        }\n\n        if (atLeastOneMixed) {\n            newSelectedValue = undefined;\n        } else if (atLeastOneSelected && !atLeastOneDeSelected) {\n            newSelectedValue = true;\n        } else if (!atLeastOneSelected && atLeastOneDeSelected) {\n            newSelectedValue = false;\n        } else {\n            newSelectedValue = undefined;\n        }\n\n        this.selectThisNode(newSelectedValue);\n    }\n\n    public setSelectedInitialValue(selected: boolean): void {\n        this.selected = selected;\n    }\n\n    /**\n     * Select (or deselect) the node.\n     * @param newValue -`true` for selection, `false` for deselection.\n     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact.\n     * @param suppressFinishActions - Pass `true` to prevent the `selectionChanged` from being fired. Note that the `rowSelected` event will still be fired.\n     */\n    public setSelected(newValue: boolean, clearSelection: boolean = false, suppressFinishActions: boolean = false) {\n        this.setSelectedParams({\n            newValue,\n            clearSelection,\n            suppressFinishActions,\n            rangeSelect: false\n        });\n    }\n\n    public isRowPinned(): boolean {\n        return this.rowPinned === Constants.PINNED_TOP || this.rowPinned === Constants.PINNED_BOTTOM;\n    }\n\n    // to make calling code more readable, this is the same method as setSelected except it takes names parameters\n    public setSelectedParams(params: SetSelectedParams): number {\n        const groupSelectsChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();\n        const newValue = params.newValue === true;\n        const clearSelection = params.clearSelection === true;\n        const suppressFinishActions = params.suppressFinishActions === true;\n        const rangeSelect = params.rangeSelect === true;\n        // groupSelectsFiltered only makes sense when group selects children\n        const groupSelectsFiltered = groupSelectsChildren && (params.groupSelectsFiltered === true);\n\n        if (this.id === undefined) {\n            console.warn('AG Grid: cannot select node until id for node is known');\n            return 0;\n        }\n\n        if (this.rowPinned) {\n            console.warn('AG Grid: cannot select pinned rows');\n            return 0;\n        }\n\n        // if we are a footer, we don't do selection, just pass the info\n        // to the sibling (the parent of the group)\n        if (this.footer) {\n            return this.sibling.setSelectedParams(params);\n        }\n\n        if (rangeSelect && this.beans.selectionService.getLastSelectedNode()) {\n            const newRowClicked = this.beans.selectionService.getLastSelectedNode() !== this;\n            const allowMultiSelect = this.beans.gridOptionsWrapper.isRowSelectionMulti();\n            if (newRowClicked && allowMultiSelect) {\n                const nodesChanged = this.doRowRangeSelection(params.newValue);\n                this.beans.selectionService.setLastSelectedNode(this);\n                return nodesChanged;\n            }\n        }\n\n        let updatedCount = 0;\n\n        // when groupSelectsFiltered, then this node may end up intermediate despite\n        // trying to set it to true / false. this group will be calculated further on\n        // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it\n        // here, otherwise the updatedCount would include it.\n        const skipThisNode = groupSelectsFiltered && this.group;\n\n        if (!skipThisNode) {\n            const thisNodeWasSelected = this.selectThisNode(newValue);\n            if (thisNodeWasSelected) {\n                updatedCount++;\n            }\n        }\n\n        if (groupSelectsChildren && this.childrenAfterGroup?.length) {\n            updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);\n        }\n\n        // clear other nodes if not doing multi select\n        if (!suppressFinishActions) {\n            const clearOtherNodes = newValue && (clearSelection || !this.beans.gridOptionsWrapper.isRowSelectionMulti());\n            if (clearOtherNodes) {\n                updatedCount += this.beans.selectionService.clearOtherNodes(this);\n            }\n\n            // only if we selected something, then update groups and fire events\n            if (updatedCount > 0) {\n                this.beans.selectionService.updateGroupsFromChildrenSelections();\n\n                // this is the very end of the 'action node', so we are finished all the updates,\n                // include any parent / child changes that this method caused\n                const event: SelectionChangedEvent = {\n                    type: Events.EVENT_SELECTION_CHANGED,\n                    api: this.beans.gridApi,\n                    columnApi: this.beans.columnApi\n                };\n                this.beans.eventService.dispatchEvent(event);\n            }\n\n            // so if user next does shift-select, we know where to start the selection from\n            if (newValue) {\n                this.beans.selectionService.setLastSelectedNode(this);\n            }\n        }\n\n        return updatedCount;\n    }\n\n    // selects all rows between this node and the last selected node (or the top if this is the first selection).\n    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\n    // holding down 'shift'.\n    private doRowRangeSelection(value: boolean = true): number {\n        const groupsSelectChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();\n        const lastSelectedNode = this.beans.selectionService.getLastSelectedNode();\n        const nodesToSelect = this.beans.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);\n\n        let updatedCount = 0;\n\n        nodesToSelect.forEach(rowNode => {\n            if (rowNode.group && groupsSelectChildren || (value === false && this === rowNode)) { return; }\n\n            const nodeWasSelected = rowNode.selectThisNode(value);\n            if (nodeWasSelected) {\n                updatedCount++;\n            }\n        });\n\n        this.beans.selectionService.updateGroupsFromChildrenSelections();\n\n        const event: SelectionChangedEvent = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            api: this.beans.gridApi,\n            columnApi: this.beans.columnApi\n        };\n\n        this.beans.eventService.dispatchEvent(event);\n\n        return updatedCount;\n    }\n\n    public isParentOfNode(potentialParent: RowNode): boolean {\n        let parentNode = this.parent;\n\n        while (parentNode) {\n            if (parentNode === potentialParent) {\n                return true;\n            }\n            parentNode = parentNode.parent;\n        }\n\n        return false;\n    }\n\n    public selectThisNode(newValue?: boolean): boolean {\n\n        // we only check selectable when newValue=true (ie selecting) to allow unselecting values,\n        // as selectable is dynamic, need a way to unselect rows when selectable becomes false.\n        const selectionNotAllowed = !this.selectable && newValue;\n        const selectionNotChanged = this.selected === newValue;\n\n        if (selectionNotAllowed || selectionNotChanged) { return false; }\n\n        this.selected = newValue;\n\n        if (this.eventService) {\n            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n        }\n\n        const event: RowSelectedEvent = this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED);\n\n        this.beans.eventService.dispatchEvent(event);\n\n        return true;\n    }\n\n    private selectChildNodes(newValue: boolean, groupSelectsFiltered: boolean): number {\n        const children = groupSelectsFiltered ? this.childrenAfterAggFilter : this.childrenAfterGroup;\n\n        if (missing(children)) { return 0; }\n\n        let updatedCount = 0;\n\n        for (let i = 0; i < children.length; i++) {\n            updatedCount += children[i].setSelectedParams({\n                newValue: newValue,\n                clearSelection: false,\n                suppressFinishActions: true,\n                groupSelectsFiltered\n            });\n        }\n\n        return updatedCount;\n    }\n\n    /** Add an event listener. */\n    public addEventListener(eventType: string, listener: Function): void {\n        if (!this.eventService) {\n            this.eventService = new EventService();\n        }\n        this.eventService.addEventListener(eventType, listener);\n    }\n\n    /** Remove event listener. */\n    public removeEventListener(eventType: string, listener: Function): void {\n        if (!this.eventService) { return; }\n\n        this.eventService.removeEventListener(eventType, listener);\n        if (this.eventService.noRegisteredListenersExist()) {\n            this.eventService = null;\n        }\n    }\n\n    public onMouseEnter(): void {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));\n    }\n\n    public onMouseLeave(): void {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));\n    }\n\n    public getFirstChildOfFirstChild(rowGroupColumn: Column | null): RowNode | null {\n        let currentRowNode: RowNode = this;\n        let isCandidate = true;\n        let foundFirstChildPath = false;\n        let nodeToSwapIn: RowNode | null = null;\n\n        // if we are hiding groups, then if we are the first child, of the first child,\n        // all the way up to the column we are interested in, then we show the group cell.\n        while (isCandidate && !foundFirstChildPath) {\n            const parentRowNode = currentRowNode.parent!;\n            const firstChild = exists(parentRowNode) && currentRowNode.firstChild;\n\n            if (firstChild) {\n                if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n                    foundFirstChildPath = true;\n                    nodeToSwapIn = parentRowNode;\n                }\n            } else {\n                isCandidate = false;\n            }\n\n            currentRowNode = parentRowNode;\n        }\n\n        return foundFirstChildPath ? nodeToSwapIn : null;\n    }\n\n    public isFullWidthCell(): boolean {\n        const isFullWidthCellFunc = this.beans.gridOptionsWrapper.getIsFullWidthCellFunc();\n        return isFullWidthCellFunc ? isFullWidthCellFunc({ rowNode: this }) : false;\n    }\n\n    /**\n     * Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.\n     * If the Row Node is not a group, it returns `undefined`.\n     */\n    public getRoute(): string[] | undefined {\n        if (this.key == null) { return; }\n\n        const res: string[] = [];\n\n        let pointer: RowNode = this;\n\n        while (pointer.key != null) {\n            res.push(pointer.key);\n            pointer = pointer.parent!;\n        }\n\n        return res.reverse();\n    }\n}\n"]}