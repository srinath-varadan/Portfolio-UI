{"version":3,"sources":["../../../src/ts/gridBodyComp/rowContainer/rowContainerEventsFeature.ts"],"names":[],"mappings":"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","file":"rowContainerEventsFeature.js","sourcesContent":["import { BeanStub } from \"../../context/beanStub\";\nimport { getCtrlForEvent, isStopPropagationForAgGrid, isEventSupported } from \"../../utils/event\";\nimport { Autowired, Optional, PostConstruct } from \"../../context/context\";\nimport { MouseEventService } from \"./../mouseEventService\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl\";\nimport { ValueService } from \"../../valueService/valueService\";\nimport { Column } from \"../../entities/column\";\nimport { IContextMenuFactory } from \"../../interfaces/iContextMenuFactory\";\nimport { isIOSUserAgent } from \"../../utils/browser\";\nimport { LongTapEvent, TouchListener } from \"../../widgets/touchListener\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { isUserSuppressingKeyboardEvent } from \"../../utils/keyboard\";\nimport { CellKeyDownEvent, CellKeyPressEvent, Events, FullWidthCellKeyDownEvent, FullWidthCellKeyPressEvent } from \"../../events\";\nimport { NavigationService } from \"./../navigationService\";\nimport { FocusService } from \"../../focusService\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { UndoRedoService } from \"../../undoRedo/undoRedoService\";\nimport { Constants } from \"../../constants/constants\";\nimport { missingOrEmpty } from \"../../utils/generic\";\nimport { last } from \"../../utils/array\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { PaginationProxy } from \"../../pagination/paginationProxy\";\nimport { PinnedRowModel } from \"../../pinnedRowModel/pinnedRowModel\";\nimport { IRangeService } from \"../../interfaces/IRangeService\";\nimport { ModuleRegistry } from \"../../modules/moduleRegistry\";\nimport { ModuleNames } from \"../../modules/moduleNames\";\nimport { IClipboardService } from \"../../interfaces/iClipboardService\";\nimport { CellCtrl } from \"../../rendering/cell/cellCtrl\";\n\nexport class RowContainerEventsFeature extends BeanStub {\n\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('valueService') private valueService: ValueService;\n    @Optional('contextMenuFactory') private contextMenuFactory: IContextMenuFactory;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('navigationService') private navigationService: NavigationService;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('undoRedoService') private undoRedoService: UndoRedoService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Optional('clipboardService') private clipboardService: IClipboardService;\n\n    private element: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        super();\n        this.element = element;\n    }\n\n    @PostConstruct\n    public postConstruct(): void {\n        this.addMouseListeners();\n        this.mockContextMenuForIPad();\n        this.addKeyboardEvents();\n    }\n\n    private addKeyboardEvents(): void {\n        const eventNames = ['keydown', 'keypress'];\n\n        eventNames.forEach(eventName => {\n            const listener = this.processKeyboardEvent.bind(this, eventName);\n            this.addManagedListener(this.element, eventName, listener);\n        });\n    }\n\n    private addMouseListeners(): void {\n        const mouseDownEvent = isEventSupported('touchstart') ? 'touchstart' : 'mousedown';\n        const eventNames = ['dblclick', 'contextmenu', 'mouseover', 'mouseout', 'click', mouseDownEvent];\n\n        eventNames.forEach(eventName => {\n            const listener = this.processMouseEvent.bind(this, eventName);\n            this.addManagedListener(this.element, eventName, listener);\n        });\n    }\n\n    private processMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        if (\n            !this.mouseEventService.isEventFromThisGrid(mouseEvent) ||\n            isStopPropagationForAgGrid(mouseEvent)\n        ) {\n            return;\n        }\n\n        const rowComp = this.getRowForEvent(mouseEvent);\n        const cellCtrl = this.mouseEventService.getRenderedCellForEvent(mouseEvent)!;\n\n        if (eventName === \"contextmenu\") {\n            this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellCtrl);\n        } else {\n            if (cellCtrl) {\n                cellCtrl.onMouseEvent(eventName, mouseEvent);\n            }\n            if (rowComp) {\n                rowComp.onMouseEvent(eventName, mouseEvent);\n            }\n        }\n    }\n\n    private mockContextMenuForIPad(): void {\n        // we do NOT want this when not in iPad, otherwise we will be doing\n        if (!isIOSUserAgent()) { return; }\n\n        const touchListener = new TouchListener(this.element);\n        const longTapListener = (event: LongTapEvent) => {\n            const rowComp = this.getRowForEvent(event.touchEvent);\n            const cellComp = this.mouseEventService.getRenderedCellForEvent(event.touchEvent)!;\n\n            this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);\n        };\n\n        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);\n        this.addDestroyFunc(() => touchListener.destroy());\n    }\n\n    private getRowForEvent(event: Event): RowCtrl | null {\n        let sourceElement: HTMLElement | null = event.target as HTMLElement | null;\n\n        while (sourceElement) {\n            const rowCon = this.gridOptionsWrapper.getDomData(sourceElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n            if (rowCon) {\n                return rowCon;\n            }\n\n            sourceElement = sourceElement.parentElement;\n        }\n\n        return null;\n    }\n\n    private handleContextMenuMouseEvent(mouseEvent: MouseEvent | null, touchEvent: TouchEvent | null, rowComp: RowCtrl | null, cellCtrl: CellCtrl) {\n        const rowNode = rowComp ? rowComp.getRowNode() : null;\n        const column = cellCtrl ? cellCtrl.getColumn() : null;\n        let value = null;\n\n        if (column) {\n            const event = mouseEvent ? mouseEvent : touchEvent;\n            cellCtrl.dispatchCellContextMenuEvent(event);\n            value = this.valueService.getValue(column, rowNode);\n        }\n\n        // if user clicked on a cell, anchor to that cell, otherwise anchor to the grid panel\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const anchorToElement = cellCtrl ? cellCtrl.getGui() : gridBodyCon.getGridBodyElement();\n\n        if (this.contextMenuFactory) {\n            this.contextMenuFactory.onContextMenu(mouseEvent, touchEvent, rowNode, column, value, anchorToElement);\n        }\n    }\n\n    private processKeyboardEvent(eventName: string, keyboardEvent: KeyboardEvent): void {\n        const cellComp = getCtrlForEvent<CellCtrl>(this.gridOptionsWrapper, keyboardEvent, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n        const rowComp = getCtrlForEvent<RowCtrl>(this.gridOptionsWrapper, keyboardEvent, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n\n        if (keyboardEvent.defaultPrevented) { return; }\n        if (cellComp) {\n            this.processCellKeyboardEvent(cellComp, eventName, keyboardEvent);\n        } else if (rowComp && rowComp.isFullWidth()) {\n            this.processFullWidthRowKeyboardEvent(rowComp, eventName, keyboardEvent);\n        }\n    }\n\n    private processCellKeyboardEvent(cellCtrl: CellCtrl, eventName: string, keyboardEvent: KeyboardEvent): void {\n        const rowNode = cellCtrl.getRowNode();\n        const column = cellCtrl.getColumn();\n        const editing = cellCtrl.isEditing();\n\n        const gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, editing);\n\n        if (gridProcessingAllowed) {\n            switch (eventName) {\n                case 'keydown':\n                    // first see if it's a scroll key, page up / down, home / end etc\n                    const wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);\n\n                    // if not a scroll key, then we pass onto cell\n                    if (!wasScrollKey) {\n                        cellCtrl.onKeyDown(keyboardEvent);\n                    }\n\n                    // perform clipboard and undo / redo operations\n                    this.doGridOperations(keyboardEvent, cellCtrl.isEditing());\n\n                    break;\n                case 'keypress':\n                    cellCtrl.onKeyPress(keyboardEvent);\n                    break;\n            }\n        }\n\n        if (eventName === 'keydown') {\n            const cellKeyDownEvent: CellKeyDownEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_DOWN);\n            this.eventService.dispatchEvent(cellKeyDownEvent);\n        }\n\n        if (eventName === 'keypress') {\n            const cellKeyPressEvent: CellKeyPressEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_PRESS);\n            this.eventService.dispatchEvent(cellKeyPressEvent);\n        }\n    }\n\n    private processFullWidthRowKeyboardEvent(rowComp: RowCtrl, eventName: string, keyboardEvent: KeyboardEvent) {\n        const rowNode = rowComp.getRowNode();\n        const focusedCell = this.focusService.getFocusedCell();\n        const column = (focusedCell && focusedCell.column) as Column;\n        const gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, false);\n\n        if (gridProcessingAllowed) {\n            const key = keyboardEvent.key;\n            if (eventName === 'keydown') {\n                switch (key) {\n                    case KeyCode.UP:\n                    case KeyCode.DOWN:\n                        rowComp.onKeyboardNavigate(keyboardEvent);\n                        break;\n                    case KeyCode.TAB:\n                        rowComp.onTabKeyDown(keyboardEvent);\n                    default:\n                }\n            }\n        }\n\n        if (eventName === 'keydown') {\n            const cellKeyDownEvent: FullWidthCellKeyDownEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_DOWN, keyboardEvent);\n            this.eventService.dispatchEvent(cellKeyDownEvent);\n        }\n\n        if (eventName === 'keypress') {\n            const cellKeyPressEvent: FullWidthCellKeyPressEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_PRESS, keyboardEvent);\n            this.eventService.dispatchEvent(cellKeyPressEvent);\n        }\n    }\n\n    private doGridOperations(keyboardEvent: KeyboardEvent, editing: boolean): void {\n        // check if ctrl or meta key pressed\n        if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) { return; }\n\n        // if the cell the event came from is editing, then we do not\n        // want to do the default shortcut keys, otherwise the editor\n        // (eg a text field) would not be able to do the normal cut/copy/paste\n        if (editing) { return; }\n\n        // for copy / paste, we don't want to execute when the event\n        // was from a child grid (happens in master detail)\n        if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) { return; }\n\n        switch (keyboardEvent.code) {\n            case KeyCode.A:\n                return this.onCtrlAndA(keyboardEvent);\n            case KeyCode.C:\n                return this.onCtrlAndC(keyboardEvent);\n            case KeyCode.V:\n                return this.onCtrlAndV();\n            case KeyCode.D:\n                return this.onCtrlAndD(keyboardEvent);\n            case KeyCode.Z:\n                return keyboardEvent.shiftKey ? this.undoRedoService.redo() : this.undoRedoService.undo();\n            case KeyCode.Y:\n                return this.undoRedoService.redo();\n        }\n    }\n\n    private onCtrlAndA(event: KeyboardEvent): void {\n\n        const { pinnedRowModel, paginationProxy, rangeService } = this;\n        const { PINNED_BOTTOM, PINNED_TOP } = Constants;\n\n        if (rangeService && paginationProxy.isRowsToRender()) {\n            const [isEmptyPinnedTop, isEmptyPinnedBottom] = [\n                pinnedRowModel.isEmpty(PINNED_TOP),\n                pinnedRowModel.isEmpty(PINNED_BOTTOM)\n            ];\n\n            const floatingStart = isEmptyPinnedTop ? null : PINNED_TOP;\n            let floatingEnd: string | null;\n            let rowEnd: number;\n\n            if (isEmptyPinnedBottom) {\n                floatingEnd = null;\n                rowEnd = this.paginationProxy.getRowCount() - 1;\n            } else {\n                floatingEnd = PINNED_BOTTOM;\n                rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;\n            }\n\n            const allDisplayedColumns = this.columnModel.getAllDisplayedColumns();\n            if (missingOrEmpty(allDisplayedColumns)) { return; }\n\n            rangeService.setCellRange({\n                rowStartIndex: 0,\n                rowStartPinned: floatingStart,\n                rowEndIndex: rowEnd,\n                rowEndPinned: floatingEnd,\n                columnStart: allDisplayedColumns[0],\n                columnEnd: last(allDisplayedColumns)\n            });\n        }\n        event.preventDefault();\n    }\n\n    private onCtrlAndC(event: KeyboardEvent): void {\n\n        if (!this.clipboardService || this.gridOptionsWrapper.isEnableCellTextSelection()) { return; }\n\n        this.clipboardService.copyToClipboard();\n        event.preventDefault();\n    }\n\n    private onCtrlAndV(): void {\n        if (ModuleRegistry.isRegistered(ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {\n            this.clipboardService.pasteFromClipboard();\n        }\n    }\n\n    private onCtrlAndD(event: KeyboardEvent): void {\n        if (ModuleRegistry.isRegistered(ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {\n            this.clipboardService.copyRangeDown();\n        }\n        event.preventDefault();\n    }\n\n}"]}