{"version":3,"sources":["../../../src/ts/gridBodyComp/rowContainer/rowContainerCtrl.ts"],"names":[],"mappings":"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","file":"rowContainerCtrl.js","sourcesContent":["import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { ScrollVisibleService } from \"../../gridBodyComp/scrollVisibleService\";\nimport { Events } from \"../../eventKeys\";\nimport { RowContainerEventsFeature } from \"./rowContainerEventsFeature\";\nimport { DragService } from \"../../dragAndDrop/dragService\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { getInnerWidth, getScrollLeft, isHorizontalScrollShowing, isVisible, setScrollLeft } from \"../../utils/dom\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { ResizeObserverService } from \"../../misc/resizeObserverService\";\nimport { ViewportSizeFeature } from \"../viewportSizeFeature\";\nimport { convertToMap } from \"../../utils/map\";\nimport { SetPinnedLeftWidthFeature } from \"./setPinnedLeftWidthFeature\";\nimport { SetPinnedRightWidthFeature } from \"./setPinnedRightWidthFeature\";\nimport { SetHeightFeature } from \"./setHeightFeature\";\nimport { DragListenerFeature } from \"./dragListenerFeature\";\nimport { CenterWidthFeature } from \"../centerWidthFeature\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl\";\nimport { Constants } from \"../../constants/constants\";\nimport { RowRenderer } from \"../../rendering/rowRenderer\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\n\nexport enum RowContainerName {\n    LEFT = 'left',\n    RIGHT = 'right',\n    CENTER = 'center',\n    FULL_WIDTH = 'fullWidth',\n\n    TOP_LEFT = 'topLeft',\n    TOP_RIGHT = 'topRight',\n    TOP_CENTER = 'topCenter',\n    TOP_FULL_WIDTH = 'topFullWidth',\n\n    BOTTOM_LEFT = 'bottomLeft',\n    BOTTOM_RIGHT = 'bottomRight',\n    BOTTOM_CENTER = 'bottomCenter',\n    BOTTOM_FULL_WIDTH = 'bottomFullWidth'\n}\n\nexport enum RowContainerType {\n    LEFT = 'left',\n    RIGHT = 'right',\n    CENTER = 'center',\n    FULL_WIDTH = 'fullWidth'\n}\n\nexport function getRowContainerTypeForName(name: RowContainerName): RowContainerType {\n    switch (name) {\n        case RowContainerName.CENTER:\n        case RowContainerName.TOP_CENTER:\n        case RowContainerName.BOTTOM_CENTER:\n            return RowContainerType.CENTER;\n        case RowContainerName.LEFT:\n        case RowContainerName.TOP_LEFT:\n        case RowContainerName.BOTTOM_LEFT:\n            return RowContainerType.LEFT;\n        case RowContainerName.RIGHT:\n        case RowContainerName.TOP_RIGHT:\n        case RowContainerName.BOTTOM_RIGHT:\n            return RowContainerType.RIGHT;\n        case RowContainerName.FULL_WIDTH:\n        case RowContainerName.TOP_FULL_WIDTH:\n        case RowContainerName.BOTTOM_FULL_WIDTH:\n            return RowContainerType.FULL_WIDTH;\n        default :\n            throw Error('Invalid Row Container Type');\n    }\n}\n\nconst ContainerCssClasses: Map<RowContainerName, string> = convertToMap([\n    [RowContainerName.CENTER, 'ag-center-cols-container'],\n    [RowContainerName.LEFT, 'ag-pinned-left-cols-container'],\n    [RowContainerName.RIGHT, 'ag-pinned-right-cols-container'],\n    [RowContainerName.FULL_WIDTH, 'ag-full-width-container'],\n\n    [RowContainerName.TOP_CENTER, 'ag-floating-top-container'],\n    [RowContainerName.TOP_LEFT, 'ag-pinned-left-floating-top'],\n    [RowContainerName.TOP_RIGHT, 'ag-pinned-right-floating-top'],\n    [RowContainerName.TOP_FULL_WIDTH, 'ag-floating-top-full-width-container'],\n\n    [RowContainerName.BOTTOM_CENTER, 'ag-floating-bottom-container'],\n    [RowContainerName.BOTTOM_LEFT, 'ag-pinned-left-floating-bottom'],\n    [RowContainerName.BOTTOM_RIGHT, 'ag-pinned-right-floating-bottom'],\n    [RowContainerName.BOTTOM_FULL_WIDTH, 'ag-floating-bottom-full-width-container'],\n]);\n\nconst ViewportCssClasses: Map<RowContainerName, string> = convertToMap([\n    [RowContainerName.CENTER, 'ag-center-cols-viewport'],\n    [RowContainerName.TOP_CENTER, 'ag-floating-top-viewport'],\n    [RowContainerName.BOTTOM_CENTER, 'ag-floating-bottom-viewport'],\n]);\n\nconst WrapperCssClasses: Map<RowContainerName, string> = convertToMap([\n    [RowContainerName.CENTER, 'ag-center-cols-clipper'],\n]);\n\nexport interface IRowContainerComp {\n    setViewportHeight(height: string): void;\n    setRowCtrls(rowCtrls: RowCtrl[]): void;\n    setDomOrder(domOrder: boolean): void;\n    setContainerWidth(width: string): void;\n}\n\nexport class RowContainerCtrl extends BeanStub {\n\n    public static getRowContainerCssClasses(name: RowContainerName): {container?: string, viewport?: string, wrapper?: string} {\n        const containerClass = ContainerCssClasses.get(name);\n        const viewportClass = ViewportCssClasses.get(name);\n        const wrapperClass = WrapperCssClasses.get(name);\n        return {container: containerClass, viewport: viewportClass, wrapper: wrapperClass};\n    }\n\n    public static getPinned(name: RowContainerName): string | null {\n        switch (name) {\n            case RowContainerName.BOTTOM_LEFT:\n            case RowContainerName.TOP_LEFT:\n            case RowContainerName.LEFT:\n                return Constants.PINNED_LEFT;\n            case RowContainerName.BOTTOM_RIGHT:\n            case RowContainerName.TOP_RIGHT:\n            case RowContainerName.RIGHT:\n                return Constants.PINNED_RIGHT;\n            default:\n                return null;\n        }\n\n    }\n\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('dragService') private dragService: DragService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('resizeObserverService') private resizeObserverService: ResizeObserverService;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n\n    private readonly name: RowContainerName;\n\n    private comp: IRowContainerComp;\n    private eContainer: HTMLElement;\n    private eViewport: HTMLElement;\n    private eWrapper: HTMLElement;\n    private enableRtl: boolean;\n    private embedFullWidthRows: boolean;\n\n    private viewportSizeFeature: ViewportSizeFeature; // only center has this\n\n    constructor(name: RowContainerName) {\n        super();\n        this.name = name;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();\n        this.embedFullWidthRows = this.gridOptionsWrapper.isEmbedFullWidthRows();\n\n        this.forContainers([RowContainerName.CENTER],\n            () => this.viewportSizeFeature = this.createManagedBean(new ViewportSizeFeature(this)));\n    }\n\n    private registerWithCtrlsService(): void {\n        switch (this.name) {\n            case RowContainerName.CENTER: this.ctrlsService.registerCenterRowContainerCtrl(this); break;\n            case RowContainerName.LEFT: this.ctrlsService.registerLeftRowContainerCtrl(this); break;\n            case RowContainerName.RIGHT: this.ctrlsService.registerRightRowContainerCtrl(this); break;\n            case RowContainerName.TOP_CENTER: this.ctrlsService.registerTopCenterRowContainerCtrl(this); break;\n            case RowContainerName.TOP_LEFT: this.ctrlsService.registerTopLeftRowContainerCon(this); break;\n            case RowContainerName.TOP_RIGHT: this.ctrlsService.registerTopRightRowContainerCtrl(this); break;\n            case RowContainerName.BOTTOM_CENTER: this.ctrlsService.registerBottomCenterRowContainerCtrl(this); break;\n            case RowContainerName.BOTTOM_LEFT: this.ctrlsService.registerBottomLeftRowContainerCtrl(this); break;\n            case RowContainerName.BOTTOM_RIGHT: this.ctrlsService.registerBottomRightRowContainerCtrl(this); break;\n        }\n    }\n\n    private forContainers(names: RowContainerName[], callback: (() => void)): void {\n        if (names.indexOf(this.name) >= 0) {\n            callback();\n        }\n    }\n\n    public getContainerElement(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public getViewportSizeFeature(): ViewportSizeFeature {\n        return this.viewportSizeFeature;\n    }\n\n    public setComp(view: IRowContainerComp, eContainer: HTMLElement, eViewport: HTMLElement, eWrapper: HTMLElement): void {\n        this.comp = view;\n        this.eContainer = eContainer;\n        this.eViewport = eViewport;\n        this.eWrapper = eWrapper;\n\n        this.createManagedBean(new RowContainerEventsFeature(this.eContainer));\n        this.addPreventScrollWhileDragging();\n        this.listenOnDomOrder();\n        this.stopHScrollOnPinnedRows();\n\n        const allTopNoFW = [RowContainerName.TOP_CENTER, RowContainerName.TOP_LEFT, RowContainerName.TOP_RIGHT];\n        const allBottomNoFW = [RowContainerName.BOTTOM_CENTER, RowContainerName.BOTTOM_LEFT, RowContainerName.BOTTOM_RIGHT];\n        const allMiddleNoFW = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT];\n        const allNoFW = [...allTopNoFW, ...allBottomNoFW, ...allMiddleNoFW];\n\n        const allMiddle = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT, RowContainerName.FULL_WIDTH];\n\n        const allCenter = [RowContainerName.CENTER, RowContainerName.TOP_CENTER, RowContainerName.BOTTOM_CENTER];\n        const allLeft = [RowContainerName.LEFT, RowContainerName.BOTTOM_LEFT, RowContainerName.TOP_LEFT];\n        const allRight = [RowContainerName.RIGHT, RowContainerName.BOTTOM_RIGHT, RowContainerName.TOP_RIGHT];\n\n        this.forContainers(allLeft, () => this.createManagedBean(new SetPinnedLeftWidthFeature(this.eContainer)));\n        this.forContainers(allRight, () => this.createManagedBean(new SetPinnedRightWidthFeature(this.eContainer)));\n        this.forContainers(allMiddle, () => this.createManagedBean(new SetHeightFeature(this.eContainer, this.eWrapper)));\n        this.forContainers(allNoFW, () => this.createManagedBean(new DragListenerFeature(this.eContainer)));\n\n        this.forContainers(allCenter, () => this.createManagedBean(\n            new CenterWidthFeature(width => this.comp.setContainerWidth(`${width}px`))\n        ));\n\n        this.addListeners();\n        this.registerWithCtrlsService();\n    }\n\n    private addListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, ()=> this.onScrollVisibilityChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, ()=> this.onDisplayedColumnsChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, ()=> this.onDisplayedColumnsWidthChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_ROWS_CHANGED, ()=> this.onDisplayedRowsChanged());\n\n        this.onScrollVisibilityChanged();\n        this.onDisplayedColumnsChanged();\n        this.onDisplayedColumnsWidthChanged();\n        this.onDisplayedRowsChanged();\n    }\n\n    private listenOnDomOrder(): void {\n        const listener = () => this.comp.setDomOrder(this.gridOptionsWrapper.isEnsureDomOrder());\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);\n        listener();\n    }\n\n    // when editing a pinned row, if the cell is half outside the scrollable area, the browser can\n    // scroll the column into view. we do not want this, the pinned sections should never scroll.\n    // so we listen to scrolls on these containers and reset the scroll if we find one.\n    private stopHScrollOnPinnedRows(): void {\n        this.forContainers([RowContainerName.TOP_CENTER, RowContainerName.BOTTOM_CENTER], () => {\n            const resetScrollLeft = () => this.eViewport.scrollLeft = 0;\n            this.addManagedListener(this.eViewport, 'scroll', resetScrollLeft);\n        });\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        this.forContainers([RowContainerName.CENTER], () => this.onHorizontalViewportChanged());\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        this.forContainers([RowContainerName.CENTER], () => this.onHorizontalViewportChanged());\n    }\n\n    private onScrollVisibilityChanged(): void {\n        if (this.name !== RowContainerName.CENTER) { return; }\n\n        const visible = this.scrollVisibleService.isHorizontalScrollShowing();\n        const scrollbarWidth = visible ? (this.gridOptionsWrapper.getScrollbarWidth() || 0) : 0;\n        const height = scrollbarWidth == 0 ? '100%' : `calc(100% + ${scrollbarWidth}px)`;\n        this.comp.setViewportHeight(height);\n    }\n\n    // this methods prevents the grid views from being scrolled while the dragService is being used\n    // eg. the view should not scroll up and down while dragging rows using the rowDragComp.\n    private addPreventScrollWhileDragging(): void {\n        const preventScroll = (e: TouchEvent) => {\n            if (this.dragService.isDragging()) {\n                if (e.cancelable) { e.preventDefault(); }\n            }\n        };\n\n        this.eContainer.addEventListener('touchmove', preventScroll, { passive: false });\n        this.addDestroyFunc(() => this.eContainer.removeEventListener('touchmove', preventScroll));\n    }\n\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)\n    public onHorizontalViewportChanged(): void {\n        const scrollWidth = this.getCenterWidth();\n        const scrollPosition = this.getCenterViewportScrollLeft();\n\n        this.columnModel.setViewportPosition(scrollWidth, scrollPosition);\n    }\n\n    public getCenterWidth(): number {\n        return getInnerWidth(this.eViewport);\n    }\n\n    public getCenterViewportScrollLeft(): number {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        return getScrollLeft(this.eViewport, this.enableRtl);\n    }\n\n    public registerViewportResizeListener(listener: (() => void)) {\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);\n        this.addDestroyFunc(() => unsubscribeFromResize());\n    }\n\n    public isViewportVisible(): boolean {\n        return isVisible(this.eViewport);\n    }\n\n    public isViewportHScrollShowing(): boolean {\n        return isHorizontalScrollShowing(this.eViewport);\n    }\n\n    public getViewportScrollLeft(): number {\n        return getScrollLeft(this.eViewport, this.enableRtl);\n    }\n\n    public isHorizontalScrollShowing(): boolean {\n        const isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();\n        return isAlwaysShowHorizontalScroll || isHorizontalScrollShowing(this.eViewport);\n    }\n\n    public getViewportElement(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public setContainerTranslateX(amount: number): void {\n        this.eContainer.style.transform = `translateX(${amount}px)`;\n    }\n\n    public getHScrollPosition(): { left: number, right: number; } {\n        const res = {\n            left: this.eViewport.scrollLeft,\n            right: this.eViewport.scrollLeft + this.eViewport.offsetWidth\n        };\n        return res;\n    }\n\n    public setCenterViewportScrollLeft(value: number): void {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        setScrollLeft(this.eViewport, value, this.enableRtl);\n    }\n\n    private onDisplayedRowsChanged(): void {\n        const fullWithContainer =\n            this.name === RowContainerName.TOP_FULL_WIDTH\n            || this.name === RowContainerName.BOTTOM_FULL_WIDTH\n            || this.name === RowContainerName.FULL_WIDTH;\n\n        const doesRowMatch = (rowCtrl: RowCtrl) => {\n            const fullWidthRow = rowCtrl.isFullWidth();\n\n            const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n\n            const embedFW = this.embedFullWidthRows || printLayout;\n\n            const match = fullWithContainer ?\n                !embedFW && fullWidthRow\n                : embedFW || !fullWidthRow;\n\n            return match;\n        };\n\n        // this list contains either all pinned top, center or pinned bottom rows\n        const allRowsRegardlessOfFullWidth = this.getRowCtrls();\n        // this filters out rows not for this container, eg if it's a full with row, but we are not full with container\n        const rowsThisContainer = allRowsRegardlessOfFullWidth.filter(doesRowMatch);\n\n        this.comp.setRowCtrls(rowsThisContainer);\n    }\n\n    private getRowCtrls(): RowCtrl[] {\n        switch (this.name) {\n            case RowContainerName.TOP_CENTER:\n            case RowContainerName.TOP_LEFT:\n            case RowContainerName.TOP_RIGHT:\n            case RowContainerName.TOP_FULL_WIDTH:\n                return this.rowRenderer.getTopRowCtrls();\n\n            case RowContainerName.BOTTOM_CENTER:\n            case RowContainerName.BOTTOM_LEFT:\n            case RowContainerName.BOTTOM_RIGHT:\n            case RowContainerName.BOTTOM_FULL_WIDTH:\n                return this.rowRenderer.getBottomRowCtrls();\n\n            default:\n                return this.rowRenderer.getRowCtrls();\n        }\n    }\n}"]}