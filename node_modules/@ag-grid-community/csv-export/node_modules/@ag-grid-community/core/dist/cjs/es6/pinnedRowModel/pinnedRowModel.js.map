{"version":3,"sources":["../../../src/ts/pinnedRowModel/pinnedRowModel.ts"],"names":[],"mappings":"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","file":"pinnedRowModel.js","sourcesContent":["import { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { Events, PinnedRowDataChangedEvent } from \"../events\";\nimport { Constants } from \"../constants/constants\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { missingOrEmpty } from \"../utils/generic\";\nimport { last } from \"../utils/array\";\nimport { Beans } from \"../rendering/beans\";\n\n@Bean('pinnedRowModel')\nexport class PinnedRowModel extends BeanStub {\n\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('beans') private beans: Beans;\n\n    private pinnedTopRows: RowNode[];\n    private pinnedBottomRows: RowNode[];\n\n    @PostConstruct\n    public init(): void {\n        this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());\n        this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());\n    }\n\n    public isEmpty(floating: string): boolean {\n        const rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;\n        return missingOrEmpty(rows);\n    }\n\n    public isRowsToRender(floating: string): boolean {\n        return !this.isEmpty(floating);\n    }\n\n    public getRowAtPixel(pixel: number, floating: string): number {\n        const rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;\n        if (missingOrEmpty(rows)) {\n            return 0; // this should never happen, just in case, 0 is graceful failure\n        }\n        for (let i = 0; i < rows.length; i++) {\n            const rowNode = rows[i];\n            const rowTopPixel = rowNode.rowTop! + rowNode.rowHeight! - 1;\n            // only need to range check against the top pixel, as we are going through the list\n            // in order, first row to hit the pixel wins\n            if (rowTopPixel >= pixel) {\n                return i;\n            }\n        }\n        return rows.length - 1;\n    }\n\n    public setPinnedTopRowData(rowData: any[] | undefined): void {\n        this.pinnedTopRows = this.createNodesFromData(rowData, true);\n        const event: PinnedRowDataChangedEvent = {\n            type: Events.EVENT_PINNED_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public setPinnedBottomRowData(rowData: any[] | undefined): void {\n        this.pinnedBottomRows = this.createNodesFromData(rowData, false);\n        const event: PinnedRowDataChangedEvent = {\n            type: Events.EVENT_PINNED_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private createNodesFromData(allData: any[] | undefined, isTop: boolean): RowNode[] {\n        const rowNodes: RowNode[] = [];\n        if (allData) {\n            let nextRowTop = 0;\n            allData.forEach((dataItem: any, index: number) => {\n                const rowNode = new RowNode(this.beans);\n                rowNode.data = dataItem;\n\n                const idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;\n                rowNode.id = idPrefix + index;\n\n                rowNode.rowPinned = isTop ? Constants.PINNED_TOP : Constants.PINNED_BOTTOM;\n                rowNode.setRowTop(nextRowTop);\n                rowNode.setRowHeight(this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);\n                rowNode.setRowIndex(index);\n                nextRowTop += rowNode.rowHeight!;\n                rowNodes.push(rowNode);\n            });\n        }\n        return rowNodes;\n    }\n\n    public getPinnedTopRowData(): RowNode[] {\n        return this.pinnedTopRows;\n    }\n\n    public getPinnedBottomRowData(): RowNode[] {\n        return this.pinnedBottomRows;\n    }\n\n    public getPinnedTopTotalHeight(): number {\n        return this.getTotalHeight(this.pinnedTopRows);\n    }\n\n    public getPinnedTopRowCount(): number {\n        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;\n    }\n\n    public getPinnedBottomRowCount(): number {\n        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;\n    }\n\n    public getPinnedTopRow(index: number): RowNode | undefined {\n        return this.pinnedTopRows[index];\n    }\n\n    public getPinnedBottomRow(index: number): RowNode | undefined {\n        return this.pinnedBottomRows[index];\n    }\n\n    public forEachPinnedTopRow(callback: (rowNode: RowNode, index: number) => void): void {\n        if (missingOrEmpty(this.pinnedTopRows)) {\n            return;\n        }\n        this.pinnedTopRows.forEach(callback);\n    }\n\n    public forEachPinnedBottomRow(callback: (rowNode: RowNode, index: number) => void): void {\n        if (missingOrEmpty(this.pinnedBottomRows)) {\n            return;\n        }\n        this.pinnedBottomRows.forEach(callback);\n    }\n\n    public getPinnedBottomTotalHeight(): number {\n        return this.getTotalHeight(this.pinnedBottomRows);\n    }\n\n    private getTotalHeight(rowNodes: RowNode[]): number {\n        if (!rowNodes || rowNodes.length === 0) { return 0; }\n\n        const lastNode = last(rowNodes);\n        return lastNode.rowTop! + lastNode.rowHeight!;\n    }\n\n}\n"]}